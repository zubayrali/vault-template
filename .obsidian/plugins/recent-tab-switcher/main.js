/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RecentTabSwitcher
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var RecentTabSwitcher = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.previousLeaf = null;
    this.currentLeaf = null;
  }
  async onload() {
    console.log("RecentTabSwitcher Plugin loaded");
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.updatePreviousLeaf();
      })
    );
    this.updatePreviousLeaf();
    this.addCommand({
      id: "switch-to-previous-leaf",
      name: "Switch to Previous Leaf",
      callback: () => this.switchToPreviousLeaf()
    });
  }
  updatePreviousLeaf() {
    const newLeaf = this.app.workspace.activeLeaf;
    if (newLeaf && newLeaf !== this.currentLeaf) {
      this.previousLeaf = this.currentLeaf;
      this.currentLeaf = newLeaf;
    }
  }
  switchToPreviousLeaf() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf) {
      if (this.previousLeaf && this.previousLeaf !== activeLeaf) {
        this.app.workspace.setActiveLeaf(this.previousLeaf);
      } else {
        console.log("No previous tab to switch to.");
        new import_obsidian.Notice("No previous tab to switch to.");
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTm90aWNlLCBQbHVnaW4sIFRleHRGaWxlVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2VudFRhYlN3aXRjaGVyIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHByaXZhdGUgcHJldmlvdXNMZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRMZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVjZW50VGFiU3dpdGNoZXIgUGx1Z2luIGxvYWRlZFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxyXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQWN0aXZlIGxlYWYgY2hhbmdlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJldmlvdXNMZWFmKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJFdmVudCBsaXN0ZW5lciBmb3IgJ2FjdGl2ZS1sZWFmLWNoYW5nZScgcmVnaXN0ZXJlZFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVQcmV2aW91c0xlYWYoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdzd2l0Y2gtdG8tcHJldmlvdXMtbGVhZicsXHJcbiAgICAgICAgICAgIG5hbWU6ICdTd2l0Y2ggdG8gUHJldmlvdXMgTGVhZicsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLnN3aXRjaFRvUHJldmlvdXNMZWFmKClcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJDb21tYW5kIGZvciBzd2l0Y2hpbmcgdG8gcHJldmlvdXMgbGVhZiByZWdpc3RlcmVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlUHJldmlvdXNMZWFmKCkge1xyXG4gICAgICAgIGNvbnN0IG5ld0xlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjsgLy8gY291bGRuJ3QgZmluZCBhIHN1aXRhYmxlIFxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgUHJldmlvdXMgTGVhZi4gTmV3IExlYWY6XCIsIG5ld0xlYWYpO1xyXG4gICAgICAgIGlmIChuZXdMZWFmICYmIG5ld0xlYWYgIT09IHRoaXMuY3VycmVudExlYWYpIHtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aW91c0xlYWYgPSB0aGlzLmN1cnJlbnRMZWFmO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMZWFmID0gbmV3TGVhZjtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJQcmV2aW91cyBMZWFmIHVwZGF0ZWQgdG86XCIsIHRoaXMucHJldmlvdXNMZWFmKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJDdXJyZW50IExlYWYgdXBkYXRlZCB0bzpcIiwgdGhpcy5jdXJyZW50TGVhZik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3dpdGNoVG9QcmV2aW91c0xlYWYoKSB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlTGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQWN0aXZlIExlYWY6XCIsIGFjdGl2ZUxlYWYpO1xyXG5cclxuICAgICAgICBpZiAoYWN0aXZlTGVhZikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2aW91c0xlYWYgJiYgdGhpcy5wcmV2aW91c0xlYWYgIT09IGFjdGl2ZUxlYWYpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU3dpdGNoaW5nIHRvIFByZXZpb3VzIExlYWY6XCIsIHRoaXMucHJldmlvdXNMZWFmKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKHRoaXMucHJldmlvdXNMZWFmKTsgLy8gU2V0IHRoZSBwcmV2aW91cyBsZWFmIGFzIGFjdGl2ZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJObyBwcmV2aW91cyB0YWIgdG8gc3dpdGNoIHRvLlwiKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBwcmV2aW91cyB0YWIgdG8gc3dpdGNoIHRvLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNEQ7QUFFNUQsSUFBcUIsb0JBQXJCLGNBQStDLHVCQUFPO0FBQUEsRUFBdEQ7QUFBQTtBQUNJLFNBQVEsZUFBcUM7QUFDN0MsU0FBUSxjQUFvQztBQUFBO0FBQUEsRUFFNUMsTUFBTSxTQUFTO0FBQ1gsWUFBUSxJQUFJLGlDQUFpQztBQUU3QyxTQUFLO0FBQUEsTUFDRCxLQUFLLElBQUksVUFBVSxHQUFHLHNCQUFzQixNQUFNO0FBRTlDLGFBQUssbUJBQW1CO0FBQUEsTUFDNUIsQ0FBQztBQUFBLElBQ0w7QUFJQSxTQUFLLG1CQUFtQjtBQUV4QixTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTSxLQUFLLHFCQUFxQjtBQUFBLElBQzlDLENBQUM7QUFBQSxFQUdMO0FBQUEsRUFFUSxxQkFBcUI7QUFDekIsVUFBTSxVQUFVLEtBQUssSUFBSSxVQUFVO0FBRW5DLFFBQUksV0FBVyxZQUFZLEtBQUssYUFBYTtBQUN6QyxXQUFLLGVBQWUsS0FBSztBQUN6QixXQUFLLGNBQWM7QUFBQSxJQUd2QjtBQUFBLEVBQ0o7QUFBQSxFQUVRLHVCQUF1QjtBQUMzQixVQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVU7QUFHdEMsUUFBSSxZQUFZO0FBQ1osVUFBSSxLQUFLLGdCQUFnQixLQUFLLGlCQUFpQixZQUFZO0FBRXZELGFBQUssSUFBSSxVQUFVLGNBQWMsS0FBSyxZQUFZO0FBQUEsTUFDdEQsT0FBTztBQUNILGdCQUFRLElBQUksK0JBQStCO0FBQzNDLFlBQUksdUJBQU8sK0JBQStCO0FBQUEsTUFDOUM7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
