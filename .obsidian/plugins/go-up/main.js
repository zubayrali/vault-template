/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => goUp
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/utils/makeNotice.ts
var import_obsidian = require("obsidian");
var makeNotice = (message, timeout) => {
  return new import_obsidian.Notice(message, timeout);
};
var makeNotice_default = makeNotice;

// src/modal/MultiPageModal.ts
var import_obsidian2 = require("obsidian");
var MultiPageModal = class extends import_obsidian2.SuggestModal {
  constructor(app, goPage, upPages) {
    super(app);
    this.upPages = upPages;
    this.goPage = goPage;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    return this.upPages.filter((page) => {
      return page.toLowerCase().includes(query.toLowerCase());
    });
  }
  // Renders each suggestion item.
  renderSuggestion(page, el) {
    el.createEl("div", { text: page != null ? page : void 0 });
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(page, evt) {
    this.goPage(page, "", false);
  }
};

// src/utils/checkAlias.ts
var checkAlias = (alias) => {
  if (alias.contains("|")) {
    return true;
  } else {
    return false;
  }
};
var checkAlias_default = checkAlias;

// src/utils/getPageName.ts
var getPageName = (property) => {
  var _a, _b;
  return (_b = (_a = property == null ? void 0 : property.trim().match(/\[\[(.*?)\]\]/)) == null ? void 0 : _a[1]) != null ? _b : null;
};
var getPageName_default = getPageName;

// src/utils/getPageNameInAlias.ts
var getPageNameInAlias = (page) => {
  return page.split("|")[0];
};
var getPageNameInAlias_default = getPageNameInAlias;

// src/goMultiPage.ts
var goMultiPage = (upPages, goPage, app) => {
  upPages = upPages.reduce((prev, upPage) => {
    let pageName = getPageName_default(upPage);
    if (pageName === null) {
      return prev;
    }
    if (checkAlias_default(pageName)) {
      pageName = getPageNameInAlias_default(pageName);
    }
    prev.push(pageName);
    return prev;
  }, []);
  if (upPages.length === 1) {
    goPage(upPages[0], "", false);
  } else {
    new MultiPageModal(app, goPage, upPages).open();
  }
};
var goMultiPage_default = goMultiPage;

// src/goSinglePage.ts
var goSinglePage = (upPage, goPage) => {
  let upPageName = getPageName_default(upPage);
  if (upPageName === null) {
    return;
  }
  if (checkAlias_default(upPageName)) {
    upPageName = getPageNameInAlias_default(upPageName);
  }
  goPage(upPageName, "", false);
};
var goSinglePage_default = goSinglePage;

// src/setting.ts
var import_obsidian3 = require("obsidian");
var goUpSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Parent property").setDesc("Setting your own parent property").addText(
      (text) => text.setPlaceholder("Enter your property").setValue(this.plugin.settings.parentProp).onChange(async (value) => {
        this.plugin.settings.parentProp = value;
        await this.plugin.saveSettings();
        this.applySettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Add parent property on file creation").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.addUpPropertyOnCreate).onChange(async (value) => {
        this.plugin.settings.addUpPropertyOnCreate = value;
        await this.plugin.saveSettings();
        this.applySettings();
      });
    });
  }
  applySettings() {
    this.plugin.loadSettings();
    this.plugin.registerCreateFileEvent();
  }
};
var setting_default = goUpSettingTab;

// src/main.ts
var DEFAULT_SETTINGS = {
  parentProp: "up",
  addUpPropertyOnCreate: true
};
var _goPage, _activeNotice, _timeout;
var goUp = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    __privateAdd(this, _goPage, this.app.workspace.openLinkText.bind(this.app.workspace));
    __privateAdd(this, _activeNotice, null);
    __privateAdd(this, _timeout, 3e3);
    this.createFileEvent = null;
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "upper-page",
      name: "Go upper page",
      callback: this.goUp.bind(this)
    });
    this.addSettingTab(new setting_default(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerCreateFileEvent();
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  insertProperties(currentFile, properties) {
    this.app.fileManager.processFrontMatter(currentFile, (frontmatter) => {
      Object.entries(properties).forEach(([property, val]) => {
        frontmatter[property] = val;
      });
    });
  }
  registerCreateFileEvent() {
    this.unregisterCreateFileEvent();
    if (this.settings.addUpPropertyOnCreate) {
      this.createFileEvent = this.app.vault.on(
        "create",
        (file) => {
          var _a;
          const properties = {};
          const parentPropValue = `[[${(_a = file.parent) == null ? void 0 : _a.name}]]` || "";
          properties[this.settings.parentProp] = [parentPropValue];
          this.insertProperties(file, properties);
        }
      );
      this.registerEvent(this.createFileEvent);
    }
  }
  unregisterCreateFileEvent() {
    if (this.createFileEvent) {
      this.app.vault.offref(this.createFileEvent);
      this.createFileEvent = null;
    }
  }
  switchActiveNotice(notice) {
    __privateSet(this, _activeNotice, notice);
  }
  alertNoUpperPage() {
    if (__privateGet(this, _activeNotice))
      return;
    __privateSet(this, _activeNotice, makeNotice_default(
      `There is no upper page in "${this.settings.parentProp}" property`,
      __privateGet(this, _timeout)
    ));
    setTimeout(() => this.switchActiveNotice(null), __privateGet(this, _timeout));
  }
  alertMustSettingParentProp() {
    if (__privateGet(this, _activeNotice))
      return;
    __privateSet(this, _activeNotice, makeNotice_default(
      "Please set your parent property in the settings",
      __privateGet(this, _timeout)
    ));
    setTimeout(() => this.switchActiveNotice(null), __privateGet(this, _timeout));
  }
  async goUp() {
    var _a;
    if (this.settings.parentProp === "" || this.settings.parentProp === null) {
      this.alertMustSettingParentProp();
      return;
    }
    const currentFile = this.app.workspace.getActiveFile();
    if (currentFile === null)
      return;
    const frontmatter = (_a = this.app.metadataCache.getFileCache(currentFile)) == null ? void 0 : _a.frontmatter;
    const upProperty = frontmatter == null ? void 0 : frontmatter[this.settings.parentProp];
    if (upProperty === void 0) {
      this.alertNoUpperPage();
      return;
    }
    if (Array.isArray(upProperty)) {
      goMultiPage_default(upProperty, __privateGet(this, _goPage), this.app);
    } else {
      goSinglePage_default(upProperty, __privateGet(this, _goPage));
    }
  }
};
_goPage = new WeakMap();
_activeNotice = new WeakMap();
_timeout = new WeakMap();
