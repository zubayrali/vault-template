/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => IconCheckboxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// iconPicker.ts
var import_obsidian = require("obsidian");
function createIconPicker(editor, theme, icons, customTrigger, lineNumber, lineText) {
  var _a;
  const pickerEl = document.createElement("div");
  pickerEl.className = "icon-picker";
  let selectedIndex = 0;
  const numColumns = 4;
  icons.forEach(({ name, icon, value }, index) => {
    const iconEl = document.createElement("div");
    iconEl.className = "icon-option";
    const iconSpan = document.createElement("span");
    iconSpan.className = "icon";
    iconSpan.textContent = icon;
    const nameSpan = document.createElement("span");
    nameSpan.textContent = name;
    iconEl.appendChild(iconSpan);
    iconEl.appendChild(nameSpan);
    iconEl.tabIndex = 0;
    iconEl.onclick = () => {
      selectIcon(value);
    };
    if (index === 0) {
      iconEl.classList.add("selected");
    }
    pickerEl.appendChild(iconEl);
  });
  function getLeadingSpaces(str) {
    const match = str.match(/^[>\s]+/);
    return match ? match[0] : "";
  }
  function checkIsRightTrigger(text, customTrigger2) {
    const regex = new RegExp(
      `^(>? ?(- ?(\\[ \\] ?)?|\\d+\\. ?))${customTrigger2}$`
    );
    return regex.test(text);
  }
  function getPrefixLength(text) {
    const prefixRegex = /^(?:- |\d+\. )(?:\[[^\]]*\] )?/;
    const match = text.match(prefixRegex);
    return match ? match[0].length : 0;
  }
  const selectIcon = (value) => {
    const leadingSpaces = getLeadingSpaces(lineText);
    const spaceLength = leadingSpaces.length;
    const lTrimedLineText = lineText.slice(spaceLength);
    const triggerLength = checkIsRightTrigger(
      lTrimedLineText,
      customTrigger
    ) ? lTrimedLineText.length : getPrefixLength(lTrimedLineText);
    editor.replaceRange(
      `${leadingSpaces}${value}`,
      { line: lineNumber, ch: 0 },
      { line: lineNumber, ch: spaceLength + triggerLength }
    );
    closePicker();
    setTimeout(() => {
      editor.setCursor(lineNumber, editor.getLine(lineNumber).length);
      editor.focus();
    }, 0);
  };
  const handleKeyDown = (event) => {
    event.preventDefault();
    event.stopPropagation();
    const options = pickerEl.getElementsByClassName("icon-option");
    if (event.key === "ArrowDown") {
      options[selectedIndex].classList.remove("selected");
      selectedIndex = (selectedIndex + numColumns) % icons.length;
      options[selectedIndex].classList.add("selected");
    } else if (event.key === "ArrowUp") {
      options[selectedIndex].classList.remove("selected");
      selectedIndex = (selectedIndex - numColumns + icons.length) % icons.length;
      options[selectedIndex].classList.add("selected");
    } else if (event.key === "ArrowRight") {
      options[selectedIndex].classList.remove("selected");
      selectedIndex = (selectedIndex + 1) % icons.length;
      options[selectedIndex].classList.add("selected");
    } else if (event.key === "ArrowLeft") {
      options[selectedIndex].classList.remove("selected");
      selectedIndex = (selectedIndex - 1 + icons.length) % icons.length;
      options[selectedIndex].classList.add("selected");
    } else if (event.key === " ") {
      selectIcon(icons[selectedIndex].value);
    } else if (event.key === "Escape") {
      event.preventDefault();
      closePicker();
    } else {
      return;
    }
  };
  (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.registerDomEvent(document, "keydown", handleKeyDown);
  const cursorCoords = editor.cm.coordsAtPos(
    editor.posToOffset(editor.getCursor())
  );
  pickerEl.style.left = `${cursorCoords.left}px`;
  pickerEl.style.top = `${cursorCoords.top + 20}px`;
  document.body.appendChild(pickerEl);
  const handleClickOutside = (event) => {
    if (!pickerEl.contains(event.target)) {
      closePicker();
    }
  };
  const closePicker = () => {
    if (pickerEl.parentNode) {
      document.body.removeChild(pickerEl);
      document.removeEventListener("click", handleClickOutside);
      document.removeEventListener("keydown", handleKeyDown);
    }
  };
  setTimeout(() => {
    document.addEventListener("click", handleClickOutside);
  }, 0);
}

// default_icons.ts
var icons_common = [
  { name: "Numbers", icon: "1", value: "1. " },
  { name: "Default", icon: "\u2022", value: "- " },
  { name: "Unchecked", icon: "\u2610", value: "- [ ] " },
  { name: "Incomplete", icon: "\u25E9", value: "- [/] " },
  { name: "Regular", icon: "\u2611\uFE0F", value: "- [x] " },
  { name: "Question", icon: "\u2753", value: "- [?] " },
  { name: "Important", icon: "\u2757\uFE0F", value: "- [!] " }
];
var icons_ect = [
  ...icons_common,
  ...[
    { name: "Dropped", icon: "\u2796", value: "- [-] " },
    { name: "Forward", icon: "\u27A4", value: "- [>] " },
    { name: "Date", icon: "\u{1F4C5}", value: "- [D] " },
    { name: "Add", icon: "\u2795", value: "- [+] " },
    { name: "Research", icon: "\u{1F50E}", value: "- [R] " },
    { name: "Idea", icon: "\u{1F4A1}", value: "- [i] " },
    { name: "Pro", icon: "\u{1F44D}", value: "- [P] " },
    { name: "Con", icon: "\u{1F44E}", value: "- [C] " },
    { name: "Quote", icon: '"', value: "- [Q] " },
    { name: "Note", icon: "\u{1F4DD}", value: "- [N] " },
    { name: "Bookmark", icon: "\u{1F516}", value: "- [b] " },
    { name: "Information", icon: "\u2139\uFE0F", value: "- [I] " },
    { name: "Paraphrase", icon: "\u23E9", value: "- [p] " },
    { name: "Location", icon: "\u{1F4CD}", value: "- [L] " },
    { name: "Example", icon: "EX", value: "- [E] " },
    { name: "Answer", icon: "\u2705", value: "- [A] " },
    { name: "Reward", icon: "\u{1F3C6}", value: "- [r] " },
    { name: "Choice", icon: "\u{1FAA7}", value: "- [c] " },
    { name: "Doing", icon: "\u{1F535}", value: "- [d] " },
    { name: "Time", icon: "\u23F1\uFE0F", value: "- [T] " },
    { name: "Person", icon: "\u{1F464}", value: "- [@] " },
    { name: "Talk", icon: "\u{1F4AC}", value: "- [t] " },
    { name: "Outline", icon: "\u{1F4DA}", value: "- [O] " },
    { name: "Conflict", icon: "\u2694\uFE0F", value: "- [~] " },
    { name: "World", icon: "\u{1FA90}", value: "- [W] " },
    { name: "Clue / Find", icon: "\u{1F575}\uFE0F\u200D\u2642\uFE0F", value: "- [f] " },
    { name: "Foreshadow", icon: "\u{1F426}\u200D\u2B1B", value: "- [F] " },
    { name: "Favorite", icon: "\u2764\uFE0F", value: "- [H] " },
    { name: "Symbolism", icon: "\u262F\uFE0E", value: "- [&] " },
    { name: "Secret", icon: "\u{1F512}", value: "- [s] " }
    // Add more icons here
  ]
];
var icons_Things = [
  ...icons_common,
  ...[
    // { name: "Next step", icon: "â†³", value: "- [n] " },
    // { name: "Next", icon: "â†’", value: "- [a] " },
    // { name: "Therefore", icon: "âˆ´", value: "- [t] " },
    // { name: "Clip", icon: "ðŸ“Ž", value: "- [r] " },
    { name: "Good", icon: "\u{1F44D}", value: "- [p] " },
    { name: "Bad", icon: "\u{1F44E}", value: "- [c] " },
    { name: "Bookmark", icon: "\u{1F516}", value: "- [b] " },
    { name: "Star", icon: "\u2B50\uFE0F", value: "- [*] " },
    { name: "Fire", icon: "\u{1F525}", value: "- [f] " },
    { name: "Up", icon: "\u{1F4C8}", value: "- [u] " },
    { name: "Down", icon: "\u{1F4C9}", value: "- [d] " },
    { name: "Forwarded", icon: "\u23ED", value: "- [>] " },
    { name: "Scheduling", icon: "\u{1F4C5}", value: "- [<] " },
    { name: "Information", icon: "\u2139\uFE0F", value: "- [i] " },
    { name: "Location", icon: "\u{1F4CD}", value: "- [l] " },
    { name: "Quote", icon: '"', value: '- ["] ' },
    { name: "Dollar", icon: "\u{1F4B2}", value: "- [S] " },
    { name: "Idea", icon: "\u{1F4A1}", value: "- [I] " },
    { name: "Key", icon: "\u{1F511}", value: "- [k] " },
    { name: "Win", icon: "\u{1F382}", value: "- [w] " }
    // Add more icons here
  ]
];
var icons_Minimal = [
  ...icons_common,
  ...[
    { name: "Canceled", icon: "\u2796", value: "- [-] " },
    { name: "Forwarded", icon: "\u27A4", value: "- [>] " },
    { name: "Scheduling", icon: "\u{1F4C5}", value: "- [<] " },
    { name: "star", icon: "\u2B50\uFE0F", value: "- [*] " },
    { name: "quote", icon: '"', value: '- ["] ' },
    { name: "location", icon: "\u{1F4CD}", value: "- [l] " },
    { name: "bookmark", icon: "\u{1F516}", value: "- [b] " },
    { name: "information", icon: "\u2139\uFE0F", value: "- [i] " },
    { name: "savings", icon: "\u{1F4B2}", value: "- [S] " },
    { name: "idea", icon: "\u{1F4A1}", value: "- [I] " },
    { name: "pros", icon: "\u{1F44D}", value: "- [p] " },
    { name: "cons", icon: "\u{1F44E}", value: "- [c] " },
    { name: "fire", icon: "\u{1F525}", value: "- [f] " },
    { name: "key", icon: "\u{1F511}", value: "- [k] " },
    { name: "win", icon: "\u{1F382}", value: "- [w] " },
    { name: "up", icon: "\u{1F4C8}", value: "- [u] " },
    { name: "down", icon: "\u{1F4C9}", value: "- [d] " }
  ]
];
var icons_niceBorder = [
  ...icons_common,
  ...[
    { name: "Cancelled", icon: "\u2796", value: "- [-]" },
    { name: "Forward", icon: "\u27A4", value: "- [>] " },
    { name: "Date", icon: "\u{1F4C5}", value: "- [<] " },
    { name: "Add", icon: "\u2795", value: "- [+] " },
    { name: "Idea", icon: "\u{1F4A1}", value: "- [I] " },
    { name: "Pro", icon: "\u{1F44D}", value: "- [p] " },
    { name: "Con", icon: "\u{1F44E}", value: "- [c] " },
    { name: "Note", icon: "\u{1F4DD}", value: "- [n] " },
    { name: "Bookmark", icon: "\u{1F516}", value: "- [b] " },
    { name: "Information", icon: "\u2139\uFE0F", value: "- [i] " },
    { name: "Location", icon: "\u{1F4CD}", value: "- [l] " },
    { name: "Amount", icon: "\u{1F4B0}", value: "- [S] " },
    { name: "Star", icon: "\u2B50", value: "- [*] " },
    { name: "Up", icon: "\u{1F4C8}", value: "- [u] " },
    { name: "Down", icon: "\u{1F4C9}", value: "- [d] " }
  ]
];
var icons_setting = {
  Else: icons_ect,
  Things: icons_Things,
  Minimal: icons_Minimal,
  NiceBorder: icons_niceBorder
};

// main.ts
var DEFAULT_SETTINGS = {
  theme: "Else",
  icons: icons_setting["Else"],
  customTrigger: ":"
  // Default trigger
};
var IconCheckboxPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.handleEditorChange = () => {
      this.openIconPicker();
    };
  }
  async onload() {
    console.log("Loading IconCheckboxPlugin");
    await this.loadSettings();
    this.addSettingTab(new IconCheckboxSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("editor-change", this.handleEditorChange)
    );
    this.addCommand({
      id: "open-icon-picker",
      name: "Open icon picker",
      callback: async () => {
        this.openIconPicker(true);
      },
      hotkeys: [
        {
          modifiers: ["Mod"],
          key: ";"
        }
      ]
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  checkIsRightTrigger(text) {
    var _a;
    const customTrigger = (_a = this.settings.customTrigger) != null ? _a : ":";
    const regex = new RegExp(
      `^(>? ?(- ?(\\[ \\] ?)?|\\d+\\. ?))${customTrigger}$`
    );
    return regex.test(text);
  }
  openIconPicker(forceOpen = false) {
    var _a;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView)) == null ? void 0 : _a.editor;
    if (!editor)
      return;
    const cursor = editor.getCursor();
    const line = cursor == null ? void 0 : cursor.line;
    if (line === void 0)
      return;
    const lineText = editor.getLine(line);
    const trimedLineText = lineText.trimStart();
    if (forceOpen || this.checkIsRightTrigger(trimedLineText)) {
      createIconPicker(
        editor,
        this.settings.theme,
        this.settings.icons,
        this.settings.customTrigger,
        line,
        lineText
      );
    }
  }
  onunload() {
    console.log("Unloading IconCheckboxPlugin");
  }
};
var IconCheckboxSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Custom Modal Trigger").setDesc("Set custom word to trigger the icon picker").addText(
      (text) => text.setPlaceholder("Enter a custom trigger").setValue(this.plugin.settings.customTrigger).onChange(async (value) => {
        this.plugin.settings.customTrigger = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Select Theme").setDesc(
      "Choose the available icons and order according to your theme!"
    ).addDropdown(
      (dropdown) => dropdown.addOption("Else", "Else").addOption("Minimal", "Minimal").addOption("Things", "Things").setValue(this.plugin.settings.theme).onChange(async (value) => {
        const userConfirmed = confirm(
          "If you change themes, the icon order in your current theme will be reset to default. Are you sure you want to change it?"
        );
        if (userConfirmed) {
          this.plugin.settings.theme = value;
          this.plugin.settings.icons = icons_setting[value];
          await this.plugin.saveSettings();
          renderIcons();
        } else {
          dropdown.setValue(this.plugin.settings.theme);
        }
      })
    );
    const iconGrid = containerEl.createDiv({ cls: "setting-icon-grid" });
    let draggedItem = null;
    const renderIcons = () => {
      iconGrid.empty();
      this.plugin.settings.icons.forEach(({ name, icon }, index) => {
        const iconEl = document.createElement("div");
        iconEl.className = "setting-icon-option";
        iconEl.setAttribute("draggable", "true");
        iconEl.setAttribute("data-index", index.toString());
        const iconSpan = document.createElement("span");
        iconSpan.className = "icon";
        iconSpan.textContent = icon;
        const nameSpan = document.createElement("span");
        nameSpan.textContent = name;
        iconEl.appendChild(iconSpan);
        iconEl.appendChild(nameSpan);
        iconEl.tabIndex = 0;
        iconEl.addEventListener("dragstart", handleDragStart);
        iconEl.addEventListener("dragover", handleDragOver);
        iconEl.addEventListener("drop", handleDrop);
        iconEl.addEventListener("dragleave", handleDragLeave);
        iconGrid.appendChild(iconEl);
      });
    };
    const handleDragStart = (e) => {
      draggedItem = e.target;
      if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = "move";
        e.dataTransfer.setData(
          "text/plain",
          e.target.dataset.index
        );
      }
    };
    const handleDragOver = (e) => {
      if (e.preventDefault) {
        e.preventDefault();
      }
      e.target.classList.add("hovered");
      return false;
    };
    const handleDrop = (e) => {
      if (e.stopPropagation) {
        e.stopPropagation();
      }
      if (draggedItem && draggedItem !== e.target) {
        const draggedIndex = parseInt(
          draggedItem.getAttribute("data-index")
        );
        const targetIndex = parseInt(
          e.target.closest(".setting-icon-option").getAttribute("data-index")
        );
        const newOrder = Array.from(this.plugin.settings.icons);
        [newOrder[draggedIndex], newOrder[targetIndex]] = [
          newOrder[targetIndex],
          newOrder[draggedIndex]
        ];
        this.plugin.settings.icons = newOrder;
        this.plugin.saveSettings();
        renderIcons();
      }
      e.target.classList.remove("hovered");
      return false;
    };
    const handleDragLeave = (e) => {
      e.target.classList.remove("hovered");
    };
    renderIcons();
  }
};
