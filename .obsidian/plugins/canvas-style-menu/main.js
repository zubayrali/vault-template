/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  csIconList: () => csIconList,
  default: () => CanvasStyleMenuPlugin2,
  defaultSettings: () => defaultSettings,
  savedSettings: () => savedSettings
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/CanvasStyle.ts
var import_obsidian = require("obsidian");

// src/utils.ts
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var handleMultiNodes = (canvas, allNodes, subMenuConfig, menuItemType, cssClass, onRightClick) => {
  const nodes = allNodes ? Array.from(canvas.nodes.values()) : Array.from(canvas.selection);
  const canvasData = canvas.getData();
  if (nodes && nodes.length > 0) {
    for (const node of nodes) {
      const nodeData = canvasData.nodes.find((t) => t.id === node.id);
      if (subMenuConfig === null) {
        property = menuItemType;
      } else
        property = generateClassToPropertyMap(subMenuConfig, cssClass);
      if (property && nodeData) {
        if (onRightClick) {
          delete nodeData[property];
        } else
          nodeData[property] = cssClass;
      }
    }
    canvas.setData(canvasData);
  }
  canvas.requestSave(true, true);
  canvas.requestFrame();
};
var handleMultiNodesViaNodes = (canvas, nodes, subMenuConfig, menuItemType, cssClass, onRightClick) => {
  const canvasData = canvas.getData();
  if (nodes && nodes.length > 0) {
    for (const node of nodes) {
      const nodeData = canvasData.nodes.find((t) => t.id === node.id);
      if (subMenuConfig === null) {
        property = menuItemType;
      } else
        property = generateClassToPropertyMap(subMenuConfig, cssClass);
      if (property && nodeData) {
        if (onRightClick) {
          delete nodeData[property];
        } else
          nodeData[property] = cssClass;
      }
    }
    canvas.setData(canvasData);
  }
  canvas.requestSave(true, true);
};
var handleSingleNode = (node, subMenuConfig, menuItemType, cssClass, onRightClick) => {
  const canvasData = node.canvas.getData();
  const nodeData = canvasData.nodes.find((t) => t.id === node.id);
  const edgeData = canvasData.edges.find((t) => t.id === node.id);
  if (subMenuConfig === null) {
    property = menuItemType;
  } else
    property = generateClassToPropertyMap(subMenuConfig, cssClass);
  if (property && nodeData) {
    if (onRightClick) {
      delete nodeData[property];
    } else
      nodeData[property] = cssClass;
  }
  if (property && edgeData) {
    if (onRightClick) {
      delete edgeData[property];
    } else
      edgeData[property] = cssClass;
  }
  node.canvas.setData(canvasData);
  node.canvas.requestSave(true, true);
};
var createHandleContextMenu = (section, menuConfig, subMenuConfig, toggleMenu, callback) => {
  return (menu) => {
    menuConfig.forEach((menuItem) => {
      if (toggleMenu.includes(menuItem.type) && menuItem.cat !== "edge" && menuItem.ctxmenu === true && menuItem.enable === true) {
        menu.addItem((item) => {
          item.setIcon(menuItem.icon).setTitle(menuItem.name).onClick(async () => {
            await callback(menuItem.class);
          });
        });
      }
      if (!toggleMenu.includes(menuItem.type) && menuItem.cat !== "edge" && menuItem.ctxmenu === true && menuItem.enable === true) {
        menu.addItem((item) => {
          const subMenu = item.setSection(section).setTitle(menuItem.name).setIcon(menuItem.icon).setSubmenu();
          handleMenu(subMenu, subMenuConfig, callback, menuItem.type);
        });
      }
    });
  };
};
var handleMenu = (subMenu, subMenuConfig, callback, type) => {
  const filteredMenuItems = subMenuConfig.filter((item) => item.type === type) || [];
  filteredMenuItems.forEach((menuItem) => {
    if (menuItem.enable === true) {
      subMenu.addItem((item) => {
        item.setIcon(menuItem.icon).setTitle(menuItem.name).onClick(async () => {
          await callback(menuItem.class);
        });
      });
    }
  });
};
var handleSelectionContextMenu = (plugin, menu, canvas, menuConfig, subMenuConfig, toggleMenu, menuItemType) => {
  const callback = async (cssClass) => {
    handleMultiNodes(canvas, false, subMenuConfig, menuItemType, cssClass, false);
  };
  createHandleContextMenu("action", menuConfig, subMenuConfig, toggleMenu, callback)(menu);
};
var handleNodeContextMenu = (plugin, menu, node, menuConfig, subMenuConfig, toggleMenu, menuItemType) => {
  const callback = async (cssClass) => {
    handleSingleNode(node, subMenuConfig, menuItemType, cssClass, false);
  };
  createHandleContextMenu("canvas", menuConfig, subMenuConfig, toggleMenu, callback)(menu);
};
var refreshAllCanvasView = (app) => {
  const cavasLeaves = app.workspace.getLeavesOfType("canvas");
  if (!cavasLeaves || cavasLeaves.length === 0)
    return;
  for (const leaf of cavasLeaves) {
    leaf.rebuildView();
  }
};
function parseOldSettingsItems(items) {
  if (items) {
    const formattedStrings = items.map((str) => str.replace(/'/g, '"').replace(/([\w-]+):/g, '"$1":').replace(/'/g, '"'));
    const jsonObjectArray = formattedStrings.map((str) => JSON.parse(str));
    return jsonObjectArray;
  }
}
function generateClassToPropertyMap(subMenuConfig, cssClass) {
  const classToPropertyMap = {};
  subMenuConfig.forEach((subMenuItem) => {
    if (subMenuItem.type && !classToPropertyMap[subMenuItem.class]) {
      classToPropertyMap[subMenuItem.class] = subMenuItem.type;
    }
  });
  return classToPropertyMap[cssClass];
}
var getToggleMenuItemsClass = (types, items) => {
  return types.map((type) => {
    const toggleMenuItem = items.find((item) => item.type === type);
    return toggleMenuItem ? toggleMenuItem.class : null;
  });
};
var getItemProperty = (cssClass, items, property2) => {
  const menuItem = items.find((item) => item.class === cssClass);
  return menuItem ? menuItem[property2] : null;
};
async function modifyClassOnElements(addOrRemove, contentEl, className, propertyValue) {
  await new Promise((resolve) => setTimeout(resolve, 1));
  const elements = contentEl.getElementsByClassName(className);
  for (let i = 0; i < elements.length; i++) {
    const element = elements[i];
    if (addOrRemove === "add") {
      element.classList.add(propertyValue);
    }
    if (addOrRemove === "remove") {
      element.classList.remove(propertyValue);
    }
  }
}
function sortByProperty(array, property2) {
  const grouped = {};
  for (const item of array) {
    const key = item[property2];
    if (!grouped[key]) {
      grouped[key] = [];
    }
    grouped[key].push(item);
  }
  const result = Object.values(grouped).reduce((acc, current) => acc.concat(current), []);
  return result;
}
function groupItemsByProperty(items, property2) {
  const groupedItems = {};
  items.forEach((item) => {
    const propValue = item[property2];
    if (!groupedItems[propValue]) {
      groupedItems[propValue] = [];
    }
    groupedItems[propValue].push(item);
  });
  return groupedItems;
}
function transformSubMenuItems(subMenuItems) {
  const transformedSubMenuItems = [];
  for (const type in subMenuItems) {
    if (subMenuItems.hasOwnProperty(type)) {
      const items = subMenuItems[type];
      transformedSubMenuItems.push(...items.map((item) => ({ ...item, type })));
    }
  }
  return transformedSubMenuItems;
}
function renameKey(obj, oldKey, newKey) {
  if (obj.hasOwnProperty(oldKey)) {
    obj[newKey] = obj[oldKey];
    delete obj[oldKey];
  }
}
function getFilesInDirectory(directoryPath) {
  const filesAndFolders = import_fs.default.readdirSync(directoryPath);
  const files = filesAndFolders.filter((fileOrFolder) => {
    const fullPath = import_path.default.join(directoryPath, fileOrFolder);
    return import_fs.default.statSync(fullPath).isFile();
  });
  return files;
}
function createElbowPath(from, to, x1, y1, x2, y2) {
  if (from === "left" && to === "right") {
    if (x1 > x2) {
      const control1X = x1 - (x1 - x2) / 2;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (x1 < x2) {
      const control1X = x1 - 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y1 + (y2 - y1) / 2;
      const control3X = x2 + 50;
      const control3Y = control2Y;
      const control4X = control3X;
      const control4Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${control3Y} H${control4X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "right" && to === "left") {
    if (x1 < x2) {
      const control1X = x1 + (x2 - x1) / 2;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (x1 > x2) {
      const control1X = x1 + 30;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y1 - (y1 - y2) / 2;
      const control3X = x2 - 30;
      const control3Y = control2Y;
      const control4X = control3X;
      const control4Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${control3Y} H${control4X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "right" && to === "right") {
    if (x1 >= x2) {
      const control1X = x1 + 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (x1 < x2) {
      const control1X = x2 + 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "left" && to === "left") {
    if (x1 >= x2) {
      const control1X = x2 - 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (x1 < x2) {
      const control1X = x1 - 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "top" && to === "bottom") {
    if (y1 > y2) {
      const control1X = x1;
      const control1Y = y1 - (y1 - y2) / 2;
      const control2X = x2;
      const control2Y = control1Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (y1 < y2) {
      const control1X = x1;
      const control1Y = y1 - 50;
      const control2X = x1 + (x2 - x1) / 2;
      const control2Y = control1Y;
      const control3X = control2X;
      const control3Y = y2 + 50;
      const control4X = x2;
      const control4Y = control3Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${control3Y} H${control4X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "bottom" && to === "top") {
    if (y1 < y2) {
      const control1X = x1;
      const control1Y = y1 + (y2 - y1) / 2;
      const control2X = x2;
      const control2Y = control1Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (y1 > y2) {
      const control1X = x1;
      const control1Y = y1 + 50;
      const control2X = x1 - (x1 - x2) / 2;
      const control2Y = control1Y;
      const control3X = control2X;
      const control3Y = y2 - 50;
      const control4X = x2;
      const control4Y = control3Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${control3Y} H${control4X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "top" && to === "top") {
    if (y1 >= y2) {
      const control1X = x1;
      const control1Y = y2 - 50;
      const control2X = x2;
      const control2Y = control1Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (y1 < y2) {
      const control1X = x1;
      const control1Y = y1 - 50;
      const control2X = x2;
      const control2Y = control1Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "bottom" && to === "bottom") {
    if (y1 >= y2) {
      const control1X = x1;
      const control1Y = y1 + 50;
      const control2X = x2;
      const control2Y = control1Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
    if (y1 < y2) {
      const control1X = x1;
      const control1Y = y2 + 50;
      const control2X = x2;
      const control2Y = control1Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "left" && to === "top") {
    if (x1 > x2 && y1 < y2) {
      const controlX = x2;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 > x2 && y1 > y2 || x1 < x2) {
      const control1X = x1 - 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2 - 50;
      const control3X = x2;
      const control3Y = control2Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "top" && to === "left") {
    if (x1 < x2 && y1 > y2) {
      const controlX = x1;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 < x2 && y1 < y2 || x1 > x2) {
      const control1X = x1;
      const control1Y = y1 - 50;
      const control2X = x2 - 50;
      const control2Y = control1Y;
      const control3X = control2X;
      const control3Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "right" && to === "top") {
    if (x1 < x2 && y1 < y2) {
      const controlX = x2;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 < x2 && y1 > y2 || x1 > x2) {
      const control1X = x1 + 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2 - 50;
      const control3X = x2;
      const control3Y = control2Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "top" && to === "right") {
    if (x1 > x2 && y1 > y2) {
      const controlX = x1;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 > x2 && y1 < y2 || x1 < x2) {
      const control1X = x1;
      const control1Y = y1 - 50;
      const control2X = x2 + 50;
      const control2Y = control1Y;
      const control3X = control2X;
      const control3Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "left" && to === "bottom") {
    if (x1 > x2 && y1 > y2) {
      const controlX = x2;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 > x2 && y1 < y2 || x1 < x2) {
      const control1X = x1 - 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2 + 50;
      const control3X = x2;
      const control3Y = control2Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "bottom" && to === "left") {
    if (x1 < x2 && y1 < y2) {
      const controlX = x1;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 < x2 && y1 > y2 || x1 > x2) {
      const control1X = x1;
      const control1Y = y1 + 50;
      const control2X = x2 - 50;
      const control2Y = control1Y;
      const control3X = control2X;
      const control3Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "right" && to === "bottom") {
    if (x1 < x2 && y1 > y2) {
      const controlX = x2;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 < x2 && y1 < y2 || x1 > x2) {
      const control1X = x1 + 50;
      const control1Y = y1;
      const control2X = control1X;
      const control2Y = y2 + 50;
      const control3X = x2;
      const control3Y = control2Y;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
  if (from === "bottom" && to === "right") {
    if (x1 > x2 && y1 < y2) {
      const controlX = x1;
      const controlY = y2;
      const pathData = `M${x1},${y1} H${controlX} V${controlY} H${x2}`;
      return pathData;
    }
    if (x1 > x2 && y1 > y2 || x1 < x2) {
      const control1X = x1;
      const control1Y = y1 + 50;
      const control2X = x2 + 50;
      const control2Y = control1Y;
      const control3X = control2X;
      const control3Y = y2;
      const pathData = `M${x1},${y1} H${control1X} V${control1Y} H${control2X} V${control2Y} H${control3X} V${y2} H${x2}`;
      return pathData;
    }
  }
}

// src/CanvasStyle.ts
var CanvasStyle = class extends import_obsidian.Component {
  constructor(node, menuConfig) {
    super();
    this.node = node;
    this.types = menuConfig.map((menuItem) => menuItem.type);
    this.types.forEach((type) => {
      this[type] = this.node.unknownData[type] || "";
    });
  }
  onload() {
    this.updateNode();
  }
  onunload() {
    super.onunload();
  }
  setStyle(cat, selector, type, cssClass) {
    if (this.node.canvas.readonly)
      return;
    if (this[type] === cssClass)
      return;
    if (this[type] !== "" || this[type] !== void 0) {
      this.oldType = this[type];
    }
    if (cssClass !== false || cssClass !== void 0) {
      this[type] = cssClass;
      this.node.unknownData[type] = cssClass;
    }
    this.updateNode(cat, selector, type);
  }
  async updateNode(cat, selector, type) {
    if (this.oldType) {
      if (cat === "edge") {
        this.node.lineGroupEl.removeClass(this.oldType);
        this.node.lineEndGroupEl.removeClass(this.oldType);
        this.node.render();
      } else {
        try {
          this.node.nodeEl.removeClass(this.oldType);
          modifyClassOnElements("remove", this.node.contentEl, "markdown-preview-view", this.oldType);
        } finally {
        }
      }
    }
    if (this[type]) {
      if (cat === "edge") {
        this.node.lineGroupEl.addClass(this[type]);
        this.node.lineEndGroupEl.addClass(this[type]);
        this.node.render();
      } else {
        if (selector === "cc") {
          await modifyClassOnElements("add", this.node.contentEl, "markdown-preview-view", this[type]);
        } else
          this.node.nodeEl.addClass(this[type]);
      }
    }
  }
};

// src/memuConfigs.ts
var defaultConfigs = {
  "default": {
    name: "Default",
    menuItems: [
      {
        class: "cs-border",
        type: "border",
        icon: "cs-style-border",
        name: "Border",
        cat: "",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-bg",
        type: "bg",
        icon: "cs-background",
        name: "Background",
        cat: "",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-rotate",
        type: "rotate",
        icon: "rotate-cw",
        name: "Rotate",
        cat: "",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-shape",
        type: "shape",
        icon: "diamond",
        name: "Shape",
        cat: "",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-highlight",
        type: "highlight",
        icon: "star",
        name: "Highlight",
        cat: "",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-extra",
        type: "extra",
        icon: "more-horizontal",
        name: "Extra",
        cat: "",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-line-type",
        type: "lineType",
        icon: "cs-border-corner-pill",
        name: "Line type",
        cat: "edge",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-line-style",
        type: "lineStyle",
        icon: "cs-line-style",
        name: "Line style",
        cat: "edge",
        selector: "",
        ctxmenu: false,
        enable: true
      },
      {
        class: "cs-line-thickness",
        type: "lineThickness",
        icon: "equal",
        name: "Line thickness",
        cat: "edge",
        selector: "",
        ctxmenu: false,
        enable: true
      }
    ],
    subMenuItems: {
      border: [
        {
          class: "cs-border-none",
          type: "border",
          icon: "cs-no-border",
          name: "No border",
          selector: "",
          enable: true
        },
        {
          class: "cs-border-dashed",
          type: "border",
          icon: "box-select",
          name: "Dashed",
          selector: "",
          enable: true
        }
      ],
      bg: [
        {
          class: "cs-bg-transparent",
          type: "bg",
          icon: "cs-transparent",
          name: "Transparent",
          selector: "",
          enable: true
        },
        {
          class: "cs-bg-opacity-0",
          type: "bg",
          icon: "cs-opacity",
          name: "Opacity 0",
          selector: "",
          enable: true
        }
      ],
      rotate: [
        {
          class: "cs-rotate-right-45",
          type: "rotate",
          icon: "redo",
          name: "Right 45",
          selector: "",
          enable: true
        },
        {
          class: "cs-rotate-right-90",
          type: "rotate",
          icon: "redo",
          name: "Right 90",
          selector: "",
          enable: true
        },
        {
          class: "cs-rotate-left-45",
          type: "rotate",
          icon: "undo",
          name: "Left 45",
          selector: "",
          enable: true
        },
        {
          class: "cs-rotate-left-90",
          type: "rotate",
          icon: "undo",
          name: "Left 90",
          selector: "",
          enable: true
        }
      ],
      shape: [
        {
          class: "cs-shape-circle",
          type: "shape",
          icon: "circle",
          name: "Circle",
          selector: "",
          enable: true
        },
        {
          class: "cs-shape-parallelogram-right",
          type: "shape",
          icon: "cs-parallelogram-right",
          name: "Parallelogram right",
          selector: "",
          enable: true
        },
        {
          class: "cs-shape-parallelogram-left",
          type: "shape",
          icon: "cs-parallelogram-left",
          name: "Parallelogram left",
          selector: "",
          enable: true
        }
      ],
      highlight: [],
      extra: [],
      lineType: [
        {
          class: "cs-line-straight",
          type: "lineType",
          icon: "minus",
          name: "Straight",
          selector: "",
          enable: true
        },
        {
          class: "cs-line-elbow",
          type: "lineType",
          icon: "cs-elbow",
          name: "Elbow",
          selector: "",
          enable: true
        }
      ],
      lineStyle: [
        {
          class: "cs-line-dashed",
          type: "lineStyle",
          icon: "cs-line-dashed",
          name: "Dashed",
          selector: "",
          enable: true
        },
        {
          class: "cs-line-dashed-round",
          type: "lineStyle",
          icon: "cs-line-dashed",
          name: "Dashed round",
          selector: "",
          enable: true
        },
        {
          class: "cs-line-dotted",
          type: "lineStyle",
          icon: "cs-line-dotted",
          name: "Dotted",
          selector: "",
          enable: true
        },
        {
          class: "cs-line-dotted-line",
          type: "lineStyle",
          icon: "cs-dotted-line",
          name: "Dotted line",
          selector: "",
          enable: true
        }
      ],
      lineThickness: [
        {
          class: "cs-line-thick",
          type: "lineThickness",
          icon: "cs-thicker",
          name: "Thicker",
          selector: "",
          enable: true
        },
        {
          class: "cs-line-thicker",
          type: "lineThickness",
          icon: "cs-thicker++",
          name: "Thicker++",
          selector: "",
          enable: true
        }
      ]
    },
    customIcons: []
  }
};
var csIcons = [
  {
    name: "cs-no-border",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mouse-pointer-square-dashed"><path d="M5 3a2 2 0 0 0-2 2"/><path d="M19 3a2 2 0 0 1 2 2"/><path d="m12 12 4 10 1.7-4.3L22 16Z"/><path d="M5 21a2 2 0 0 1-2-2"/><path d="M9 3h1"/><path d="M9 21h2"/><path d="M14 3h1"/><path d="M3 9v1"/><path d="M21 9v2"/><path d="M3 14v1"/></svg>`
  },
  {
    name: "cs-thicker",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-tally-2"><path d="M4 4v16"/><path d="M9 4v16"/></svg>`
  },
  {
    name: "cs-thicker++",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-tally-3"><path d="M4 4v16"/><path d="M9 4v16"/><path d="M14 4v16"/></svg>`
  },
  {
    name: "cs-circle-dashed",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-dashed"><path d="M10.1 2.18a9.93 9.93 0 0 1 3.8 0"/><path d="M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7"/><path d="M21.82 10.1a9.93 9.93 0 0 1 0 3.8"/><path d="M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69"/><path d="M13.9 21.82a9.94 9.94 0 0 1-3.8 0"/><path d="M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7"/><path d="M2.18 13.9a9.93 9.93 0 0 1 0-3.8"/><path d="M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69"/></svg>`
  },
  {
    name: "cs-background",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-background" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 8l4 -4" /><path d="M14 4l-10 10" /><path d="M4 20l16 -16" /><path d="M20 10l-10 10" /><path d="M20 16l-4 4" /></svg>`
  },
  {
    name: "cs-transparent",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-droplet-half-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7.502 19.423c2.602 2.105 6.395 2.105 8.996 0c2.602 -2.105 3.262 -5.708 1.566 -8.546l-4.89 -7.26c-.42 -.625 -1.287 -.803 -1.936 -.397a1.376 1.376 0 0 0 -.41 .397l-4.893 7.26c-1.695 2.838 -1.035 6.441 1.567 8.546z" /><path d="M5 14h14" /></svg>`
  },
  {
    name: "cs-opacity",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-droplet" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7.502 19.423c2.602 2.105 6.395 2.105 8.996 0c2.602 -2.105 3.262 -5.708 1.566 -8.546l-4.89 -7.26c-.42 -.625 -1.287 -.803 -1.936 -.397a1.376 1.376 0 0 0 -.41 .397l-4.893 7.26c-1.695 2.838 -1.035 6.441 1.567 8.546z" /></svg>`
  },
  {
    name: "cs-border-corner-pill",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-border-corner-pill" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 20v-5c0 -6.075 4.925 -11 11 -11h5" /></svg>`
  },
  {
    name: "cs-line-style",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-border-style-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 18v.01" /><path d="M8 18v.01" /><path d="M12 18v.01" /><path d="M16 18v.01" /><path d="M20 18v.01" /><path d="M18 12h2" /><path d="M11 12h2" /><path d="M4 12h2" /><path d="M4 6h16" /></svg>`
  },
  {
    name: "cs-line-dashed",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-line-dashed" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12h2" /><path d="M17 12h2" /><path d="M11 12h2" /></svg>`
  },
  {
    name: "cs-line-dotted",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-line-dotted" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 12v.01" /><path d="M8 12v.01" /><path d="M12 12v.01" /><path d="M16 12v.01" /><path d="M20 12v.01" /></svg>`
  },
  {
    name: "cs-dotted-line",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-separator" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 12l0 .01" /><path d="M7 12l10 0" /><path d="M21 12l0 .01" /></svg>`
  },
  {
    name: "cs-input-check",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-input-check" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M20 13v-4a2 2 0 0 0 -2 -2h-12a2 2 0 0 0 -2 2v5a2 2 0 0 0 2 2h6" /><path d="M15 19l2 2l4 -4" /></svg>`
  },
  {
    name: "cs-style-border",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 2H8C4.68629 2 2 4.68629 2 8V16C2 19.3137 4.68629 22 8 22H16C19.3137 22 22 19.3137 22 16V8C22 4.68629 19.3137 2 16 2Z" stroke-width="1.5" stroke-dasharray="2 2"></path><path d="M16 5H8C6.34315 5 5 6.34315 5 8V16C5 17.6569 6.34315 19 8 19H16C17.6569 19 19 17.6569 19 16V8C19 6.34315 17.6569 5 16 5Z"></path></svg>`
  },
  {
    name: "cs-parallelogram-right",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4.887 20h11.868c.893 0 1.664 -.665 1.847 -1.592l2.358 -12c.212 -1.081 -.442 -2.14 -1.462 -2.366a1.784 1.784 0 0 0 -.385 -.042h-11.868c-.893 0 -1.664 .665 -1.847 1.592l-2.358 12c-.212 1.081 .442 2.14 1.462 2.366c.127 .028 .256 .042 .385 .042z" /></svg>`
  },
  {
    name: "cs-parallelogram-left",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M 19.113,20 H 7.245 C 6.352,20 5.581,19.335 5.398,18.408 L 3.04,6.408 C 2.828,5.327 3.482,4.268 4.502,4.042 A 1.784,1.784 0 0 1 4.887,4 h 11.868 c 0.893,0 1.664,0.665 1.847,1.592 l 2.358,12 c 0.212,1.081 -0.442,2.14 -1.462,2.366 C 19.371,19.986 19.242,20 19.113,20 Z" /></svg>`
  },
  {
    name: "cs-elbow",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 17l6 -6l4 4l8 -8" /></svg>`
  },
  {
    name: "cs-badge-cc",
    svgContent: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 15V9C1 5.68629 3.68629 3 7 3H17C20.3137 3 23 5.68629 23 9V15C23 18.3137 20.3137 21 17 21H7C3.68629 21 1 18.3137 1 15Z"></path><path d="M10.5 10L10.3284 9.82843C9.79799 9.29799 9.07857 9 8.32843 9V9C6.76633 9 5.5 10.2663 5.5 11.8284V12.1716C5.5 13.7337 6.76633 15 8.32843 15V15C9.07857 15 9.79799 14.702 10.3284 14.1716L10.5 14"></path><path d="M18.5 10L18.3284 9.82843C17.798 9.29799 17.0786 9 16.3284 9V9C14.7663 9 13.5 10.2663 13.5 11.8284V12.1716C13.5 13.7337 14.7663 15 16.3284 15V15C17.0786 15 17.798 14.702 18.3284 14.1716L18.5 14"></path></svg>`
  }
];

// src/setting.ts
var import_fs2 = __toESM(require("fs"));
var import_path2 = __toESM(require("path"));
var import_obsidian2 = require("obsidian");
var CanvasStyleMenuSetting = class extends import_obsidian2.Setting {
};
var CanvasStyleMenuSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.devMode = false;
    this.menuItemTypeChanged = { oldType: "", newType: "" };
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const configs = this.plugin.settings.configs;
    const currentConfig = this.plugin.settings.currentConfig;
    const config = configs[currentConfig];
    const defaultConfigs2 = JSON.parse(JSON.stringify(defaultSettings));
    const savedConfigs = JSON.parse(JSON.stringify(savedSettings));
    const vaultDir = this.app.vault.adapter.basePath;
    const pluginDir = this.plugin.manifest.dir;
    const packagesFolder = import_path2.default.join(vaultDir, pluginDir, "packages");
    this.settingsHeaderContainerEl = containerEl.createDiv({
      cls: "settings-header-container"
    });
    new import_obsidian2.Setting(this.settingsHeaderContainerEl).setName("Style Package").setDesc("Manage installed style package and browse community style packages.").addText((text) => text.setPlaceholder("New Package Name")).addExtraButton((component) => component.setIcon("save").setTooltip("Save as new package").onClick(async () => {
      this.removePreviousIcons(currentConfig, savedConfigs);
      const packageName = this.settingsHeaderContainerEl.querySelector("input").value;
      if (packageName) {
        await this.saveAsNewPackage(config, packageName);
        new import_obsidian2.Notice("Package successfully saved");
      }
    })).addExtraButton((component) => component.setIcon("rotate-ccw").setTooltip("Restore the current package defaults").onClick(async () => {
      this.removePreviousIcons(currentConfig, savedConfigs);
      if (currentConfig in savedConfigs) {
        configs[currentConfig] = savedConfigs[currentConfig];
      } else {
        configs[currentConfig] = defaultConfigs2[currentConfig];
      }
      await this.plugin.saveSettings();
      this.plugin.registerCustomIcons();
      this.plugin.patchCanvasMenu(true);
      this.display();
    })).addDropdown((dropdown) => {
      Object.keys(configs).forEach((config2) => {
        const group = configs[config2];
        dropdown.addOption(config2, group.name);
      });
      dropdown.setValue(currentConfig);
      dropdown.onChange(async (value) => {
        this.removePreviousIcons(currentConfig, savedConfigs);
        this.plugin.settings.currentConfig = value;
        await this.plugin.saveSettings();
        this.plugin.registerCustomIcons();
        this.plugin.patchCanvasMenu(true);
        this.display();
      });
    }).addExtraButton((component) => component.setIcon("folder-open").setTooltip("Open packages folder").onClick(() => {
      const { exec } = require("child_process");
      import_fs2.default.mkdir(packagesFolder, (err) => {
        if (err) {
          if (err.code === "EEXIST") {
            exec(`start explorer ${packagesFolder}`);
          } else {
            console.error("Failed to create style packages folder:", err);
          }
        } else {
          exec(`start explorer ${packagesFolder}`);
        }
      });
    })).addExtraButton((component) => component.setIcon("refresh-cw").setTooltip("Reload packages").onClick(() => {
      import_fs2.default.mkdir(packagesFolder, (err) => {
        if (err) {
          if (err.code === "EEXIST") {
          } else {
            console.error(`Failed to create style packages folder: ${err}`);
          }
        } else {
        }
      });
      const packageFiles = getFilesInDirectory(packagesFolder);
      if (packageFiles) {
        packageFiles.forEach((packageFile) => {
          const packageFilePath = import_path2.default.join(packagesFolder, packageFile);
          let importedPackage = {};
          import_fs2.default.readFile(packageFilePath, "utf-8", async (err, contentAsync) => {
            if (err) {
              console.error(err);
              return;
            }
            importedPackage = JSON.parse(contentAsync);
            const importedConfig = Object.keys(importedPackage)[0];
            if (!(importedConfig in this.plugin.settings.configs)) {
              this.plugin.settings.configs = { ...this.plugin.settings.configs, ...importedPackage };
              this.plugin.settings.savedConfigs = JSON.parse(JSON.stringify({ ...this.plugin.settings.savedConfigs, ...importedPackage }));
              await this.plugin.saveSettings();
              this.plugin.savedSettings();
              this.display();
            }
          });
        });
        new import_obsidian2.Notice("Reloaded style packages");
      }
    })).addExtraButton((component) => component.setIcon("upload").setTooltip("Export package").onClick(() => {
      import_fs2.default.mkdir(packagesFolder, (err) => {
        if (err) {
          if (err.code === "EEXIST") {
          } else {
            console.error(`Failed to create style packages folder: ${err}`);
          }
        } else {
        }
      });
      const exportedPackage = { [currentConfig]: config };
      const jsonString = JSON.stringify(exportedPackage, null, 2);
      const packageFile = `${currentConfig}.json`;
      const packageFilePath = import_path2.default.join(packagesFolder, packageFile);
      import_fs2.default.writeFile(packageFilePath, jsonString, (err) => {
        if (err) {
          new import_obsidian2.Notice(`Error writing JSON file: ${err}`);
        } else {
          new import_obsidian2.Notice("Package successfully exported");
        }
      });
    })).addExtraButton((component) => component.setIcon("trash").setTooltip("Delete package").onClick(async () => {
      this.removePreviousIcons(currentConfig, savedConfigs);
      if (currentConfig in savedConfigs) {
        delete this.plugin.settings.savedConfigs[currentConfig];
        delete configs[currentConfig];
        this.plugin.settings.currentConfig = "default";
        await this.plugin.saveSettings();
        this.plugin.registerCustomIcons();
        this.plugin.patchCanvasMenu(true);
        this.display();
      }
    }).then((cb) => {
      if (currentConfig in savedConfigs) {
        cb.extraSettingsEl.addClass("mod-warning");
      } else {
        cb.extraSettingsEl.addClass("disabled");
      }
    }));
    this.configTabContainerEl = containerEl.createDiv({
      cls: "config-tab-container"
    });
    new import_obsidian2.Setting(this.configTabContainerEl).addExtraButton((component) => component.setIcon("settings-2").onClick(() => {
      if (this.customIconsTabContainerEl.classList.contains("actived")) {
        this.customIconsTabContainerEl.removeClass("actived");
      }
      this.menuItemsTabContainerEl.addClass("actived");
      if (this.configTabContainerEl.querySelector(".custom-icons-tab.actived")) {
        this.configTabContainerEl.querySelector(".custom-icons-tab.actived").removeClass("actived");
      }
      component.extraSettingsEl.addClass("actived");
    }).then((cb) => {
      cb.extraSettingsEl.addClass("menu-items-tab");
      cb.extraSettingsEl.addClass("actived");
      cb.extraSettingsEl.setAttr("data-label", "Menu Items");
    })).addExtraButton((component) => component.setIcon("shapes").onClick(() => {
      if (this.menuItemsTabContainerEl.classList.contains("actived")) {
        this.menuItemsTabContainerEl.removeClass("actived");
      }
      this.customIconsTabContainerEl.addClass("actived");
      if (this.configTabContainerEl.querySelector(".menu-items-tab.actived")) {
        this.configTabContainerEl.querySelector(".menu-items-tab.actived").removeClass("actived");
      }
      component.extraSettingsEl.addClass("actived");
    }).then((cb) => {
      cb.extraSettingsEl.addClass("custom-icons-tab");
      cb.extraSettingsEl.setAttr("data-label", "Custom Icons");
    }));
    this.menuItemsTabContainerEl = containerEl.createDiv({
      cls: "setting-tab-container menu-items-tab-container actived"
    });
    new import_obsidian2.Setting(this.menuItemsTabContainerEl).setName("Menu Items").setDesc("Set menu items config.").addExtraButton((component) => component.setIcon("chevrons-up-down").setTooltip("Expand all").onClick(() => {
      config.menuItems.forEach((menuItem) => {
        if (!menuItem.expanded) {
          menuItem.expanded = true;
        }
      });
      this.display();
    })).addExtraButton((component) => component.setIcon("chevrons-down-up").setTooltip("Collapse All").onClick(() => {
      config.menuItems.forEach((menuItem) => {
        if (menuItem.expanded) {
          menuItem.expanded = false;
        }
      });
      this.display();
    })).addButton((component) => component.setButtonText("Add Menu Item").setClass("mod-cta").onClick(() => {
      newMenuItemSettingContainerEl.addClass("add-setting");
    }));
    this.menuItemsContainerEl = this.menuItemsTabContainerEl.createDiv({
      cls: "setting-item-container menu-items-container"
    });
    for (let menuItem of config.menuItems) {
      this.renderMenuItemsSetting(config, menuItem, config.menuItems);
    }
    const newMenuItemSettingContainerEl = this.menuItemsContainerEl.createDiv({
      cls: "setting-item-container new-menu-item-setting-container"
    });
    this.buildNewMenuItemSetting(newMenuItemSettingContainerEl, async (menuItem) => {
      config.menuItems.push(menuItem);
      config.menuItems = sortByProperty(config.menuItems, "cat");
      if (!Object.keys(config.subMenuItems).contains(menuItem.type)) {
        config.subMenuItems[menuItem.type] = [];
      }
      await this.plugin.saveSettings();
      this.plugin.patchCanvasMenu(true);
      this.display();
    });
    this.customIconsTabContainerEl = containerEl.createDiv({
      cls: "setting-tab-container custom-icons-tab-container"
    });
    new import_obsidian2.Setting(this.customIconsTabContainerEl).setName("Custom Icons").setDesc("Add custom icons.").addButton((component) => component.setButtonText("Add Custom Icon").setClass("mod-cta").onClick(() => {
      newCustomIconSettingContainerEl.addClass("add-setting");
    }));
    this.customIconsContainerEl = this.customIconsTabContainerEl.createDiv({
      cls: "setting-item-container custom-icons-container"
    });
    config.customIcons.forEach((icon) => {
      this.renderCustomIconsSetting(config, icon);
    });
    const newCustomIconSettingContainerEl = this.customIconsContainerEl.createDiv({
      cls: "setting-item-container new-custom-icon-setting-container"
    });
    this.buildNewIconSetting(newCustomIconSettingContainerEl, async (icon) => {
      config.customIcons.push(icon);
      await this.plugin.saveSettings();
      this.plugin.registerCustomIcons();
      this.display();
      this.menuItemsTabContainerEl.removeClass("actived");
      this.customIconsTabContainerEl.addClass("actived");
      this.configTabContainerEl.querySelector(".menu-items-tab.actived").removeClass("actived");
      this.configTabContainerEl.querySelector(".custom-icons-tab").addClass("actived");
    });
  }
  renderMenuItemsSetting(config, menuItem, settings) {
    const cls = menuItem.class;
    const type = menuItem.type;
    const icon = menuItem.icon;
    const name = menuItem.name;
    const cat = menuItem.cat;
    const selector = menuItem.selector;
    const index = config.menuItems.indexOf(menuItem);
    if (this.devMode) {
      if (type === this.menuItemTypeChanged.newType) {
        renameKey(config.subMenuItems, this.menuItemTypeChanged.oldType, this.menuItemTypeChanged.newType);
        this.plugin.saveSettings();
      }
    }
    const subMenuItems = config.subMenuItems[type];
    const setting = new CanvasStyleMenuSetting(this.menuItemsContainerEl).addExtraButton((component) => component.setIcon("chevron-right").onClick(async () => {
      config.menuItems[index].expanded = !config.menuItems[index].expanded;
      await this.plugin.saveSettings();
      if (config.menuItems[index].expanded) {
        component.setIcon("chevron-down");
        component.extraSettingsEl.removeClass("setting-expanded-false");
        component.extraSettingsEl.addClass("setting-expanded-true");
      } else {
        component.setIcon("chevron-right");
        component.extraSettingsEl.removeClass("setting-expanded-true");
        component.extraSettingsEl.addClass("setting-expanded-false");
      }
    }).then((cb) => {
      if (subMenuItems.length === 0)
        cb.extraSettingsEl.addClass("nosub");
      cb.extraSettingsEl.addClass("setting-expanded-true");
      if (!config.menuItems[index].expanded) {
        cb.extraSettingsEl.removeClass("setting-expanded-true");
        cb.extraSettingsEl.addClass("setting-expanded-false");
        cb.setIcon("chevron-right");
      } else
        cb.setIcon("chevron-down");
    })).addExtraButton((component) => component.setIcon(icon).onClick(() => {
      new SelectIconModal(this.app, this.plugin, component, "menuItem", config, index).open();
    })).addText((text) => text.setPlaceholder("CSS Class").setValue(cls).onChange(async (value) => {
      config.menuItems[index].class = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setPlaceholder("Type").setValue(type).onChange(async (value) => {
      config.menuItems[index].type = value;
      if (this.devMode) {
        config.subMenuItems[type].forEach((subMenuItem) => {
          subMenuItem.type = value;
        });
        await this.plugin.saveSettings();
        this.menuItemTypeChanged = { oldType: type, newType: value };
        this.plugin.patchCanvasMenu(true);
      } else {
        await this.plugin.saveSettings();
      }
    }).setDisabled(true).inputEl.addClass("disabled")).addText((text) => text.setPlaceholder("Name").setValue(name).onChange(async (value) => {
      config.menuItems[index].name = value;
      await this.plugin.saveSettings();
    })).addExtraButton((component) => {
      component.setIcon("git-commit-horizontal").setTooltip("For connection line").onClick(async () => {
        if (this.devMode) {
          const ctxmenu = setting.components.find((obj) => {
            var _a;
            return (_a = obj.extraSettingsEl) == null ? void 0 : _a.classList.contains("setting-ctxmenu-check");
          });
          if (!config.menuItems[index].cat) {
            config.menuItems[index].cat = "edge";
            component.extraSettingsEl.removeClass("setting-edge-check");
            component.extraSettingsEl.addClass("setting-edge-checked");
            ctxmenu.extraSettingsEl.addClass("disabled");
          } else {
            config.menuItems[index].cat = "";
            component.extraSettingsEl.removeClass("setting-edge-checked");
            component.extraSettingsEl.addClass("setting-edge-check");
            ctxmenu.extraSettingsEl.removeClass("disabled");
          }
          await this.plugin.saveSettings();
        }
      }).then((cb) => {
        cb.extraSettingsEl.addClass("setting-edge-check");
        if (config.menuItems[index].cat) {
          cb.extraSettingsEl.removeClass("setting-edge-check");
          cb.extraSettingsEl.addClass("setting-edge-checked");
        }
        if (config.menuItems[index].ctxmenu) {
          cb.extraSettingsEl.addClass("disabled");
        }
        cb.extraSettingsEl.addClass("disabled");
      });
    }).addExtraButton((component) => {
      component.setIcon("cs-badge-cc").setTooltip("Use cssclasses styling").onClick(async () => {
        if (this.devMode) {
          if (!config.menuItems[index].selector) {
            config.menuItems[index].selector = "cc";
            component.extraSettingsEl.removeClass("setting-cc-check");
            component.extraSettingsEl.addClass("setting-cc-checked");
          } else {
            config.menuItems[index].selector = "";
            component.extraSettingsEl.removeClass("setting-cc-checked");
            component.extraSettingsEl.addClass("setting-cc-check");
          }
          await this.plugin.saveSettings();
        }
      }).then((cb) => {
        cb.extraSettingsEl.addClass("setting-cc-check");
        if (config.menuItems[index].selector) {
          cb.extraSettingsEl.removeClass("setting-cc-check");
          cb.extraSettingsEl.addClass("setting-cc-checked");
        }
        cb.extraSettingsEl.addClass("disabled");
      });
    }).addExtraButton((component) => {
      component.setIcon("cs-input-check").setTooltip("Show in context menu").onClick(async () => {
        config.menuItems[index].ctxmenu = !config.menuItems[index].ctxmenu;
        if (config.menuItems[index].ctxmenu) {
          component.extraSettingsEl.removeClass("setting-ctxmenu-check");
          component.extraSettingsEl.addClass("setting-ctxmenu-checked");
        } else {
          component.extraSettingsEl.removeClass("setting-ctxmenu-checked");
          component.extraSettingsEl.addClass("setting-ctxmenu-check");
        }
        await this.plugin.saveSettings();
      }).then((cb) => {
        if (subMenuItems.length === 0)
          cb.extraSettingsEl.addClass("nosub");
        cb.extraSettingsEl.addClass("setting-ctxmenu-check");
        if (config.menuItems[index].ctxmenu) {
          cb.extraSettingsEl.removeClass("setting-ctxmenu-check");
          cb.extraSettingsEl.addClass("setting-ctxmenu-checked");
        }
        if (config.menuItems[index].cat === "edge") {
          cb.extraSettingsEl.addClass("disabled");
        }
      });
    }).addExtraButton((component) => component.setIcon("plus-circle").setTooltip("Add sub menu item").onClick(() => {
      if (!config.menuItems[index].expanded) {
        config.menuItems[index].expanded = true;
        setting.components[0].extraSettingsEl.removeClass("setting-expanded-false");
        setting.components[0].extraSettingsEl.addClass("setting-expanded-true");
        setting.components[0].setIcon("chevron-down");
        newSubMenuItemSettingContainerEl.addClass("add-setting");
      }
      newSubMenuItemSettingContainerEl.addClass("add-setting");
    })).addExtraButton((component) => component.setIcon("arrow-up").onClick(() => {
      this.moveSetting(setting, false);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("setting-item-controller");
    })).addExtraButton((component) => component.setIcon("arrow-down").onClick(() => {
      this.moveSetting(setting, true);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("setting-item-controller");
    })).addExtraButton((component) => component.setIcon("x").onClick(async () => {
      config.menuItems.splice(index, 1);
      delete config.subMenuItems[type];
      await this.plugin.saveSettings();
      this.plugin.patchCanvasMenu(true);
      this.display();
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-warning");
    })).addToggle((toggle) => {
      toggle.setValue(config.menuItems[index].enable).onChange(async (value) => {
        config.menuItems[index].enable = value;
        await this.plugin.saveSettings();
      });
    }).then((mn) => {
      mn.settings = settings;
      mn.settingEl.addClass("menu-item-setting");
    });
    this.subMenuItemsContainerEl = setting.settingEl.createDiv({
      cls: `setting-item-container submenu-items-container ${type}-items-container`
    });
    for (let subMenuItem of subMenuItems) {
      this.renderSubMenuItemsSetting(config, subMenuItem, subMenuItems);
    }
    const newSubMenuItemSettingContainerEl = this.subMenuItemsContainerEl.createDiv({
      cls: "setting-item-container new-submenu-item-setting-container"
    });
    this.buildNewSubMenuItemSetting(newSubMenuItemSettingContainerEl, type, async (subMenuItem) => {
      subMenuItems.push(subMenuItem);
      await this.plugin.saveSettings();
      this.plugin.patchCanvasMenu(true);
      this.display();
    });
    return setting;
  }
  renderSubMenuItemsSetting(config, subMenuItem, settings) {
    const cls = subMenuItem.class;
    const type = subMenuItem.type;
    const icon = subMenuItem.icon;
    const name = subMenuItem.name;
    const selector = subMenuItem.selector;
    const index = settings.indexOf(subMenuItem);
    const subMenuItems = config.subMenuItems[type];
    const setting = new CanvasStyleMenuSetting(this.subMenuItemsContainerEl).addExtraButton((component) => component.setIcon("grip-vertical")).addExtraButton((component) => component.setIcon(icon).onClick(() => {
      new SelectIconModal(this.app, this.plugin, component, "subMenuItem", subMenuItems, index).open();
    })).addText((text) => text.setPlaceholder("CSS Class").setValue(cls).onChange(async (value) => {
      subMenuItems[index].class = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setValue(type).setDisabled(true).inputEl.addClass("hidden")).addText((text) => text.setPlaceholder("Name").setValue(name).onChange(async (value) => {
      subMenuItems[index].name = value;
      await this.plugin.saveSettings();
    })).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.setIcon("cs-badge-cc").setTooltip("Use cssclasses styling").onClick(async () => {
        if (this.devMode) {
          if (!subMenuItems[index].selector) {
            subMenuItems[index].selector = "cc";
            component.extraSettingsEl.removeClass("setting-cc-check");
            component.extraSettingsEl.addClass("setting-cc-checked");
          } else {
            subMenuItems[index].selector = "";
            component.extraSettingsEl.removeClass("setting-cc-checked");
            component.extraSettingsEl.addClass("setting-cc-check");
          }
          await this.plugin.saveSettings();
        }
      }).then((cb) => {
        cb.extraSettingsEl.addClass("setting-cc-check");
        if (subMenuItems[index].selector) {
          cb.extraSettingsEl.removeClass("setting-cc-check");
          cb.extraSettingsEl.addClass("setting-cc-checked");
        }
        cb.extraSettingsEl.addClass("disabled");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => component.setIcon("arrow-up").onClick(() => {
      this.moveSetting(setting, false);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("setting-item-controller");
    })).addExtraButton((component) => component.setIcon("arrow-down").onClick(() => {
      this.moveSetting(setting, true);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("setting-item-controller");
    })).addExtraButton((component) => component.setIcon("x").onClick(async () => {
      subMenuItems.splice(index, 1);
      await this.plugin.saveSettings();
      this.plugin.patchCanvasMenu(true);
      this.display();
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-warning");
    })).addToggle((toggle) => {
      toggle.setValue(subMenuItems[index].enable).onChange(async (value) => {
        subMenuItems[index].enable = value;
        await this.plugin.saveSettings();
      });
    }).then((mn) => {
      mn.settings = settings;
      mn.settingEl.addClass("submenu-item-setting");
    });
    return setting;
  }
  renderCustomIconsSetting(config, icon) {
    const name = icon.name;
    const svgContent = icon.svgContent.replace(/^`|`$/g, "");
    const index = config.customIcons.indexOf(icon);
    const setting = new CanvasStyleMenuSetting(this.customIconsContainerEl).addExtraButton((component) => component.setIcon(name)).addText((text) => text.setPlaceholder("Icon Name").setValue(name).onChange(async (value) => {
      config.customIcons[index].name = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setPlaceholder("SVG Content").setValue(svgContent).onChange(async (value) => {
      config.customIcons[index].svgContent = `${value}`;
      await this.plugin.saveSettings();
      this.plugin.registerCustomIcons();
      this.display();
    })).addExtraButton((component) => component.setIcon("x").onClick(async () => {
      config.customIcons.splice(index, 1);
      await this.plugin.saveSettings();
      (0, import_obsidian2.removeIcon)(name);
      this.display();
      this.menuItemsTabContainerEl.removeClass("actived");
      this.customIconsTabContainerEl.addClass("actived");
      this.configTabContainerEl.querySelector(".menu-items-tab.actived").removeClass("actived");
      this.configTabContainerEl.querySelector(".custom-icons-tab").addClass("actived");
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-warning");
    }));
    return setting;
  }
  buildNewMenuItemSetting(containerEl, onSubmit) {
    const menuItem = {
      class: "",
      type: "",
      icon: "",
      name: "",
      cat: "",
      selector: "",
      ctxmenu: false,
      enable: true
    };
    const setting = new import_obsidian2.Setting(containerEl).addExtraButton((component) => component.setIcon("plus").onClick(() => {
      onSubmit(menuItem);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-cta");
    })).addExtraButton((component) => component.setIcon("cs-circle-dashed").onClick(() => {
      const callback = (iconName) => {
        menuItem.icon = iconName;
      };
      new SelectIconModal(this.app, this.plugin, component, "addNew", null, null, callback).open();
    }).then((cb) => {
      cb.extraSettingsEl.addClass("icon-selector");
    })).addText((text) => text.setPlaceholder("CSS Class").setValue("").onChange((value) => {
      menuItem.class = value;
    })).addText((text) => text.setPlaceholder("Type").setValue("").onChange((value) => {
      menuItem.type = value;
    })).addText((text) => text.setPlaceholder("Name").setValue("").onChange((value) => {
      menuItem.name = value;
    })).addExtraButton((component) => {
      component.setIcon("git-commit-horizontal").setTooltip("For connection line").onClick(() => {
        const cc = setting.components.find((obj) => {
          var _a;
          return (_a = obj.extraSettingsEl) == null ? void 0 : _a.classList.contains("setting-cc-check");
        });
        if (!menuItem.cat && cc) {
          menuItem.cat = "edge";
          component.extraSettingsEl.removeClass("setting-edge-check");
          component.extraSettingsEl.addClass("setting-edge-checked");
          cc.extraSettingsEl.addClass("disabled");
        } else {
          menuItem.cat = "";
          component.extraSettingsEl.removeClass("setting-edge-checked");
          component.extraSettingsEl.addClass("setting-edge-check");
          if (cc)
            cc.extraSettingsEl.removeClass("disabled");
        }
      }).then((cb) => {
        cb.extraSettingsEl.addClass("setting-edge-check");
        if (menuItem.cat) {
          cb.extraSettingsEl.removeClass("setting-edge-check");
          cb.extraSettingsEl.addClass("setting-edge-checked");
        }
      });
    }).addExtraButton((component) => {
      component.setIcon("cs-badge-cc").setTooltip("Use cssclasses styling").onClick(() => {
        const edge = setting.components.find((obj) => {
          var _a;
          return (_a = obj.extraSettingsEl) == null ? void 0 : _a.classList.contains("setting-edge-check");
        });
        if (!menuItem.selector && edge) {
          menuItem.selector = "cc";
          component.extraSettingsEl.removeClass("setting-cc-check");
          component.extraSettingsEl.addClass("setting-cc-checked");
          edge.extraSettingsEl.addClass("disabled");
        } else {
          menuItem.selector = "";
          component.extraSettingsEl.removeClass("setting-cc-checked");
          component.extraSettingsEl.addClass("setting-cc-check");
          if (edge)
            edge.extraSettingsEl.removeClass("disabled");
        }
      }).then((cb) => {
        cb.extraSettingsEl.addClass("setting-cc-check");
        if (menuItem.selector) {
          cb.extraSettingsEl.removeClass("setting-cc-check");
          cb.extraSettingsEl.addClass("setting-cc-checked");
        }
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => component.setIcon("x").onClick(() => {
      setting.settingEl.parentElement.removeClass("add-setting");
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-warning");
    })).addToggle((toggle) => toggle.toggleEl.addClass("hidden"));
    return setting;
  }
  buildNewSubMenuItemSetting(containerEl, type, onSubmit) {
    const subMenuItem = {
      class: "",
      type,
      icon: "",
      name: "",
      selector: "",
      enable: true
    };
    const setting = new import_obsidian2.Setting(containerEl).addExtraButton((component) => component.setIcon("plus").onClick(() => {
      onSubmit(subMenuItem);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-cta");
    })).addExtraButton((component) => component.setIcon("cs-circle-dashed").onClick(() => {
      const callback = (iconName) => {
        subMenuItem.icon = iconName;
      };
      new SelectIconModal(this.app, this.plugin, component, "addNew", null, null, callback).open();
    }).then((cb) => {
      cb.extraSettingsEl.addClass("icon-selector");
    })).addText((text) => text.setPlaceholder("CSS Class").setValue("").onChange((value) => {
      subMenuItem.class = value;
    })).addText((text) => text.setValue(type).setDisabled(true).inputEl.addClass("hidden")).addText((text) => text.setPlaceholder("Name").setValue("").onChange((value) => {
      subMenuItem.name = value;
    })).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.setIcon("cs-badge-cc").setTooltip("Use cssclasses styling").onClick(() => {
        if (!subMenuItem.selector) {
          subMenuItem.selector = "cc";
          component.extraSettingsEl.addClass("setting-cc-checked");
        } else {
          subMenuItem.selector = "";
          component.extraSettingsEl.removeClass("setting-cc-checked");
        }
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => {
      component.then((cb) => {
        cb.extraSettingsEl.addClass("hidden");
      });
    }).addExtraButton((component) => component.setIcon("x").onClick(() => {
      setting.settingEl.parentElement.removeClass("add-setting");
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-warning");
    })).addToggle((toggle) => toggle.toggleEl.addClass("hidden"));
    return setting;
  }
  buildNewIconSetting(containerEl, onSubmit) {
    const icon = {
      name: "",
      svgContent: ``
    };
    const setting = new import_obsidian2.Setting(containerEl).addExtraButton((component) => component.setIcon("plus").onClick(() => {
      onSubmit(icon);
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-cta");
    })).addText((text) => text.setPlaceholder("Icon Name").setValue("").onChange((value) => {
      icon.name = value;
    })).addText((text) => text.setPlaceholder("SVG Content").setValue(``).onChange((value) => {
      icon.svgContent = `${value}`;
    })).addExtraButton((component) => component.setIcon("x").onClick(() => {
      setting.settingEl.parentElement.removeClass("add-setting");
    }).then((cb) => {
      cb.extraSettingsEl.addClass("mod-warning");
    }));
    return setting;
  }
  async saveAsNewPackage(config, packageName) {
    this.plugin.settings.configs[packageName] = {
      name: packageName,
      menuItems: [],
      subMenuItems: {},
      customIcons: []
    };
    this.plugin.settings.savedConfigs[packageName] = {
      name: packageName,
      menuItems: [],
      subMenuItems: {},
      customIcons: []
    };
    this.plugin.settings.configs[packageName].menuItems = config.menuItems;
    this.plugin.settings.configs[packageName].subMenuItems = config.subMenuItems;
    this.plugin.settings.configs[packageName].customIcons = config.customIcons;
    this.plugin.settings.savedConfigs[packageName].menuItems = JSON.parse(JSON.stringify(config.menuItems));
    this.plugin.settings.savedConfigs[packageName].subMenuItems = JSON.parse(JSON.stringify(config.subMenuItems));
    this.plugin.settings.savedConfigs[packageName].customIcons = JSON.parse(JSON.stringify(config.customIcons));
    this.plugin.settings.currentConfig = packageName;
    await this.plugin.saveSettings();
    this.plugin.savedSettings();
    this.plugin.registerCustomIcons();
    this.plugin.patchCanvasMenu(true);
    this.display();
  }
  async moveSetting(setting, isMoveDown) {
    const settings = setting.settings;
    if (settings instanceof Array) {
      const settingEl = setting.settingEl;
      const parentEl = settingEl.parentElement;
      if (parentEl == null)
        return;
      const index = Array.from(parentEl.children).indexOf(settingEl);
      if (isMoveDown) {
        if (index == settings.length - 1)
          return;
        parentEl.insertAfter(settingEl, settingEl.nextElementSibling);
        settings.splice(index + 1, 0, settings.splice(index, 1)[0]);
      } else {
        if (index <= 0)
          return;
        parentEl.insertBefore(settingEl, settingEl.previousElementSibling);
        settings.splice(index - 1, 0, settings.splice(index, 1)[0]);
      }
      await this.plugin.saveSettings();
      this.plugin.patchCanvasMenu();
      this.display();
    }
  }
  removePreviousIcons(currentConfig, savedConfigs) {
    const previousConfig = currentConfig.slice();
    let previousIcons = [];
    if (currentConfig in savedConfigs) {
      previousIcons = this.plugin.settings.savedConfigs[previousConfig].customIcons.map((icon) => icon.name);
    } else {
      previousIcons = this.plugin.settings.configs[previousConfig].customIcons.map((icon) => icon.name);
    }
    previousIcons.forEach((icon) => {
      (0, import_obsidian2.removeIcon)(icon);
    });
  }
};
var SelectIconModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, component, container, config, index, callback) {
    super(app, plugin);
    this.plugin = plugin;
    this.component = component;
    this.container = container;
    this.config = config;
    this.index = index;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    const iconList = contentEl.createDiv("icon-list-container", (el) => {
      el.createDiv({
        cls: "clickable-icon cs-icons actived",
        attr: {
          "data-label": "csIcons"
        }
      }, (item) => {
        (0, import_obsidian2.setIcon)(item, "shapes");
        item.onClickEvent(() => {
          if (el.querySelector(".builtin-icons.actived")) {
            el.querySelector(".builtin-icons.actived").removeClass("actived");
          }
          ;
          item.addClass("actived");
          if (this.contentEl.querySelector(".builtin-icons-container.actived")) {
            this.contentEl.querySelector(".builtin-icons-container.actived").removeClass("actived");
          }
          ;
          this.contentEl.querySelector(".cs-icons-container").addClass("actived");
        });
        item.createEl("div", { text: "Custom Icons", cls: "icon-list-name" });
      });
      el.createDiv({
        cls: "clickable-icon builtin-icons",
        attr: {
          "data-label": "built-in Icons"
        }
      }, (item) => {
        (0, import_obsidian2.setIcon)(item, "blocks");
        item.onClickEvent(() => {
          if (el.querySelector(".cs-icons.actived")) {
            el.querySelector(".cs-icons.actived").removeClass("actived");
          }
          ;
          item.addClass("actived");
          if (this.contentEl.querySelector(".cs-icons-container.actived")) {
            this.contentEl.querySelector(".cs-icons-container.actived").removeClass("actived");
          }
          ;
          this.contentEl.querySelector(".builtin-icons-container").addClass("actived");
        });
        item.createEl("div", { text: "Built-in Icons", cls: "icon-list-name" });
      });
    });
    const csIcons2 = this.createIconContainer("cs-icons-container actived", csIconList);
    const builtInIcons = this.createIconContainer("builtin-icons-container", (0, import_obsidian2.getIconIds)().filter((item) => !csIconList.includes(item)));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  createIconContainer(containerId, iconList) {
    const container = this.contentEl.createDiv(containerId, (el) => {
      iconList.forEach((icon) => {
        el.createDiv({
          cls: "clickable-icon",
          attr: {
            "data-icon": icon
          }
        }, (item) => {
          (0, import_obsidian2.setIcon)(item, icon);
          (0, import_obsidian2.setTooltip)(item, icon);
          item.onClickEvent(async () => {
            if (this.container === "menuItem") {
              this.config.menuItems[this.index].icon = icon;
              await this.plugin.saveSettings();
            }
            if (this.container === "subMenuItem") {
              this.config[this.index].icon = icon;
              await this.plugin.saveSettings();
            }
            if (this.container === "addNew") {
              await this.callback(icon);
            }
            this.component.setIcon(icon);
            this.close();
          });
        });
      });
    });
    return container;
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  currentConfig: "default",
  configs: defaultConfigs,
  savedConfigs: {}
};
var defaultSettings = JSON.parse(JSON.stringify(defaultConfigs));
var savedSettings = {};
var csIconList = [];
var CanvasStyleMenuPlugin2 = class extends import_obsidian3.Plugin {
  async checkOldSettings() {
    if (this.settings.menuItems || this.settings.subMenuItems || this.settings.customIcons) {
      this.settings.configs.custom1 = {
        name: "custom1",
        menuItems: [],
        subMenuItems: {},
        customIcons: []
      };
      this.settings.savedConfigs.custom1 = {
        name: "custom1",
        menuItems: [],
        subMenuItems: {},
        customIcons: []
      };
      const menuItemsNew = parseOldSettingsItems(this.settings.menuItems);
      if (menuItemsNew) {
        menuItemsNew.forEach((item) => {
          item.name = item.title;
          item.cat = item.cat ? item.cat : "";
          item.selector = item.selector ? item.selector : "";
          item.enable = true;
          delete item.title;
        });
        this.settings.configs.custom1.menuItems = sortByProperty(menuItemsNew, "cat");
        this.settings.savedConfigs.custom1.menuItems = JSON.parse(JSON.stringify(this.settings.configs.custom1.menuItems));
        delete this.settings.menuItems;
      }
      const subMenuItemsNew = parseOldSettingsItems(this.settings.subMenuItems);
      if (subMenuItemsNew) {
        subMenuItemsNew.forEach((item) => {
          item.name = item.title;
          item.selector = item.selector ? item.selector : "";
          item.enable = true;
          delete item.title;
        });
        this.settings.configs.custom1.subMenuItems = groupItemsByProperty(subMenuItemsNew, "type");
        this.settings.savedConfigs.custom1.subMenuItems = JSON.parse(JSON.stringify(this.settings.configs.custom1.subMenuItems));
        delete this.settings.subMenuItems;
      }
      const typeValues = this.settings.configs.custom1.menuItems.map((item) => item.type);
      typeValues.forEach((type) => {
        if (!this.settings.configs.custom1.subMenuItems[type]) {
          this.settings.configs.custom1.subMenuItems[type] = [];
          this.settings.savedConfigs.custom1.subMenuItems[type] = [];
        }
      });
      if (this.settings.customIcons) {
        this.settings.customIcons.forEach((icon) => {
          icon.name = icon.iconName;
          delete icon.iconName;
        });
        this.settings.configs.custom1.customIcons = this.settings.customIcons;
        this.settings.savedConfigs.custom1.customIcons = JSON.parse(JSON.stringify(this.settings.configs.custom1.customIcons));
        delete this.settings.customIcons;
      }
      await this.saveSettings();
    }
  }
  savedSettings() {
    savedSettings = JSON.parse(JSON.stringify(this.settings.savedConfigs));
  }
  async onload() {
    await this.loadSettings();
    await this.checkOldSettings();
    this.savedSettings();
    this.registerCanvasEvents();
    this.registerCustomIcons(csIcons);
    this.patchCanvasMenu();
    this.patchCanvasNode();
    this.addSettingTab(new CanvasStyleMenuSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("unloading plugin");
    refreshAllCanvasView(this.app);
  }
  registerCanvasEvents() {
    const menuConfig = this.settings.configs[this.settings.currentConfig].menuItems;
    const subMenuConfig = transformSubMenuItems(this.settings.configs[this.settings.currentConfig].subMenuItems);
    const menuTypes = menuConfig.map((item) => item.type);
    const subMenuTypes = subMenuConfig.map((item) => item.type);
    const toggleMenu = menuTypes.filter((type) => !subMenuTypes.includes(type));
    this.registerEvent(this.app.workspace.on("canvas-style-menu:patched-canvas", () => {
      refreshAllCanvasView(this.app);
    }));
    this.registerEvent(this.app.workspace.on("canvas-style-menu:patch-canvas-node", () => {
      this.patchCanvasNode();
      refreshAllCanvasView(this.app);
    }));
    this.registerEvent(this.app.workspace.on("canvas:selection-menu", (menu, canvas) => {
      handleSelectionContextMenu(this, menu, canvas, menuConfig, subMenuConfig, toggleMenu);
    }));
    this.registerEvent(this.app.workspace.on("canvas:node-menu", (menu, node) => {
      handleNodeContextMenu(this, menu, node, menuConfig, subMenuConfig, toggleMenu);
    }));
  }
  registerCustomIcons(csIcons2) {
    let customIcons = [];
    if (csIcons2) {
      customIcons = csIcons2.concat(this.settings.configs[this.settings.currentConfig].customIcons);
    } else {
      customIcons = this.settings.configs[this.settings.currentConfig].customIcons;
    }
    const jsonIcons = JSON.stringify(customIcons);
    const parsedIcons = JSON.parse(jsonIcons);
    parsedIcons.forEach((icon) => {
      const name = icon.name;
      const svgContent = icon.svgContent.replace(/( width| height)="(\d+)"/g, '$1="100%"');
      (0, import_obsidian3.addIcon)(name, svgContent);
      csIconList.push(name);
    });
  }
  patchCanvasMenu(refreshed) {
    if (refreshed) {
      this.nodePatched = false;
      this.groupPatched = false;
      this.edgePatched = false;
    }
    let nodePatched = this.nodePatched;
    let groupPatched = this.groupPatched;
    let edgePatched = this.edgePatched;
    const patchMenu = () => {
      var _a;
      const canvasView = (_a = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _a.view;
      if (!canvasView)
        return false;
      const menu = canvasView == null ? void 0 : canvasView.canvas.menu;
      if (!menu)
        return false;
      const selection = menu.selection;
      if (!selection)
        return false;
      const menuConfig = this.settings.configs[this.settings.currentConfig].menuItems;
      const subMenuConfig = transformSubMenuItems(this.settings.configs[this.settings.currentConfig].subMenuItems);
      const menuTypes = menuConfig.map((item) => item.type);
      const subMenuTypes = subMenuConfig.map((item) => item.type);
      const toggleMenu = menuTypes.filter((type) => !subMenuTypes.includes(type));
      const menuUninstaller = around(menu.constructor.prototype, {
        render: (next) => function(...args) {
          var _a2;
          const result = next.call(this, ...args);
          const currentSelection = this.canvas.selection;
          if (!nodePatched) {
            if (this.canvas.nodes.size > 0) {
              this.canvas.app.workspace.trigger("canvas-style-menu:patch-canvas-node");
              nodePatched = true;
            }
          }
          const nodes = this.canvas.nodes.values();
          if (!groupPatched) {
            for (const node of nodes) {
              if ((node == null ? void 0 : node.unknownData.type) === "group") {
                this.canvas.app.workspace.trigger("canvas-style-menu:patch-canvas-node");
                groupPatched = true;
                break;
              }
            }
          }
          const edge = this.canvas.edges.values().next().value;
          if (!edgePatched) {
            if (this.canvas.edges.size > 0 && ((_a2 = edge == null ? void 0 : edge.unknownData) == null ? void 0 : _a2.id)) {
              this.canvas.app.workspace.trigger("canvas-style-menu:patch-canvas-node");
              edgePatched = true;
            }
          }
          const menuClasses = menuConfig.map((item) => item.class);
          const oldMenuItems = this.menuEl.querySelectorAll(".clickable-icon[class$=-menu-item]");
          oldMenuItems.forEach((item) => {
            const itemClass = item.className.match(/^(.+?)(?=-menu-item)/)[1];
            if (!menuClasses.includes(itemClass)) {
              item.remove();
            }
          });
          const createMenuButton = (category, cssClass, tooltip, icon) => {
            const currentSelectionArray = Array.from(currentSelection);
            const allFalse = currentSelectionArray.every((value) => {
              return !value.nodeEl;
            });
            if (allFalse) {
              if (category === "edge") {
                if (this.menuEl.querySelector(`.${cssClass}-menu-item`))
                  return result;
                const buttonEl = createEl("button", `clickable-icon ${cssClass}-menu-item`);
                (0, import_obsidian3.setTooltip)(buttonEl, tooltip, {
                  placement: "top"
                });
                (0, import_obsidian3.setIcon)(buttonEl, icon);
                return buttonEl;
              }
            } else {
              if (category !== "edge") {
                if (this.menuEl.querySelector(`.${cssClass}-menu-item`))
                  return result;
                const buttonEl = createEl("button", `clickable-icon ${cssClass}-menu-item`);
                (0, import_obsidian3.setTooltip)(buttonEl, tooltip, {
                  placement: "top"
                });
                (0, import_obsidian3.setIcon)(buttonEl, icon);
                return buttonEl;
              }
            }
          };
          const handleButtonClick = (buttonEl, clickHandler) => {
            const pos = buttonEl.getBoundingClientRect();
            if (!buttonEl.hasClass("has-active-menu")) {
              buttonEl.toggleClass("has-active-menu", true);
              const menu2 = new import_obsidian3.Menu();
              const containingNodes = this.canvas.getContainingNodes(this.selection.bbox);
              clickHandler(menu2, containingNodes);
              buttonEl.toggleClass("has-active-menu", false);
              menu2.setParentElement(this.menuEl).showAtPosition({
                x: pos.x,
                y: pos.bottom,
                width: pos.width,
                overlap: true
              });
            }
          };
          const createAndSetupMenuButton = (category, cssClass, toggleMenu2, tooltip, icon, clickHandler) => {
            const buttonEl = createMenuButton(category, cssClass, tooltip, icon);
            if (buttonEl) {
              const toggleMenuItemsClass = getToggleMenuItemsClass(toggleMenu2, menuConfig);
              const currentSelection2 = this.canvas.selection;
              const containingNodes = this.canvas.getContainingNodes(this.selection.bbox);
              const menuItemType = getItemProperty(cssClass, menuConfig, "type");
              if (toggleMenuItemsClass.includes(cssClass)) {
                buttonEl.addEventListener("click", () => {
                  var _a3, _b;
                  currentSelection2.size === 1 ? handleSingleNode((_a3 = Array.from(currentSelection2)) == null ? void 0 : _a3.first(), null, menuItemType, cssClass, false) : containingNodes.length > 1 ? handleMultiNodesViaNodes(this.canvas, containingNodes, null, menuItemType, cssClass, false) : currentSelection2 ? handleSingleNode((_b = Array.from(currentSelection2)) == null ? void 0 : _b.first(), null, menuItemType, cssClass, false) : "";
                });
              } else
                buttonEl.addEventListener("click", () => handleButtonClick(buttonEl, clickHandler));
              buttonEl.addEventListener("contextmenu", () => {
                var _a3, _b;
                currentSelection2.size === 1 ? handleSingleNode((_a3 = Array.from(currentSelection2)) == null ? void 0 : _a3.first(), null, menuItemType, cssClass, true) : containingNodes.length > 1 ? handleMultiNodesViaNodes(this.canvas, containingNodes, null, menuItemType, cssClass, true) : currentSelection2 ? handleSingleNode((_b = Array.from(currentSelection2)) == null ? void 0 : _b.first(), null, menuItemType, cssClass, true) : "";
              });
              this.menuEl.appendChild(buttonEl);
            }
          };
          menuConfig.forEach((memuItem) => {
            if (memuItem.enable === true) {
              createAndSetupMenuButton(memuItem.cat, memuItem.class, toggleMenu, memuItem.name, memuItem.icon, (menu2, containingNodes) => {
                handleMenu(menu2, subMenuConfig, async (cssClass) => {
                  var _a3, _b;
                  const currentSelection2 = this.canvas.selection;
                  currentSelection2.size === 1 ? handleSingleNode((_a3 = Array.from(currentSelection2)) == null ? void 0 : _a3.first(), subMenuConfig, null, cssClass, false) : containingNodes.length > 1 ? handleMultiNodesViaNodes(this.canvas, containingNodes, subMenuConfig, null, cssClass, false) : currentSelection2 ? handleSingleNode((_b = Array.from(currentSelection2)) == null ? void 0 : _b.first(), subMenuConfig, null, cssClass, false) : "";
                }, memuItem.type);
              });
            }
          });
          return result;
        }
      });
      this.register(menuUninstaller);
      this.app.workspace.trigger("canvas-style-menu:patched-canvas");
      console.log("Canvas-Style-Menu: canvas menu patched");
      return true;
    };
    this.app.workspace.onLayoutReady(() => {
      if (!patchMenu()) {
        const evt = this.app.workspace.on("layout-change", () => {
          patchMenu() && this.app.workspace.offref(evt);
        });
        this.registerEvent(evt);
      }
    });
  }
  patchCanvasNode() {
    const menuConfig = this.settings.configs[this.settings.currentConfig].menuItems;
    const subMenuConfig = transformSubMenuItems(this.settings.configs[this.settings.currentConfig].subMenuItems);
    const allMenuConfig = menuConfig.concat(subMenuConfig);
    const initCanvasStyle = (node) => {
      return new CanvasStyle(node, menuConfig);
    };
    const patchNode = () => {
      var _a, _b, _c;
      let groupPatched = false;
      if (this.nodePatched && this.groupPatched)
        return;
      const canvasView = (_a = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _a.view;
      if (!canvasView)
        return false;
      const canvas = canvasView == null ? void 0 : canvasView.canvas;
      if (!canvas)
        return false;
      let node = ((_b = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _b.view).canvas.nodes.values().next().value;
      const nodes = ((_c = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _c.view).canvas.nodes.values();
      for (const group of nodes) {
        if ((group == null ? void 0 : group.unknownData.type) === "group") {
          node = group;
          groupPatched = true;
          break;
        }
      }
      if (!node)
        return false;
      let prototypeNode = Object.getPrototypeOf(node);
      while (prototypeNode && prototypeNode !== Object.prototype) {
        prototypeNode = Object.getPrototypeOf(prototypeNode);
        if (prototypeNode.renderZIndex) {
          break;
        }
      }
      if (!prototypeNode)
        return false;
      const uninstallerNode = around(prototypeNode, {
        render: (next) => function(...args) {
          const result = next.call(this, ...args);
          this.nodeCSSclass = initCanvasStyle(this);
          const typeToPropertyMap = menuConfig.reduce((acc, item) => {
            acc[item.type] = `unknownData.${item.type}`;
            return acc;
          }, {});
          menuConfig.forEach(async (item) => {
            const propertyKey = typeToPropertyMap[item.type];
            const propertyValue = new Function(`return this.${propertyKey}`).call(this);
            if (propertyValue) {
              if (getItemProperty(propertyValue, allMenuConfig, "selector") === "cc") {
                await modifyClassOnElements("add", this.contentEl, "markdown-preview-view", propertyValue);
              } else
                this.nodeEl.classList.add(propertyValue);
            }
          });
          return result;
        },
        setData: (next) => function(data) {
          const typeToPropertyMap = menuConfig.reduce((acc, item) => {
            acc[item.type] = `${item.type}`;
            return acc;
          }, {});
          menuConfig.forEach((item) => {
            var _a2;
            const propertyKey = typeToPropertyMap[item.type];
            const propertyValue = data[propertyKey];
            const selector = getItemProperty(propertyValue, allMenuConfig, "selector");
            (_a2 = this.nodeCSSclass) == null ? void 0 : _a2.setStyle(item.cat, selector, item.type, propertyValue);
          });
          return next.call(this, data);
        }
      });
      this.register(uninstallerNode);
      if (!this.nodePatched) {
        this.nodePatched = true;
        console.log("Canvas-Style-Menu: canvas node patched");
      }
      if (groupPatched) {
        if (!this.groupPatched) {
          this.groupPatched = true;
          console.log("Canvas-Style-Menu: canvas group patched");
        }
      }
      return true;
    };
    const patchEdge = () => {
      var _a, _b;
      if (this.edgePatched)
        return;
      const canvasView = (_a = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _a.view;
      if (!canvasView)
        return false;
      const canvas = canvasView == null ? void 0 : canvasView.canvas;
      if (!canvas)
        return false;
      const edge = ((_b = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _b.view).canvas.edges.values().next().value;
      if (!edge)
        return false;
      let prototypeEdge = Object.getPrototypeOf(edge);
      if (!prototypeEdge) {
        return false;
      } else {
        const uninstallerEdge = around(prototypeEdge, {
          render: (next) => function(...args) {
            const result = next.call(this, ...args);
            this.nodeCSSclass = initCanvasStyle(this);
            let fromOffsetH = 0;
            let fromOffsetV = 0;
            let toOffsetH = 0;
            let toOffsetV = 0;
            if (this.from.side === "right")
              fromOffsetH = -8;
            if (this.from.side === "left")
              fromOffsetH = 8;
            if (this.from.side === "top")
              fromOffsetV = 8;
            if (this.from.side === "bottom")
              fromOffsetV = -8;
            if (this.to.side === "right")
              toOffsetH = -8;
            if (this.to.side === "left")
              toOffsetH = 8;
            if (this.to.side === "top")
              toOffsetV = 8;
            if (this.to.side === "bottom")
              toOffsetV = -8;
            function createLinePath(x1, y1, x2, y2) {
              const pathData = `M${x1},${y1} L${x2},${y2}`;
              return pathData;
            }
            const linePath = createLinePath(this.bezier.from.x + fromOffsetH, this.bezier.from.y + fromOffsetV, this.bezier.to.x + toOffsetH, this.bezier.to.y + toOffsetV);
            function calculateAngle(x1, y1, x2, y2) {
              const angleRad = Math.atan2(y2 - y1, x2 - x1);
              const angleDeg = angleRad * 180 / Math.PI;
              return angleDeg;
            }
            const angle = calculateAngle(this.bezier.from.x + fromOffsetH, this.bezier.from.y + fromOffsetV, this.bezier.to.x + toOffsetH, this.bezier.to.y + toOffsetV);
            const fromRotateAngle = angle - 90;
            const toRotateAngle = angle - 270;
            const elbowPath = createElbowPath(this.from.side, this.to.side, this.bezier.from.x + fromOffsetH, this.bezier.from.y + fromOffsetV, this.bezier.to.x + toOffsetH, this.bezier.to.y + toOffsetV);
            const typeToPropertyMap = menuConfig.reduce((acc, item) => {
              acc[item.type] = `unknownData.${item.type}`;
              return acc;
            }, {});
            menuConfig.forEach((item) => {
              const propertyKey = typeToPropertyMap[item.type];
              const propertyValue = new Function(`return this.${propertyKey}`).call(this);
              if (propertyValue) {
                this.lineGroupEl.classList.add(propertyValue);
                this.lineEndGroupEl.classList.add(propertyValue);
                if (propertyValue === "cs-line-straight") {
                  const displayPath = this.lineGroupEl.querySelector(".canvas-display-path");
                  const interactionPath = this.lineGroupEl.querySelector(".canvas-interaction-path");
                  displayPath.setAttribute("d", linePath);
                  interactionPath.setAttribute("d", linePath);
                  if (this.toLineEnd && !this.fromLineEnd) {
                    const toNewTransform = this.toLineEnd.el.style.transform.replace(/rotate\([-\d]+deg\)/, `rotate(${toRotateAngle}deg)`);
                    this.toLineEnd.el.style.transform = toNewTransform;
                  }
                  if (this.fromLineEnd) {
                    const fromNewTransform = this.fromLineEnd.el.style.transform.replace(/rotate\([-\d]+deg\)/, `rotate(${fromRotateAngle}deg)`);
                    const toNewTransform = this.toLineEnd.el.style.transform.replace(/rotate\([-\d]+deg\)/, `rotate(${toRotateAngle}deg)`);
                    this.fromLineEnd.el.style.transform = fromNewTransform;
                    this.toLineEnd.el.style.transform = toNewTransform;
                  }
                }
                if (propertyValue === "cs-line-elbow") {
                  const displayPath = this.lineGroupEl.querySelector(".canvas-display-path");
                  const interactionPath = this.lineGroupEl.querySelector(".canvas-interaction-path");
                  displayPath.setAttribute("d", elbowPath);
                  interactionPath.setAttribute("d", elbowPath);
                }
              }
            });
            return result;
          },
          setData: (next) => function(data) {
            const typeToPropertyMap = menuConfig.reduce((acc, item) => {
              acc[item.type] = `${item.type}`;
              return acc;
            }, {});
            menuConfig.forEach((item) => {
              var _a2;
              const propertyKey = typeToPropertyMap[item.type];
              const propertyValue = data[propertyKey];
              const selector = getItemProperty(propertyValue, allMenuConfig, "selector");
              (_a2 = this.nodeCSSclass) == null ? void 0 : _a2.setStyle(item.cat, selector, item.type, propertyValue);
            });
            return next.call(this, data);
          }
        });
        this.register(uninstallerEdge);
      }
      if (!this.edgePatched) {
        this.edgePatched = true;
        console.log("Canvas-Style-Menu: canvas edge patched");
      }
      return true;
    };
    this.app.workspace.onLayoutReady(() => {
      if (!patchNode()) {
        const evt = this.app.workspace.on("layout-change", () => {
          this.nodePatched && this.app.workspace.offref(evt);
        });
        this.registerEvent(evt);
      }
      if (!patchEdge()) {
        const evt = this.app.workspace.on("layout-change", () => {
          this.edgePatched && this.app.workspace.offref(evt);
        });
        this.registerEvent(evt);
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
