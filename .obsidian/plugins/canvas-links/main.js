/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CanvasLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FILE_VIEW = "file-view";
var CANVAS_VIEW = "canvas-view";
var ALL_VIEW = "all-view";
var CanvasLinksPlugin = class extends import_obsidian.Plugin {
  onload() {
    this.registerView(FILE_VIEW, (leaf) => new FileView(leaf));
    this.registerView(CANVAS_VIEW, (leaf) => new CanvasView(leaf));
    this.addCommand({
      id: ALL_VIEW,
      name: "Enable plugin",
      callback: () => {
        this.onloadFileView();
        this.onloadCanvasView();
      }
    });
  }
  async onloadFileView() {
    if (this.app.workspace.getLeavesOfType(FILE_VIEW).length == 0) {
      await this.app.workspace.getRightLeaf(false).setViewState({
        type: FILE_VIEW,
        active: true
      });
    }
  }
  async onloadCanvasView() {
    if (this.app.workspace.getLeavesOfType(CANVAS_VIEW).length == 0) {
      await this.app.workspace.getRightLeaf(false).setViewState({
        type: CANVAS_VIEW,
        active: true
      });
    }
  }
  onunload() {
  }
};
var FileView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return FILE_VIEW;
  }
  getDisplayText() {
    return "Files";
  }
  async onOpen() {
    this.icon = "chevron-right-square";
    this.getFiles().then((notes) => {
      renderView(notes, "Files", this.containerEl);
    });
    this.registerEvent(this.app.workspace.on("file-open", () => {
      this.getFiles().then((notes) => {
        renderView(notes, "Files", this.containerEl);
      });
    }));
  }
  async getFiles() {
    const activeCanvas = this.app.workspace.getActiveFile();
    if (activeCanvas == null || "canvas" != activeCanvas.extension) {
      return [];
    }
    let canvasContent = "";
    await this.app.vault.cachedRead(activeCanvas).then((content) => {
      canvasContent = content;
    });
    const nodes = JSON.parse(canvasContent).nodes;
    if (nodes == null) {
      return [];
    }
    const filePaths = [];
    for (const node of nodes) {
      if ("file" == node.type) {
        filePaths.push(node.file);
      }
    }
    const files = [];
    for (const filePath of filePaths) {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file != null) {
        files.push(file);
      }
    }
    return files;
  }
  async onClose() {
  }
};
var CanvasView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return CANVAS_VIEW;
  }
  getDisplayText() {
    return "Canvas";
  }
  async onOpen() {
    this.icon = "chevron-left-square";
    this.getCanvas().then((canvas) => {
      renderView(canvas, "Canvases", this.containerEl);
    });
    this.registerEvent(this.app.workspace.on("file-open", () => {
      this.getCanvas().then((canvas) => {
        renderView(canvas, "Canvases", this.containerEl);
      });
    }));
  }
  async getCanvas() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile == null) {
      return [];
    }
    const canvas = [];
    const all = this.app.vault.getFiles();
    for (const file of all) {
      if ("canvas" == file.extension) {
        canvas.push(file);
      }
    }
    const canvasContent = /* @__PURE__ */ new Map();
    for (const file of canvas) {
      await this.app.vault.cachedRead(file).then((content) => {
        canvasContent.set(file, content);
      });
    }
    const canvasEmebeded = [];
    for (const [file, content] of canvasContent) {
      const nodes = JSON.parse(content).nodes;
      if (nodes == null) {
        continue;
      }
      for (const node of nodes) {
        if ("file" == node.type && activeFile.path == node.file) {
          canvasEmebeded.push(file);
        }
      }
    }
    return canvasEmebeded;
  }
  async onClose() {
  }
};
function renderView(files, text, container) {
  container.empty();
  const pane = container.createDiv({
    cls: "outgoing-link-pane node-insert-event",
    attr: { "style": "position: relative;" }
  });
  const header = pane.createDiv({
    cls: "tree-item-self is-clickable",
    attr: {
      "aria-label": "Click to collapse",
      "aria-label-position": "right"
    }
  });
  header.createSpan({ cls: "tree-item-icon collapse-icon" });
  header.createDiv({
    cls: "tree-item-inner",
    text
  });
  header.createDiv({ cls: "tree-item-flair-outer" }, (el) => {
    el.createSpan({
      cls: "tree-item-flair",
      text: files.length.toString()
    });
  });
  const content = pane.createDiv({ cls: "search-result-container" });
  content.createDiv({
    attr: {
      "style": "width: 1px; height: 0.1px; margin-bottom: 0px;"
    }
  });
  for (const file of files) {
    content.createDiv({
      cls: "tree-item-self is-clickable outgoing-link-item",
      attr: { "draggable": true }
    }, (el) => {
      el.createSpan({ cls: "tree-item-icon" }, (el2) => {
        (0, import_obsidian.setIcon)(el2, "link");
      });
      el.createDiv({
        cls: "tree-item-inner",
        text: file.name.substring(0, file.name.lastIndexOf("."))
      }).addEventListener("click", () => {
        this.app.workspace.openLinkText("", file.path);
      });
    });
  }
}
//# sourceMappingURL=data:application/json;base64,
