/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin (https://github.com/AnAngryRaven/obsidian-open-sidebar-on-hover/)

Licenced under the MIT License
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OpenSidebarHover
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  leftSidebar: true,
  rightSidebar: false,
  enforceSameDelay: true,
  sidebarDelayBoth: "300",
  sidebarDelayLeft: "300",
  sidebarDelayRight: "300",
  speedDetection: false
};
var OpenSidebarHover = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(() => {
      const leftSplit = this.app.workspace.leftSplit;
      const rightSplit = this.app.workspace.rightSplit;
      const leftRibbon = this.app.workspace.leftRibbon;
      const rightRibbon = this.app.workspace.rightRibbon;
      const settingsConst = this.settings;
      let isHovering = false;
      let delayTime;
      this.registerDomEvent(leftSplit.containerEl, "mouseleave", () => {
        if (settingsConst.leftSidebar) {
          isHovering = false;
          if (settingsConst.enforceSameDelay) {
            delayTime = settingsConst.sidebarDelayBoth;
          } else {
            delayTime = settingsConst.sidebarDelayLeft;
          }
          setTimeout(() => {
            if (!isHovering)
              leftSplit.collapse();
          }, delayTime);
          this.registerDomEvent(leftSplit.containerEl, "mouseenter", () => {
            isHovering = true;
          });
        }
      });
      this.registerDomEvent(rightSplit.containerEl, "mouseleave", () => {
        if (settingsConst.rightSidebar) {
          isHovering = false;
          if (settingsConst.enforceSameDelay) {
            let delayTime2 = settingsConst.sidebarDelayBoth;
          } else {
            let delayTime2 = settingsConst.sidebarDelayLeft;
          }
          setTimeout(() => {
            if (!isHovering)
              rightSplit.collapse();
          }, delayTime);
          this.registerDomEvent(rightSplit.containerEl, "mouseenter", () => {
            isHovering = true;
          });
        }
      });
      this.registerDomEvent(document, "mouseleave", () => {
        isHovering = true;
      });
      this.registerDomEvent(leftRibbon.containerEl, "mouseenter", () => {
        if (settingsConst.leftSidebar) {
          this.app.workspace.leftSplit.expand();
          isHovering = true;
        }
      });
      this.registerDomEvent(rightRibbon.containerEl, "mouseenter", () => {
        if (settingsConst.rightSidebar) {
          this.app.workspace.rightSplit.expand();
          isHovering = true;
        }
      });
      this.registerDomEvent(document, "mouseenter", () => {
        isHovering = false;
        let delayTimeLeft;
        let delayTimeRight;
        if (settingsConst.enforceSameDelay) {
          delayTimeLeft = settingsConst.sidebarDelayBoth;
          delayTimeRight = settingsConst.sidebarDelayBoth;
        } else {
          delayTimeLeft = settingsConst.sidebarDelayLeft;
          delayTimeRight = settingsConst.sidebarDelayRight;
        }
        setTimeout(() => {
          if (!isHovering) {
            if (settingsConst.leftSidebar) {
              leftSplit.collapse();
            }
            if (settingsConst.rightSidebar) {
              rightSplit.collapse();
            }
          }
        }, delayTimeLeft);
      });
    });
    this.addSettingTab(new SidebarHoverSettingsTab(this.app, this));
  }
  onunload() {
    this.saveSettings();
  }
  async loadSettings() {
    this.settings = Object.assign(DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SidebarHoverSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Left Sidebar Hover").setDesc("Enables the expansion and collapsing of the left sidebar on hover.").addToggle((t) => t.setValue(this.plugin.settings.leftSidebar).onChange(async (value) => {
      this.plugin.settings.leftSidebar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Right Sidebar Hover").setDesc("Enables the expansion and collapsing of the right sidebar on hover. Only collapses the right panel unless you have a right ribbon.").addToggle((t) => t.setValue(this.plugin.settings.rightSidebar).onChange(async (value) => {
      this.plugin.settings.rightSidebar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Collapse Delay").setHeading();
    new import_obsidian.Setting(containerEl).setName("Same Collapse Delay").setDesc("Makes the delay for the left and right sidebars the same.").addToggle((t) => t.setValue(this.plugin.settings.enforceSameDelay).onChange(async (value) => {
      this.plugin.settings.enforceSameDelay = value;
      rightSidebarDelaySetting.setDisabled(value);
      leftSidebarDelaySetting.setDisabled(value);
      bothSidebarDelaySetting.setDisabled(!value);
      await this.plugin.saveSettings();
    }));
    const bothSidebarDelaySetting = new import_obsidian.Setting(containerEl).setName("Sidebar Collapse Delay (Both)").setDesc("The delay in milliseconds before the right sidebar collapses after the mouse has left. Enter '0' to disable delay.").addText((text) => text.setPlaceholder("0").setValue(this.plugin.settings.sidebarDelayBoth).onChange(async (value) => {
      this.plugin.settings.sidebarDelayBoth = value;
      await this.plugin.saveSettings();
    })).setClass("expand-sidebar-hover-disabled");
    const leftSidebarDelaySetting = new import_obsidian.Setting(containerEl).setName("Left Sidebar Collapse Delay").setDesc("The delay in milliseconds before the left sidebar collapses after the mouse has left. Enter '0' to disable delay.").addText((text) => text.setPlaceholder("0").setValue(this.plugin.settings.sidebarDelayLeft).onChange(async (value) => {
      this.plugin.settings.sidebarDelayLeft = value;
      await this.plugin.saveSettings();
    })).setClass("expand-sidebar-hover-disabled");
    const rightSidebarDelaySetting = new import_obsidian.Setting(containerEl).setName("Right Sidebar Collapse Delay").setDesc("The delay in milliseconds before the right sidebar collapses after the mouse has left. Enter '0' to disable delay.").addText((text) => text.setPlaceholder("0").setValue(this.plugin.settings.sidebarDelayRight).onChange(async (value) => {
      this.plugin.settings.sidebarDelayRight = value;
      await this.plugin.saveSettings();
    })).setClass("expand-sidebar-hover-disabled");
    if (this.plugin.settings.enforceSameDelay) {
      rightSidebarDelaySetting.setDisabled(true);
      leftSidebarDelaySetting.setDisabled(true);
    } else {
      bothSidebarDelaySetting.setDisabled(true);
    }
    new import_obsidian.Setting(containerEl).setName("Experimental Features").setHeading().setDesc("Settings to enable experimental features. Note that such settings may not always be present.");
    containerEl.createEl("i", { text: "Sorry, nothin' to report right now boss!" });
  }
};
//# sourceMappingURL=data:application/json;base64,
