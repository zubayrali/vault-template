/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const remote = require('electron').remote;
const globalShortcut = remote.globalShortcut;
const DEFAULT_SETTINGS = {
    accelerators: {},
};
class GlobalHotkeysPlugin extends obsidian.Plugin {
    registerGlobalShortcut(command_id, accelerator, oncomplete) {
        return __awaiter(this, void 0, void 0, function* () {
            if (command_id in this.currentlyMapped) {
                this.unregisterGlobalShortcut(command_id);
            }
            let success = (() => {
                try {
                    return globalShortcut.register(accelerator, () => {
                        const command = app.commands.commands[command_id];
                        if (!command)
                            return;
                        this.app.setting.close(); // Ensure all modals are closed?
                        const win = remote.getCurrentWindow();
                        const wasHidden = !win.isFocused() || !win.isVisible();
                        if (command.checkCallback)
                            command.checkCallback(false);
                        else if (command.callback)
                            command.callback();
                        // only activate Obsidian if visibility hasn't changed
                        const isHidden = !win.isFocused() || !win.isVisible();
                        if (wasHidden && isHidden)
                            remote.getCurrentWindow().show(); // Activate obsidian
                    });
                }
                catch (error) {
                    return false;
                }
            })();
            if (success) {
                this.currentlyMapped[command_id] = accelerator;
            }
            if (oncomplete) {
                oncomplete(success);
            }
        });
    }
    unregisterGlobalShortcut(command_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const accelerator = this.currentlyMapped[command_id];
            if (accelerator) {
                globalShortcut.unregister(accelerator);
                delete this.currentlyMapped[command_id];
            }
        });
    }
    isRegistered(command_id) {
        return (command_id in this.currentlyMapped);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentlyMapped = {};
            this.addCommand({
                id: 'bring-to-front',
                name: 'Bring Obsidian to front',
                checkCallback: (checking) => {
                    if (!checking)
                        remote.getCurrentWindow().show();
                    return true;
                }
            });
            this.addCommand({
                id: 'show-hide',
                name: 'Show/Hide Obsidian',
                checkCallback: (checking) => {
                    if (!checking) {
                        const win = remote.getCurrentWindow();
                        if (win.isVisible()) {
                            if (obsidian.Platform.isMacOS) {
                                remote.Menu.sendActionToFirstResponder('hide:');
                            }
                            else {
                                win.blur();
                            }
                        }
                        else {
                            win.show();
                        }
                    }
                    return true;
                }
            });
            yield this.loadSettings();
            globalShortcut.unregisterAll();
            for (const cmd in this.settings.accelerators) {
                const a = this.settings.accelerators[cmd];
                if (a) {
                    this.registerGlobalShortcut(cmd, a);
                }
            }
            this.addSettingTab(new GlobalShortcutSettingTab(this.app, this));
        });
    }
    onunload() {
        globalShortcut.unregisterAll();
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class GlobalShortcutSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.filterString = "";
    }
    updateHotkeyVisibility() {
        this.settingElems.forEach((e) => {
            const elemName = e.nameEl.textContent.toLowerCase();
            const visible = this.filterString.length == 0 || elemName.contains(this.filterString);
            e.settingEl.toggle(visible);
        });
    }
    removeSavedAccelerator(command_id) {
        return __awaiter(this, void 0, void 0, function* () {
            this.plugin.unregisterGlobalShortcut(command_id);
            delete this.plugin.settings.accelerators[command_id];
            yield this.plugin.saveSettings();
        });
    }
    display() {
        let { containerEl } = this;
        this.settingElems = [];
        containerEl.empty();
        containerEl.createDiv('', div => {
            const text = document.createElement('p');
            text.appendText("For information on key bindings, see documentation ");
            const link = document.createElement('a');
            link.setAttribute('href', "https://www.electronjs.org/docs/api/accelerator#available-modifiers");
            link.textContent = "here";
            text.appendChild(link);
            text.appendText(".");
            div.appendChild(text);
            const exampleText = document.createElement('p');
            exampleText.appendChild(document.createElement('strong')).appendText('Example: ');
            exampleText.appendText('Cmd+Shift+Ctrl+Alt+N');
            div.appendChild(exampleText);
        });
        containerEl.createDiv('hotkey-search-container', div => {
            let filterEl = document.createElement('input');
            div.appendChild(filterEl);
            filterEl.setAttribute('type', 'text');
            filterEl.setAttribute('placeholder', 'Filter...');
            filterEl.value = this.filterString;
            filterEl.addEventListener('input', e => {
                this.filterString = e.target.value.toLowerCase();
                this.updateHotkeyVisibility();
            });
        });
        let allCmds = this.app.commands.commands;
        const cmdKeys = Object.keys(allCmds);
        cmdKeys.sort((e1, e2) => (allCmds[e1].name < allCmds[e2].name) ? -1 : 1);
        cmdKeys.forEach(cmd => {
            const accelerator = this.plugin.settings.accelerators[cmd];
            const name = allCmds[cmd].name;
            let setting = new obsidian.Setting(containerEl)
                .setName(name)
                .addText(text => text
                .setPlaceholder('Hotkey')
                .setValue(accelerator)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                const inputEl = setting.components[0].inputEl;
                if (value) {
                    this.plugin.registerGlobalShortcut(cmd, value, (success) => __awaiter(this, void 0, void 0, function* () {
                        if (success) {
                            inputEl.classList.remove('invalid-accelerator');
                            this.plugin.settings.accelerators[cmd] = value;
                            yield this.plugin.saveSettings();
                        }
                        else {
                            this.removeSavedAccelerator(cmd);
                            inputEl.classList.add('invalid-accelerator');
                        }
                    }));
                }
                else {
                    inputEl.classList.remove('invalid-accelerator');
                    this.removeSavedAccelerator(cmd);
                }
            })));
            this.settingElems.push(setting);
        });
        this.updateHotkeyVisibility();
    }
}

module.exports = GlobalHotkeysPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
