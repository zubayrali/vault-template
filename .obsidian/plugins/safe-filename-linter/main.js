/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SafeFilenameLinter
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var SafeFilenameLinterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.intro();
    this.obsidianChars();
    this.androidChars();
  }
  intro() {
    const { containerEl } = this;
    containerEl.createEl("p", {
      text: "Note that Obsidian will automatically truncate multiple spaces in filenames and [[links]] into one space."
    });
  }
  addReplacementOptions(dropdown) {
    dropdown.addOption("off", "off");
    dropdown.addOption("blank", "empty string");
    dropdown.addOption("space", "space");
    dropdown.addOption("hyphen", "hyphen");
    dropdown.addOption("hyphen-space", "hyphen surrounded by spaces");
  }
  obsidianChars() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "Obsidian troublesome characters" });
    containerEl.createEl("p", {
      text: "Obsidian itself won't let you use these in filenames and will remove them automatically. However, if you create files via external means they can creep in. These characters wreak havoc with [[links]] syntax."
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for square brackets").setDesc("Specify the replacement for [ and ]").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.squareBrackets);
      dropdown.onChange(async (value) => {
        this.plugin.settings.squareBrackets = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for number sign").setDesc("Specify the replacement for #").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.numberSign);
      dropdown.onChange(async (value) => {
        this.plugin.settings.numberSign = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for caret").setDesc("Specify the replacement for ^").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.caret);
      dropdown.onChange(async (value) => {
        this.plugin.settings.caret = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for pipe").setDesc("Specify the replacement for |").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.pipe);
      dropdown.onChange(async (value) => {
        this.plugin.settings.pipe = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for colon").setDesc("Specify the replacement for :").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.colon);
      dropdown.onChange(async (value) => {
        this.plugin.settings.colon = value;
        await this.plugin.saveSettings();
      });
    });
  }
  androidChars() {
    const { containerEl } = this;
    this.containerEl.createEl("h2", { text: "Android invalid characters" });
    this.containerEl.createEl("p", {
      text: "Obsidian for Android will not allow you to create filenames with these characters, but external programs and other Obsidian platforms will. If you sync your vault between Android and non-Android systems using git or other means, these may cause you issues."
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for asterisk").setDesc("Specify the replacement for *").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.asterisk);
      dropdown.onChange(async (value) => {
        this.plugin.settings.asterisk = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for question mark").setDesc("Specify the replacement for ?").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.questionMark);
      dropdown.onChange(async (value) => {
        this.plugin.settings.questionMark = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for double quote").setDesc('Specify the replacement for "').addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.doubleQuote);
      dropdown.onChange(async (value) => {
        this.plugin.settings.doubleQuote = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Replacement for angle brackets").setDesc("Specify the replacement for < and >").addDropdown((dropdown) => {
      this.addReplacementOptions(dropdown);
      dropdown.setValue(this.plugin.settings.angleBrackets);
      dropdown.onChange(async (value) => {
        this.plugin.settings.angleBrackets = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  squareBrackets: "off",
  numberSign: "off",
  caret: "off",
  pipe: "off",
  colon: "off",
  asterisk: "off",
  questionMark: "off",
  doubleQuote: "off",
  angleBrackets: "off"
};
var SafeFilenameLinter = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "lint-current-file-filename",
      name: "Lint the current filename",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile !== null) {
          if (!checking) {
            this.lintFilename(activeFile);
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "lint-all-filenames",
      name: "Lint all filenames in the vault",
      callback: () => {
        this.lintAllFilenames();
      }
    });
    this.addSettingTab(new SafeFilenameLinterSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  getReplacementValueFromSetting(setting) {
    let replacement = "";
    switch (setting) {
      case "blank":
        replacement = "";
        break;
      case "space":
        replacement = " ";
        break;
      case "hyphen":
        replacement = "-";
        break;
      case "hyphen-space":
        replacement = " - ";
        break;
    }
    return replacement;
  }
  async lintFilename(file) {
    const oldFilename = file.basename;
    let newFilename = file.basename;
    if (this.settings.squareBrackets !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.squareBrackets
      );
      newFilename = newFilename.replaceAll(/[[\]]/gi, replacement);
    }
    if (this.settings.numberSign !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.numberSign
      );
      newFilename = newFilename.replaceAll(/#/gi, replacement);
    }
    if (this.settings.caret !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.caret
      );
      newFilename = newFilename.replaceAll(/\^/gi, replacement);
    }
    if (this.settings.pipe !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.pipe
      );
      newFilename = newFilename.replaceAll(/\|/gi, replacement);
    }
    if (this.settings.colon !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.colon
      );
      newFilename = newFilename.replaceAll(/:/gi, replacement);
    }
    if (this.settings.asterisk !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.asterisk
      );
      newFilename = newFilename.replaceAll(/\*/gi, replacement);
    }
    if (this.settings.questionMark !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.questionMark
      );
      newFilename = newFilename.replaceAll(/\?/gi, replacement);
    }
    if (this.settings.doubleQuote !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.doubleQuote
      );
      newFilename = newFilename.replaceAll(/"/gi, replacement);
    }
    if (this.settings.angleBrackets !== "off") {
      const replacement = this.getReplacementValueFromSetting(
        this.settings.angleBrackets
      );
      newFilename = newFilename.replaceAll(/[<>]/gi, replacement);
    }
    if (newFilename != oldFilename) {
      const path = file.parent ? file.parent.path : "/";
      const newFilepath = (0, import_obsidian2.normalizePath)(
        `${path}/${newFilename}.${file.extension}`
      );
      try {
        await this.app.fileManager.renameFile(file, newFilepath);
        new import_obsidian2.Notice(`"${oldFilename}" renamed to "${newFilename}"`, 30);
      } catch (error) {
        new import_obsidian2.Notice(
          `Unable to rename "${oldFilename}" to "${newFilename}". There probably already exists a file with this name`,
          30
        );
      }
    }
  }
  async lintAllFilenames() {
    new import_obsidian2.Notice("Linting all filenames...", 30);
    await Promise.all(
      // Get all files in the current vault
      this.app.vault.getFiles().map(async (file) => {
        await this.lintFilename(file);
      })
    );
    new import_obsidian2.Notice("Linted all filenames", 30);
  }
};
