/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DialoguePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var DEFAULT_SETTINGS = {
  fadeIntensity: 100,
  fadeEnabled: true,
  modifyDialogueColor: false,
  dialogueColor: "#FFFFFF",
  dialogueStarters: `\u201C\u2018"'\xAB`,
  dialogueEnders: `\u201D\u2019"'\xBB`
};
var ColorUtility = class {
  static updateFadeColor(settings) {
    if (!settings.fadeEnabled) {
      document.body.style.setProperty("--adjusted-color", "inherit");
      return;
    }
    const fadeIntensity = settings.fadeIntensity;
    const baseColor = getComputedStyle(document.body).getPropertyValue("--text-normal").trim();
    const fadeColor = getComputedStyle(document.body).getPropertyValue("--dialogue-excluded-text-color").trim();
    const baseRGB = this.hexToRgb(baseColor);
    const fadeRGB = this.hexToRgb(fadeColor);
    const blendRGB = {
      r: Math.round(this.lerp(baseRGB.r, fadeRGB.r, fadeIntensity / 100)),
      g: Math.round(this.lerp(baseRGB.g, fadeRGB.g, fadeIntensity / 100)),
      b: Math.round(this.lerp(baseRGB.b, fadeRGB.b, fadeIntensity / 100))
    };
    const blendedColor = `rgb(${blendRGB.r}, ${blendRGB.g}, ${blendRGB.b})`;
    document.body.style.setProperty("--adjusted-color", blendedColor);
    if (settings.modifyDialogueColor) {
      document.body.style.setProperty("--dialogue-text-color", settings.dialogueColor);
    } else {
      document.body.style.setProperty("--dialogue-text-color", baseColor);
    }
  }
  static hexToRgb(hex) {
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    return { r, g, b };
  }
  static lerp(start, end, t) {
    return start + (end - start) * t;
  }
};
var DialoguePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.lastActiveMarkdownLeaf = null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DialoguePluginSettingsTab(this.app, this));
    this.registerMarkdownPostProcessor((element, context) => {
      if (this.settings.fadeEnabled) {
        this.highlightDialog(element);
      }
    });
    this.registerEditorExtension(this.dialogHighlighterExtension());
    this.addCommand({
      id: "toggle-dialogue-mode",
      name: "Toggle dialogue mode",
      callback: () => {
        this.toggleChanged = true;
        this.toggleFadeOut();
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        markdownView == null ? void 0 : markdownView.previewMode.rerender(true);
      }
    });
  }
  toggleFadeOut() {
    this.settings.fadeEnabled = !this.settings.fadeEnabled;
    this.saveSettings();
    new import_obsidian.Notice(`Dialogue fade out ${this.settings.fadeEnabled ? "enabled" : "disabled"}`);
    ColorUtility.updateFadeColor(this.settings);
  }
  highlightDialog(element) {
    ColorUtility.updateFadeColor(this.settings);
    const textNodes = this.getTextNodes(element);
    textNodes.forEach((node) => {
      const text = node.nodeValue || "";
      const result = DialogueUtility.detectDialogue(text, this);
      if (result.parts.map((p) => p.text).join("") !== text) {
        const wrapper = document.createDocumentFragment();
        result.parts.forEach((part) => {
          const span = document.createElement("span");
          span.className = part.isDialogue ? "dialogue-text" : "non-dialogue-text";
          span.appendChild(document.createTextNode(part.text));
          wrapper.appendChild(span);
        });
        if (node.parentNode) {
          node.parentNode.replaceChild(wrapper, node);
        }
      }
    });
  }
  createWrapper(content) {
    const wrapper = document.createElement("span");
    content.forEach((item) => {
      if (typeof item === "string") {
        wrapper.appendChild(document.createTextNode(item));
      } else {
        wrapper.appendChild(item);
      }
    });
    return wrapper;
  }
  getTextNodes(element) {
    const textNodes = [];
    const nodesToVisit = [element];
    while (nodesToVisit.length > 0) {
      const currentNode = nodesToVisit.shift();
      if (currentNode) {
        if (currentNode.nodeType === Node.TEXT_NODE) {
          textNodes.push(currentNode);
        } else {
          nodesToVisit.unshift(...Array.from(currentNode.childNodes));
        }
      }
    }
    return textNodes;
  }
  dialogHighlighterExtension() {
    return import_view.ViewPlugin.define((view) => new DialogueEditorExtension(view, this), {
      decorations: (v) => v.decorations
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DialogueEditorExtension = class {
  constructor(view, plugin) {
    this.plugin = plugin;
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    if (update.docChanged || update.viewportChanged || this.plugin.toggleChanged) {
      this.decorations = this.buildDecorations(update.view);
      ColorUtility.updateFadeColor(this.plugin.settings);
      this.plugin.toggleChanged = false;
    }
  }
  buildDecorations(view) {
    if (!this.plugin.settings.fadeEnabled) {
      return import_view.Decoration.none;
    }
    const builder = [];
    for (const { from, to } of view.visibleRanges) {
      for (let pos = from; pos <= to; ) {
        const line = view.state.doc.lineAt(pos);
        const text = line.text;
        const result = DialogueUtility.detectDialogue(text, this.plugin);
        let bufferStart = line.from;
        result.parts.forEach((part) => {
          const end = bufferStart + part.text.length;
          builder.push(import_view.Decoration.mark({ class: part.isDialogue ? "dialogue-text" : "non-dialogue-text" }).range(bufferStart, end));
          bufferStart = end;
        });
        pos = line.to + 1;
      }
    }
    return import_view.Decoration.set(builder, true);
  }
};
var DialoguePluginSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable fade effect").setDesc("Enable or disable the fade effect on excluded text.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.fadeEnabled).onChange(async (value) => {
        this.plugin.settings.fadeEnabled = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Fade intensity").setDesc("The intensity of the fade effect on excluded text.").addSlider((slider) => {
      slider.setLimits(0, 100, 1).setDynamicTooltip().setValue(this.plugin.settings.fadeIntensity).onChange(async (value) => {
        this.plugin.settings.fadeIntensity = value;
        await this.plugin.saveSettings();
        ColorUtility.updateFadeColor(this.plugin.settings);
      });
    });
    new import_obsidian.Setting(containerEl).setName("Modify dialogue text color").setDesc("Enable or disable the modification of the dialogue text color.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.modifyDialogueColor).onChange(async (value) => {
        this.plugin.settings.modifyDialogueColor = value;
        await this.plugin.saveSettings();
        this.display();
        ColorUtility.updateFadeColor(this.plugin.settings);
      });
    });
    new import_obsidian.Setting(containerEl).setName("Dialogue text color").setDesc("The color of the dialogue text.").addColorPicker((color) => {
      color.setValue(this.plugin.settings.dialogueColor).setDisabled(!this.plugin.settings.modifyDialogueColor).onChange(async (value) => {
        this.plugin.settings.dialogueColor = value;
        await this.plugin.saveSettings();
        ColorUtility.updateFadeColor(this.plugin.settings);
      });
    });
    new import_obsidian.Setting(containerEl).setName("Dialogue starters").setDesc("Characters that indicate the start of a dialogue.").addText((text) => {
      text.setValue(this.plugin.settings.dialogueStarters).onChange(async (value) => {
        this.plugin.settings.dialogueStarters = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Dialogue enders").setDesc("Characters that indicate the end of a dialogue.").addText((text) => {
      text.setValue(this.plugin.settings.dialogueEnders).onChange(async (value) => {
        this.plugin.settings.dialogueEnders = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
var DialogueUtility = class {
  static detectDialogue(text, plugin) {
    const openQuotes = plugin.settings.dialogueStarters.split("");
    const closeQuotes = plugin.settings.dialogueEnders.split("");
    if (openQuotes.length == 0) {
      openQuotes.push('"', "\u201C", "\u2018", "\xAB");
    }
    if (closeQuotes.length == 0) {
      closeQuotes.push('"', "\u201D", "\u2019", "\xBB");
    }
    const parts = [];
    let buffer = "";
    let inDialog = false;
    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      if (inDialog) {
        buffer += char;
        if (closeQuotes.includes(char) && (i === text.length - 1 || text[i + 1] === " " || text[i + 1] === "." || text[i + 1] === ",")) {
          inDialog = false;
          parts.push({ text: buffer, isDialogue: true });
          buffer = "";
        }
      } else {
        if (openQuotes.includes(char)) {
          inDialog = true;
          if (buffer) {
            parts.push({ text: buffer, isDialogue: false });
            buffer = "";
          }
          buffer += char;
        } else {
          buffer += char;
        }
      }
    }
    if (buffer) {
      parts.push({ text: buffer, isDialogue: inDialog });
    }
    return { parts, inDialog: false };
  }
};
