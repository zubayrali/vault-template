/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RelativeTimestampsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  lastTimeStamp: "2024-05-31-12-00-00",
  includeCurrentTime: true,
  savePageTime: true
};
var RelativeTimestampsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "reset-timestamp",
      name: "Reset timestamp",
      callback: () => {
        const now = new Date();
        const stamp = (0, import_obsidian.moment)(now).format("YYYYMMDDHHmmss");
        this.settings.lastTimeStamp = stamp;
        this.saveSettings();
        new import_obsidian.Notice("New saved time: " + stamp);
      }
    });
    this.addCommand({
      id: "insert-relative-timestamp",
      name: "Insert relative time",
      editorCallback: async (editor) => {
        const now = new Date();
        const last = (0, import_obsidian.moment)(this.settings.lastTimeStamp, "YYYYMMDDHHmmss");
        const stamp = (0, import_obsidian.moment)(now);
        const out = import_obsidian.moment.duration(last.diff(stamp)).humanize();
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (this.settings.savePageTime) {
          if (view && view.file) {
            await this.app.fileManager.processFrontMatter(view.file, (frontmatter) => {
              frontmatter["lasttime"] = (0, import_obsidian.moment)(now).format("YYYYMMDDHHmmss");
            });
          }
        }
        if (this.settings.lastTimeStamp == null || this.settings.lastTimeStamp == "" || this.settings.lastTimeStamp == (0, import_obsidian.moment)(now).format("YYYYMMDDHHmmss")) {
          editor.replaceSelection(stamp.format("hh:mm A"));
        } else if (this.settings.includeCurrentTime) {
          editor.replaceSelection(stamp.format("hh:mm A") + " (" + out + ")");
        } else {
          editor.replaceSelection(out);
        }
        this.settings.lastTimeStamp = (0, import_obsidian.moment)(now).format("YYYYMMDDHHmmss");
        this.saveSettings();
      }
    });
    this.addCommand({
      id: "save-timestamp",
      name: "Save timestamp",
      editorCallback: (editor) => {
        const selected = editor.getSelection();
        const stamp = (0, import_obsidian.moment)(selected, "hh:mm A").format("YYYYMMDDHHmmss");
        this.settings.lastTimeStamp = stamp;
        this.saveSettings();
      }
    });
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      if (file) {
        const meta = this.app.metadataCache.getFileCache(file);
        if (meta == void 0) {
          return;
        }
        if (meta.frontmatter && meta.frontmatter["lasttime"]) {
          this.settings.lastTimeStamp = meta.frontmatter["lasttime"];
        } else {
          this.settings.lastTimeStamp = "";
        }
      }
    }));
    this.addSettingTab(new RelTimeSettingTab(this.app, this));
    this.app.metadataCache.on("changed", (file) => {
      const meta = this.app.metadataCache.getFileCache(file);
      if (meta == void 0) {
        return;
      }
      if (meta.frontmatter && meta.frontmatter["lasttime"] !== void 0) {
        this.settings.lastTimeStamp = meta.frontmatter["lasttime"];
      } else {
        this.settings.lastTimeStamp = "";
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var RelTimeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Save timestamps by page").setDesc("Save the last used timestamp on the frontmatter of the page").addToggle((toggle) => toggle.setValue(this.plugin.settings.savePageTime).onChange(async (value) => {
      this.plugin.settings.savePageTime = value;
      await this.plugin.saveSettings();
    }));
  }
};
