/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// ../jsbrains/smart-chat-model/adapters/anthropic.js
var require_anthropic = __commonJS({
  "../jsbrains/smart-chat-model/adapters/anthropic.js"(exports) {
    var AnthropicAdapter = class {
      /**
       * Prepares the request body for the Anthropic API by converting ChatML format to a format compatible with Anthropic.
       * @param {Object} opts - The options object containing messages and other parameters in ChatML format.
       * @returns {Object} The request body formatted for the Anthropic API.
       */
      prepare_request_body(opts) {
        return chatml_to_anthropic(opts);
      }
      /**
       * Counts the tokens in the input by estimating them, as the Anthropic model does not provide a direct method.
       * @param {string|Object} input - The input text or object to count tokens in.
       * @returns {Promise<number>} The estimated number of tokens in the input.
       */
      async count_tokens(input) {
        return this.estimate_tokens(input);
      }
      /**
       * Estimates the number of tokens in the input based on a rough average token size.
       * @param {string|Object} input - The input text or object to estimate tokens in.
       * @returns {number} The estimated number of tokens.
       */
      estimate_tokens(input) {
        if (typeof input === "object")
          input = JSON.stringify(input);
        return Math.ceil(input.length / 6);
      }
      /**
       * Extracts the first tool call from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the tool call.
       * @returns {Object|null} The first tool call found, or null if none exist.
       */
      get_tool_call(json) {
        return json.content.find((msg) => msg.type === "tool_use");
      }
      /**
       * Retrieves the input content of a tool call.
       * @param {Object} tool_call - The tool call object from which to extract the input.
       * @returns {Object} The input of the tool call.
       */
      get_tool_call_content(tool_call) {
        return tool_call.input;
      }
      /**
       * Retrieves the name of the tool from a tool call object.
       * @param {Object} tool_call - The tool call object from which to extract the name.
       * @returns {string} The name of the tool.
       */
      get_tool_name(tool_call) {
        return tool_call.name;
      }
      /**
       * Extracts the first message from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the message.
       * @returns {Object|null} The first message found, or null if none exist.
       */
      get_message(json) {
        var _a;
        return (_a = json.content) == null ? void 0 : _a[0];
      }
      /**
       * Retrieves the content of the first message from the JSON response.
       * @param {Object} json - The JSON response from which to extract the message content.
       * @returns {string|null} The content of the first message, or null if no message is found.
       */
      get_message_content(json) {
        var _a, _b;
        return (_b = this.get_message(json)) == null ? void 0 : _b[(_a = this.get_message(json)) == null ? void 0 : _a.type];
      }
    };
    exports.AnthropicAdapter = AnthropicAdapter;
    function chatml_to_anthropic(opts) {
      let tool_counter = 0;
      const messages = opts.messages.filter((msg) => msg.role !== "system").map((m) => {
        if (m.role === "tool") {
          return { role: "user", content: [
            {
              type: "tool_result",
              tool_use_id: `tool-${tool_counter}`,
              content: m.content
            }
          ] };
        }
        if (m.role === "assistant" && m.tool_calls) {
          tool_counter++;
          const out2 = {
            role: m.role,
            content: m.tool_calls.map((c) => ({
              type: "tool_use",
              id: `tool-${tool_counter}`,
              name: c.function.name,
              input: typeof c.function.arguments === "string" ? JSON.parse(c.function.arguments) : c.function.arguments
            }))
          };
          if (m.content) {
            if (typeof m.content === "string")
              out2.content.push({ type: "text", text: m.content });
            else
              m.content.forEach((c) => out2.content.push(c));
          }
          return out2;
        }
        if (typeof m.content === "string")
          return { role: m.role, content: m.content };
        if (Array.isArray(m.content)) {
          const content = m.content.map((c) => {
            if (c.type === "text")
              return { type: "text", text: c.text };
            if (c.type === "image_url") {
              const image_url = c.image_url.url;
              let media_type = image_url.split(":")[1].split(";")[0];
              if (media_type === "image/jpg")
                media_type = "image/jpeg";
              return { type: "image", source: { type: "base64", media_type, data: image_url.split(",")[1] } };
            }
          });
          return { role: m.role, content };
        }
        return m;
      });
      const { model, max_tokens, temperature, tools, tool_choice } = opts;
      const last_system_idx = opts.messages.findLastIndex((msg) => msg.role === "system" && msg.content.includes("---BEGIN"));
      if (last_system_idx > -1) {
        const system_prompt = "<context>\n" + opts.messages[last_system_idx].content + "\n</context>\n";
        messages[messages.length - 1].content = system_prompt + messages[messages.length - 1].content;
      }
      console.log(messages);
      const out = {
        messages,
        model,
        max_tokens,
        temperature
      };
      if (tools) {
        out.tools = tools.map((tool) => ({
          name: tool.function.name,
          description: tool.function.description,
          input_schema: tool.function.parameters
        }));
        if ((tool_choice == null ? void 0 : tool_choice.type) === "function") {
          const tool_prompt = `Use the "${tool_choice.function.name}" tool!`;
          const last_user_idx = out.messages.findLastIndex((msg) => msg.role === "user");
          out.messages[last_user_idx].content += "\n" + tool_prompt;
          out.system = `Required: use the "${tool_choice.function.name}" tool!`;
        }
      }
      const last_non_context_system_idx = opts.messages.findLastIndex((msg) => msg.role === "system" && !msg.content.includes("---BEGIN"));
      if (last_non_context_system_idx > -1)
        out.system = opts.messages[last_non_context_system_idx].content;
      return out;
    }
    exports.chatml_to_anthropic = chatml_to_anthropic;
  }
});

// ../jsbrains/smart-chat-model/adapters/cohere.js
var require_cohere = __commonJS({
  "../jsbrains/smart-chat-model/adapters/cohere.js"(exports) {
    var CohereAdapter = class {
      /**
       * Converts a ChatML object to a format suitable for a request to the Cohere API.
       * @param {Object} chatml - The ChatML object containing the chat history and other parameters.
       * @returns {Object} The request body formatted for the Cohere API.
       */
      prepare_request_body(chatml) {
        return chatml_to_cohere(chatml);
      }
      /**
       * Extracts the message content from a JSON response from the Cohere API.
       * @param {Object} json - The JSON response object from which to extract the text content.
       * @returns {string} The extracted text content from the response.
       */
      get_message_content(json) {
        return json.text;
      }
      /**
       * Processes streaming data received from the Cohere API and extracts text chunks.
       * This method handles the accumulation of text data over multiple events and manages the state of the stream.
       * @param {Object} event - The event object containing streaming data.
       * @returns {string} The accumulated text chunk extracted from the stream.
       */
      get_text_chunk_from_stream(event) {
        if (!this.last_line_index)
          this.last_line_index = 0;
        clearTimeout(this.last_line_timeout);
        this.last_line_timeout = setTimeout(() => {
          this.last_line_index = 0;
        }, 1e4);
        const data = event.source.xhr.responseText;
        const lines = data.split("\n").slice(this.last_line_index);
        console.log(lines);
        this.last_line_index += lines.length;
        const text_chunk = lines.filter((line) => line.trim() !== "").map((line) => {
          console.log(line);
          const json = JSON.parse(line);
          if (json.event_type === "stream-end") {
            console.log("stream-end");
            this.end_of_stream = true;
            setTimeout(() => {
              this.end_of_stream = false;
            }, 3e3);
            return "";
          }
          return json.text;
        }).join("");
        console.log(text_chunk);
        return text_chunk;
      }
      /**
       * Determines if the end of the stream has been reached based on the event data.
       * @param {Object} event - The event object that may indicate the end of the stream.
       * @returns {boolean} True if the end of the stream is indicated, false otherwise.
       */
      is_end_of_stream(event) {
        return this.end_of_stream;
      }
    };
    exports.CohereAdapter = CohereAdapter;
    function chatml_to_cohere(chatml) {
      const cohere = {
        model: chatml.model,
        // skip last user message
        chat_history: chatml.messages.slice(0, -1).map((message) => ({
          role: message.role,
          message: parse_message_content_to_string(message)
        })),
        message: parse_message_content_to_string(chatml.messages[chatml.messages.length - 1]),
        temperature: chatml.temperature
        // stream: chatml.stream // currently not supported
      };
      return cohere;
    }
    exports.chatml_to_cohere = chatml_to_cohere;
    function parse_message_content_to_string(message) {
      return Array.isArray(message.content) ? message.content.filter((c) => c.type === "text").map((c) => c.text).join("\n") : message.content;
    }
  }
});

// ../jsbrains/smart-chat-model/adapters/gemini.js
var require_gemini = __commonJS({
  "../jsbrains/smart-chat-model/adapters/gemini.js"(exports) {
    var GeminiAdapter = class {
      /**
       * Constructs a GeminiAdapter instance with a specified model configuration.
       * @param {Object} model - The model configuration object.
       */
      constructor(model) {
        this.model = model;
      }
      /**
       * Prepares the request body for the Gemini API by converting ChatML format to a format compatible with Gemini.
       * @param {Object} body - The options object containing messages and other parameters in ChatML format.
       * @returns {Object} The request body formatted for the Gemini API.
       */
      prepare_request_body(body) {
        return chatml_to_gemini(body);
      }
      /**
       * Extracts the first tool call from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the tool call.
       * @returns {Object|null} The first tool call found, or null if none exist.
       */
      get_tool_call(json) {
        var _a, _b, _c, _d, _e;
        return (_e = (_d = (_c = (_b = (_a = json.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts) == null ? void 0 : _d[0]) == null ? void 0 : _e.functionCall;
      }
      /**
       * Retrieves the name of the tool from a tool call object.
       * @param {Object} tool_call - The tool call object from which to extract the name.
       * @returns {string|null} The name of the tool, or null if not available.
       */
      get_tool_name(tool_call) {
        return tool_call == null ? void 0 : tool_call.name;
      }
      /**
       * Retrieves the input content of a tool call.
       * @param {Object} tool_call - The tool call object from which to extract the input.
       * @returns {Object|null} The input of the tool call, or null if not available.
       */
      get_tool_call_content(tool_call) {
        return tool_call == null ? void 0 : tool_call.args;
      }
      /**
       * Extracts the first message from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the message.
       * @returns {Object|null} The first message found, or null if none exist.
       */
      get_message(json) {
        var _a;
        return (_a = json.candidates) == null ? void 0 : _a[0];
      }
      /**
       * Retrieves the content of the first message from the JSON response.
       * @param {Object} json - The JSON response from which to extract the message content.
       * @returns {string|null} The content of the first message, or null if no message is found.
       */
      get_message_content(json) {
        var _a, _b;
        return (_b = (_a = this.get_message(json)) == null ? void 0 : _a.content) == null ? void 0 : _b.parts.map((part) => part.text).join("");
      }
      /**
       * Handles escaped newlines in a streaming text chunk.
       * @param {Object} event - The streaming event containing the data.
       * @returns {string} The text chunk with escaped newlines replaced.
       */
      get_text_chunk_from_stream(event) {
        return event.data.replace(/\\n/g, "\n");
      }
      /**
       * Determines if the streaming response has ended based on the readyState of the XMLHttpRequest.
       * @param {Object} event - The streaming event.
       * @returns {boolean} True if the stream has ended, false otherwise.
       */
      is_end_of_stream(event) {
        return event.source.xhr.readyState === 4;
      }
      /**
       * Counts the tokens in the input by making an API request to the Gemini token counting endpoint.
       * @param {string|Object} input - The input text or object to count tokens in.
       * @returns {Promise<number>} The total number of tokens in the input.
       */
      async count_tokens(input) {
        var _a;
        const req = {
          url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:countTokens?key=${this.model.api_key}`,
          method: "POST",
          headers: { "Content-Type": "application/json" }
        };
        let body;
        if (typeof input === "string")
          body = chatml_to_gemini({ messages: [{ role: "user", content: input }] });
        else if (Array.isArray(input))
          body = chatml_to_gemini({ messages: input });
        else if (typeof input === "object")
          body = chatml_to_gemini(input);
        else
          return console.error("Invalid input for count_tokens", input);
        delete body.generationConfig;
        delete body.safetySettings;
        req.body = JSON.stringify(body);
        const resp = await this.model.request_adapter(req);
        return (_a = resp == null ? void 0 : resp.json) == null ? void 0 : _a.totalTokens;
      }
      /**
       * Getter for the standard API endpoint with the API key appended.
       * @returns {string} The formatted endpoint URL for non-streaming requests.
       */
      get endpoint() {
        return this.model.config.endpoint.replace("MODEL_NAME", this.model.model_name) + "?key=" + this.model.api_key;
      }
      /**
       * Getter for the streaming API endpoint with the API key appended.
       * @returns {string} The formatted endpoint URL for streaming requests.
       */
      get endpoint_streaming() {
        return this.model.config.endpoint_streaming.replace("MODEL_NAME", this.model.model_name) + "?key=" + this.model.api_key;
      }
    };
    exports.GeminiAdapter = GeminiAdapter;
    function chatml_to_gemini(opts) {
      const messages = opts.messages.filter((msg) => msg.role !== "system");
      const last_system_idx = opts.messages.findLastIndex((msg) => msg.role === "system" && msg.content.includes("---BEGIN"));
      if (last_system_idx > -1) {
        const system_prompt = "---BEGIN IMPORTANT CONTEXT---\n" + opts.messages[last_system_idx].content + "\n---END IMPORTANT CONTEXT---\n\n";
        messages[messages.length - 1].content = system_prompt + messages[messages.length - 1].content;
      }
      const body = {
        contents: messages.filter((msg) => msg.role !== "system").map((msg) => {
          const content = {};
          content.role = msg.role === "assistant" ? "model" : msg.role;
          content.parts = !Array.isArray(msg.content) ? [{ text: msg.content }] : msg.content.map((c) => {
            if (c.type === "text") {
              return { text: c.text };
            }
            if (c.type === "image_url") {
              const image_url = c.image_url.url;
              let mime_type = image_url.split(":")[1].split(";")[0];
              if (mime_type === "image/jpg")
                mime_type = "image/jpeg";
              return { inline_data: { mime_type, data: image_url.split(",")[1] } };
            }
          });
          return content;
          ({
            role: msg.role === "assistant" ? "model" : msg.role,
            parts: Array.isArray(msg.content) ? [{ text: msg.content.filter((c) => c.type === "text").map((c) => c.text).join("\n") }] : [{ text: msg.content }]
          });
        }),
        generationConfig: {
          temperature: opts.temperature || 0.9,
          topK: opts.topK || 1,
          topP: opts.topP || 1,
          maxOutputTokens: opts.max_tokens || 2048,
          stopSequences: opts.stopSequences || [],
          candidate_count: opts.n || 1
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      };
      const system_instructions = opts.messages.filter((msg) => msg.role === "system" && !msg.content.includes("---BEGIN"));
      if (system_instructions.length > 0)
        body.systemInstruction = { parts: system_instructions.map((msg) => ({ text: msg.content })) };
      if (opts.tools) {
        body.tools = [{
          function_declarations: opts.tools.map((tool) => ({
            name: tool.function.name,
            description: tool.function.description,
            parameters: tool.function.parameters
          }))
        }];
        if (opts.tool_choice) {
          if (opts.tool_choice !== "auto") {
            if (opts.model.includes("1.5") || opts.model.includes("flash")) {
              body.tool_config = {
                function_calling_config: {
                  mode: "ANY",
                  allowed_function_names: opts.tools.map((tool) => tool.function.name)
                }
              };
              body.systemInstruction = {
                role: "user",
                parts: [
                  {
                    text: `IMPORTANT: You must use the "${body.tools[0].function_declarations[0].name}" function tool!`
                  }
                ]
              };
            }
            const tool_prompt = `IMPORTANT: You must use the "${body.tools[0].function_declarations[0].name}" function tool!`;
            const last_user_idx = body.contents.findLastIndex((msg) => msg.role === "user");
            body.contents[last_user_idx].parts[0].text += "\n\n" + tool_prompt;
          }
        }
      }
      return body;
    }
    exports.chatml_to_gemini = chatml_to_gemini;
  }
});

// ../jsbrains/smart-chat-model/adapters/open_router.js
var require_open_router = __commonJS({
  "../jsbrains/smart-chat-model/adapters/open_router.js"(exports) {
    var OpenRouterAdapter = class {
      constructor(model) {
        this.model = model;
      }
      get_tool_call(json) {
        if (json.choices[0].message.tool_calls) {
          return json.choices[0].message.tool_calls[0].function;
        }
        if (json.choices[0].message.content.includes("function")) {
          const content = JSON.parse(json.choices[0].message.content);
          if (!content.function)
            return null;
          return content;
        }
        return null;
      }
      get_tool_name(tool_call) {
        if (tool_call.function)
          return tool_call.function;
        if (tool_call.name)
          return tool_call.name;
        return null;
      }
      get_tool_call_content(tool_call) {
        if (tool_call.parameters)
          return tool_call.parameters;
        if (tool_call.arguments) {
          const args = JSON.parse(tool_call.arguments);
          Object.entries(args).forEach(([key, value]) => {
            args[key] = value.replace(/\\n/g, "\n").replace(/\\t/g, "	").replace(/\\r/g, "\r").replace(/\\'/g, "'").replace(/\\"/g, '"');
          });
          return args;
        }
        return null;
      }
    };
    exports.OpenRouterAdapter = OpenRouterAdapter;
  }
});

// ../jsbrains/smart-chat-model/adapters.js
var require_adapters = __commonJS({
  "../jsbrains/smart-chat-model/adapters.js"(exports) {
    var { AnthropicAdapter } = require_anthropic();
    var { CohereAdapter } = require_cohere();
    var { GeminiAdapter } = require_gemini();
    var { OpenRouterAdapter } = require_open_router();
    exports.Anthropic = AnthropicAdapter;
    exports.Cohere = CohereAdapter;
    exports.Gemini = GeminiAdapter;
    exports.OpenRouter = OpenRouterAdapter;
  }
});

// ../jsbrains/smart-chat-model/platforms.json
var require_platforms = __commonJS({
  "../jsbrains/smart-chat-model/platforms.json"(exports, module2) {
    module2.exports = {
      openai: {
        description: "OpenAI",
        type: "API",
        endpoint: "https://api.openai.com/v1/chat/completions",
        streaming: true,
        actions: true,
        fetch_models: true,
        default_model: "gpt-3.5-turbo",
        signup_url: "https://platform.openai.com/api-keys"
      },
      google_gemini: {
        description: "Google Gemini",
        type: "API",
        api_key_header: "none",
        endpoint: "https://generativelanguage.googleapis.com/v1beta/models/MODEL_NAME:generateContent",
        endpoint_streaming: "https://generativelanguage.googleapis.com/v1beta/models/MODEL_NAME:streamGenerateContent",
        streaming: true,
        actions: true,
        adapter: "Gemini",
        fetch_models: true,
        default_model: "gemini-1.5-pro",
        signup_url: "https://ai.google.dev/"
      },
      open_router: {
        description: "Open Router",
        type: "API",
        endpoint: "https://openrouter.ai/api/v1/chat/completions",
        streaming: true,
        adapter: "OpenRouter",
        fetch_models: true,
        default_model: "mistralai/mistral-7b-instruct:free",
        signup_url: "https://accounts.openrouter.ai/sign-up?redirect_url=https%3A%2F%2Fopenrouter.ai%2Fkeys"
      },
      cohere: {
        description: "Cohere Command-R",
        type: "API",
        endpoint: "https://api.cohere.ai/v1/chat",
        streaming: false,
        adapter: "Cohere",
        fetch_models: true,
        default_model: "command-r",
        signup_url: "https://dashboard.cohere.com/welcome/register?redirect_uri=%2Fapi-keys"
      },
      anthropic: {
        description: "Anthropic Claude",
        type: "API",
        endpoint: "https://api.anthropic.com/v1/messages",
        streaming: false,
        api_key_header: "x-api-key",
        headers: {
          "anthropic-version": "2023-06-01",
          "anthropic-beta": "tools-2024-04-04"
        },
        adapter: "Anthropic",
        actions: true,
        fetch_models: true,
        default_model: "claude-3-sonnet-20240229",
        signup_url: "https://console.anthropic.com/login?returnTo=%2Fsettings%2Fkeys"
      },
      custom_local: {
        description: "Custom Local (OpenAI format)",
        type: "API"
      },
      custom_api: {
        description: "Custom API (OpenAI format)",
        type: "API"
      }
    };
  }
});

// ../jsbrains/smart-chat-model/utils/is_valid_tool_call.js
var require_is_valid_tool_call = __commonJS({
  "../jsbrains/smart-chat-model/utils/is_valid_tool_call.js"(exports) {
    function is_valid_tool_call(tool, tool_call_content) {
      var _a;
      const props = tool.function.parameters.properties;
      if (typeof props !== "undefined" && Object.keys(tool_call_content).length === 0) {
        console.warn(`Invalid tool call: object is empty`);
        return false;
      }
      Object.entries(tool_call_content).forEach(([key, value]) => {
        if (!props[key]) {
          console.warn(`Invalid tool call: missing key ${key} in tool spec`, props);
          return false;
        }
        if (Array.isArray(value) && props[key].type === "array") {
          const itemType = typeof value[0];
          if (!value.every((item) => typeof item === itemType)) {
            console.warn(`Invalid tool call: array items are not of the same type`);
            return false;
          }
          if (props[key].items.type !== itemType) {
            console.warn(`Invalid tool call: array items are not of the same type as the spec`);
            return false;
          }
        } else if (props[key].type !== typeof value) {
          if (props[key].type === "number" && typeof value === "string") {
            if (isNaN(Number(value))) {
              console.warn(`Invalid tool call: value ${value} is not a valid number`);
              return false;
            }
            tool_call_content[key] = Number(value);
          } else {
            console.warn(`Invalid tool call: value ${value} is not of type ${props[key].type}`);
            return false;
          }
        }
        if (props[key].enum && !props[key].enum.includes(value)) {
          console.warn(`Invalid tool call: value ${value} is not in enum ${props[key].enum}`);
          return false;
        }
      });
      (_a = tool.function.parameters.required) == null ? void 0 : _a.forEach((key) => {
        if (typeof tool_call_content[key] === "undefined") {
          console.warn(`Invalid tool call: missing required key ${key}`);
          return false;
        }
        if (tool_call_content[key] === "") {
          console.warn(`Empty value for required key ${key}`);
          return false;
        }
      });
      return true;
    }
    exports.is_valid_tool_call = is_valid_tool_call;
  }
});

// ../jsbrains/smart-chat-model/streamer.js
var require_streamer = __commonJS({
  "../jsbrains/smart-chat-model/streamer.js"(exports) {
    var _setReadyState, setReadyState_fn, _onStreamFailure, onStreamFailure_fn, _onStreamAbort, onStreamAbort_fn, _onStreamProgress, onStreamProgress_fn, _onStreamLoaded, onStreamLoaded_fn, _parseEventChunk, parseEventChunk_fn, _checkStreamClosed, checkStreamClosed_fn;
    var SmartStreamer = class {
      constructor(url, options = {}) {
        // private methods
        __privateAdd(this, _setReadyState);
        __privateAdd(this, _onStreamFailure);
        __privateAdd(this, _onStreamAbort);
        __privateAdd(this, _onStreamProgress);
        __privateAdd(this, _onStreamLoaded);
        __privateAdd(this, _parseEventChunk);
        __privateAdd(this, _checkStreamClosed);
        const {
          method = "GET",
          headers = {},
          body = null,
          withCredentials = false
        } = options;
        this.url = url;
        this.method = method;
        this.headers = headers;
        this.body = body;
        this.withCredentials = withCredentials;
        this.listeners = {};
        this.readyState = this.CONNECTING;
        this.progress = 0;
        this.chunk = "";
        this.last_event_id = "";
        this.xhr = null;
        this.FIELD_SEPARATOR = ":";
        this.INITIALIZING = -1;
        this.CONNECTING = 0;
        this.OPEN = 1;
        this.CLOSED = 2;
      }
      /**
       * Adds an event listener for the specified event type.
       *
       * @param {string} type - The type of the event.
       * @param {Function} listener - The listener function to be called when the event is triggered.
       */
      addEventListener(type, listener) {
        if (!this.listeners[type])
          this.listeners[type] = [];
        if (!this.listeners[type].includes(listener))
          this.listeners[type].push(listener);
      }
      /**
       * Removes an event listener from the SmartStreamer instance.
       *
       * @param {string} type - The type of event to remove the listener from.
       * @param {Function} listener - The listener function to remove.
       */
      removeEventListener(type, listener) {
        if (!this.listeners[type])
          return;
        this.listeners[type] = this.listeners[type].filter((callback) => callback !== listener);
        if (this.listeners[type].length === 0)
          delete this.listeners[type];
      }
      /**
       * Dispatches an event to the appropriate event handlers.
       *
       * @param {Event} event - The event to be dispatched.
       * @returns {boolean} - Returns true if the event was successfully dispatched, false otherwise.
       */
      dispatchEvent(event) {
        if (!event)
          return true;
        event.source = this;
        const onHandler = "on" + event.type;
        if (Object.prototype.hasOwnProperty.call(this, onHandler)) {
          this[onHandler].call(this, event);
          if (event.defaultPrevented)
            return false;
        }
        if (this.listeners[event.type]) {
          this.listeners[event.type].forEach((callback) => {
            callback(event);
            return !event.defaultPrevented;
          });
        }
        return true;
      }
      /**
       * Initiates the streaming process.
       */
      stream() {
        __privateMethod(this, _setReadyState, setReadyState_fn).call(this, this.CONNECTING);
        this.xhr = new XMLHttpRequest();
        this.xhr.addEventListener("progress", __privateMethod(this, _onStreamProgress, onStreamProgress_fn).bind(this));
        this.xhr.addEventListener("load", __privateMethod(this, _onStreamLoaded, onStreamLoaded_fn).bind(this));
        this.xhr.addEventListener("readystatechange", __privateMethod(this, _checkStreamClosed, checkStreamClosed_fn).bind(this));
        this.xhr.addEventListener("error", __privateMethod(this, _onStreamFailure, onStreamFailure_fn).bind(this));
        this.xhr.addEventListener("abort", __privateMethod(this, _onStreamAbort, onStreamAbort_fn).bind(this));
        this.xhr.open(this.method, this.url);
        for (const header in this.headers) {
          this.xhr.setRequestHeader(header, this.headers[header]);
        }
        if (this.last_event_id)
          this.xhr.setRequestHeader("Last-Event-ID", this.last_event_id);
        this.xhr.withCredentials = this.withCredentials;
        this.xhr.send(this.body);
      }
      /**
       * Ends the streamer connection.
       * Aborts the current XHR request and sets the ready state to CLOSED.
       */
      end() {
        if (this.readyState === this.CLOSED)
          return;
        this.xhr.abort();
        this.xhr = null;
        __privateMethod(this, _setReadyState, setReadyState_fn).call(this, this.CLOSED);
      }
    };
    _setReadyState = new WeakSet();
    setReadyState_fn = function(state) {
      const event = new CustomEvent("readyStateChange");
      event.readyState = state;
      this.readyState = state;
      this.dispatchEvent(event);
    };
    _onStreamFailure = new WeakSet();
    onStreamFailure_fn = function(e) {
      const event = new CustomEvent("error");
      event.data = e.currentTarget.response;
      this.dispatchEvent(event);
      this.end();
    };
    _onStreamAbort = new WeakSet();
    onStreamAbort_fn = function(e) {
      const event = new CustomEvent("abort");
      this.end();
    };
    _onStreamProgress = new WeakSet();
    onStreamProgress_fn = function(e) {
      if (!this.xhr)
        return;
      if (this.xhr.status !== 200) {
        __privateMethod(this, _onStreamFailure, onStreamFailure_fn).call(this, e);
        return;
      }
      if (this.readyState === this.CONNECTING) {
        this.dispatchEvent(new CustomEvent("open"));
        __privateMethod(this, _setReadyState, setReadyState_fn).call(this, this.OPEN);
      }
      const data = this.xhr.responseText.substring(this.progress);
      this.progress += data.length;
      data.split(/(\r\n|\r|\n)/g).forEach((part) => {
        if (part.trim().length === 0) {
          this.dispatchEvent(__privateMethod(this, _parseEventChunk, parseEventChunk_fn).call(this, this.chunk.trim()));
          this.chunk = "";
        } else {
          this.chunk += part;
        }
      });
    };
    _onStreamLoaded = new WeakSet();
    onStreamLoaded_fn = function(e) {
      __privateMethod(this, _onStreamProgress, onStreamProgress_fn).call(this, e);
      this.dispatchEvent(__privateMethod(this, _parseEventChunk, parseEventChunk_fn).call(this, this.chunk));
      this.chunk = "";
    };
    _parseEventChunk = new WeakSet();
    parseEventChunk_fn = function(chunk) {
      if (!chunk || chunk.length === 0)
        return null;
      const e = { id: null, retry: null, data: "", event: "message", text: "" };
      chunk.split(/(\r\n|\r|\n)/).forEach((line) => {
        line = line.trim();
        const index = line.indexOf(this.FIELD_SEPARATOR);
        if (index <= 0)
          return;
        const field = line.substring(0, index).replace(/^"|"$/g, "");
        if (!["id", "retry", "data", "event", "text"].includes(field))
          return;
        const value = line.substring(index + 1).trim().replace(/^"|"$/g, "");
        e.data += value;
      });
      if (e.id)
        this.last_event_id = e.id;
      const event = new CustomEvent(e.event || "message");
      event.id = e.id;
      event.data = e.data || "";
      event.last_event_id = this.last_event_id;
      return event;
    };
    _checkStreamClosed = new WeakSet();
    checkStreamClosed_fn = function() {
      if (!this.xhr)
        return;
      if (this.xhr.readyState === XMLHttpRequest.DONE)
        __privateMethod(this, _setReadyState, setReadyState_fn).call(this, this.CLOSED);
    };
    exports.SmartStreamer = SmartStreamer;
  }
});

// ../jsbrains/smart-chat-model/models/open_router.js
var require_open_router2 = __commonJS({
  "../jsbrains/smart-chat-model/models/open_router.js"(exports) {
    async function fetch_open_router_models(api_key, request_adapter = null) {
      try {
        let data;
        if (!request_adapter) {
          const response = await fetch("https://openrouter.ai/api/v1/models");
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          const resp = await request_adapter({
            url: "https://openrouter.ai/api/v1/models"
          });
          data = await resp.json;
        }
        return data.data.map((model) => ({
          model_name: model.id,
          key: model.id,
          max_input_tokens: model.context_length,
          description: model.name,
          actions: model.description.includes("tool use") || model.description.includes("function call"),
          multimodal: model.architecture.modality === "multimodal",
          raw: model
        }));
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports.fetch_open_router_models = fetch_open_router_models;
  }
});

// ../jsbrains/smart-chat-model/models/openai.js
var require_openai = __commonJS({
  "../jsbrains/smart-chat-model/models/openai.js"(exports) {
    var model_context = {
      "gpt-3.5-turbo-0125": {
        "context": 16385,
        "max_out": 4096
      },
      "gpt-3.5-turbo-0301": {
        "context": 4097,
        "max_out": 4097
      },
      "gpt-3.5-turbo-0613": {
        "context": 4097,
        "max_out": 4097
      },
      "gpt-3.5-turbo-1106": {
        "context": 16385,
        "max_out": 4096
      },
      "gpt-3.5-turbo-16k": {
        "context": 16385,
        "max_out": 16385
      },
      "gpt-3.5-turbo-16k-0613": {
        "context": 16385,
        "max_out": 16385
      },
      "gpt-4-0125-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-0314": {
        "context": 8192,
        "max_out": 8192
      },
      "gpt-4-0613": {
        "context": 8192,
        "max_out": 8192
      },
      "gpt-4-1106-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-1106-vision-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-32k-0314": {
        "context": 32768,
        "max_out": 32768
      },
      "gpt-4-32k-0613": {
        "context": 32768,
        "max_out": 32768
      },
      "gpt-4-turbo-2024-04-09": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-turbo-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-vision-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-3.5-turbo": {
        "context": 16385,
        "max_out": 4096
      },
      "gpt-4-turbo": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-32k": {
        "context": 32768,
        "max_out": 32768
      },
      "gpt-4o": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4": {
        "context": 8192,
        "max_out": 8192
      }
    };
    async function fetch_openai_models(api_key, request_adapter = null) {
      if (!api_key) {
        console.error("No API key provided");
        return [];
      }
      try {
        let data;
        if (!request_adapter) {
          console.log("Using fetch");
          const response = await fetch("https://api.openai.com/v1/models", {
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          console.log("Using request adapter");
          const resp = await request_adapter({
            url: "https://api.openai.com/v1/models",
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          data = await resp.json;
        }
        return data.data.filter((model) => model.id.startsWith("gpt-") && !model.id.includes("-instruct")).map((model) => {
          const out = {
            model_name: model.id,
            key: model.id,
            multimodal: model.id.includes("vision") || model.id.includes("gpt-4-turbo") || model.id.startsWith("gpt-4o")
          };
          const m = Object.entries(model_context).find((m2) => m2[0] === model.id || model.id.startsWith(m2[0] + "-"));
          if (m) {
            out.max_input_tokens = m[1].context;
            out.description = `context: ${m[1].context}, output: ${m[1].max_out}`;
          }
          return out;
        });
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports.fetch_openai_models = fetch_openai_models;
  }
});

// ../jsbrains/smart-chat-model/models/google_gemini.js
var require_google_gemini = __commonJS({
  "../jsbrains/smart-chat-model/models/google_gemini.js"(exports) {
    async function fetch_google_gemini_models(api_key, request_adapter = null) {
      if (!api_key) {
        console.error("No API key provided");
        return [];
      }
      try {
        let data;
        if (!request_adapter) {
          const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models?key=" + api_key);
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          const resp = await request_adapter({
            url: "https://generativelanguage.googleapis.com/v1beta/models?key=" + api_key
          });
          console.log(JSON.stringify(resp));
          data = await resp.json;
        }
        return data.models.filter((model) => model.name.startsWith("models/gemini")).map((model) => {
          const out = {
            model_name: model.name.split("/").pop(),
            key: model.name.split("/").pop(),
            max_input_tokens: model.inputTokenLimit,
            max_output_tokens: model.maxOutputTokens,
            description: model.description,
            multimodal: model.name.includes("vision") || model.description.includes("multimodal"),
            raw: model
          };
          return out;
        });
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports.fetch_google_gemini_models = fetch_google_gemini_models;
  }
});

// ../jsbrains/smart-chat-model/models/cohere.js
var require_cohere2 = __commonJS({
  "../jsbrains/smart-chat-model/models/cohere.js"(exports) {
    async function fetch_cohere_models(api_key, request_adapter = null) {
      if (!api_key) {
        console.error("No API key provided");
        return [];
      }
      try {
        let data;
        if (!request_adapter) {
          const response = await fetch("https://api.cohere.ai/v1/models", {
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          const resp = await request_adapter({
            url: "https://api.cohere.ai/v1/models",
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          data = await resp.json;
        }
        console.log("Model data retrieved:", data);
        return data.models.filter((model) => model.name.startsWith("command-")).map((model) => {
          const out = {
            model_name: model.name,
            key: model.name,
            max_input_tokens: model.context_length,
            tokenizer_url: model.tokenizer_url,
            finetuned: model.finetuned,
            description: `Max input tokens: ${model.context_length}, Finetuned: ${model.finetuned}`
          };
          return out;
        });
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports.fetch_cohere_models = fetch_cohere_models;
  }
});

// ../jsbrains/smart-chat-model/models/anthropic.js
var require_anthropic2 = __commonJS({
  "../jsbrains/smart-chat-model/models/anthropic.js"(exports) {
    async function fetch_anthropic_models() {
      return [
        {
          "key": "claude-3-opus-20240229",
          "model_name": "claude-3-opus-20240229",
          "description": "Anthropic's Claude Opus",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        },
        {
          key: "claude-3-5-sonnet-20240620",
          "model_name": "claude-3.5-sonnet-20240620",
          "description": "Anthropic's Claude Sonnet",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        },
        {
          key: "claude-3-haiku-20240307",
          "model_name": "claude-3-haiku-20240307",
          "description": "Anthropic's Claude Haiku",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        },
        {
          key: "claude-3-sonnet-20240229",
          "model_name": "claude-3-sonnet-20240229",
          "description": "Anthropic's Claude Sonnet",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        }
      ];
    }
    exports.fetch_anthropic_models = fetch_anthropic_models;
  }
});

// ../jsbrains/smart-chat-model/models/fetch.js
var require_fetch = __commonJS({
  "../jsbrains/smart-chat-model/models/fetch.js"(exports) {
    var { fetch_open_router_models } = require_open_router2();
    var { fetch_openai_models } = require_openai();
    var { fetch_google_gemini_models } = require_google_gemini();
    var { fetch_cohere_models } = require_cohere2();
    var { fetch_anthropic_models } = require_anthropic2();
    exports.open_router = fetch_open_router_models;
    exports.openai = fetch_openai_models;
    exports.google_gemini = fetch_google_gemini_models;
    exports.cohere = fetch_cohere_models;
    exports.anthropic = fetch_anthropic_models;
  }
});

// ../jsbrains/smart-chat-model/smart_chat_model.js
var require_smart_chat_model = __commonJS({
  "../jsbrains/smart-chat-model/smart_chat_model.js"(exports) {
    var adapters = require_adapters();
    var platforms = require_platforms();
    var { is_valid_tool_call } = require_is_valid_tool_call();
    var { SmartStreamer } = require_streamer();
    var fetch_models = require_fetch();
    var SmartChatModel2 = class {
      /**
       * Constructs an instance of SmartChatModel with specified environment, model key, and options.
       * @param {Object} main - The main environment context, typically containing configurations and state.
       * @param {string} platform_key - Key to select the specific model configuration from models.json.
       * @param {Object} model_config - Optional parameters to override model configurations.
       */
      constructor(main, platform_key, model_config = {}) {
        this.env = main;
        this.main = this.env;
        this.config = {
          ...platforms[platform_key] || {},
          ...model_config
          // override default platform config
        };
        console.log(JSON.stringify(this.config));
        this.platform_key = platform_key;
        this.active_stream = null;
        this._request_adapter = null;
        this.platforms = platforms;
        if (this.config.adapter)
          this.adapter = new adapters[this.config.adapter](this);
        if (this.adapter)
          console.log("has chat model adapter");
      }
      static get models() {
        return platforms;
      }
      // DEPRECATED (confusing name)
      // 
      static get platforms() {
        return Object.keys(platforms).map((key) => ({
          key,
          ...platforms[key]
        }));
      }
      get platform() {
        return platforms[this.platform_key];
      }
      get default_opts() {
        return {
          temperature: 0.3,
          top_p: 1,
          presence_penalty: 0,
          frequency_penalty: 0,
          n: 1,
          model: this.model_name,
          max_tokens: this.max_output_tokens
        };
      }
      async request_middlewares(opts) {
        return opts;
      }
      /**
       * Completes the chat interaction by processing the provided options, making an API request, and handling the response.
       * This method supports both streaming and non-streaming responses, and can handle tool calls if specified in the response.
       *
       * @param {Object} opts - The options for the chat completion which may include settings like temperature, max tokens, etc.
       * @param {boolean} render - Flag to determine if the response should be rendered in the UI.
       * @returns {Promise<string|void>} - Returns the chat response content or handles tool outputs recursively. In case of errors, it may return an error message.
       */
      async complete(opts = {}, render = true) {
        const prepared_opts = await this.prepare_options(opts);
        const request = this.create_request(prepared_opts);
        try {
          if (prepared_opts.stream) {
            return await this.handle_streaming_request(request, render);
          }
          return await this.handle_non_streaming_request(request, prepared_opts, render);
        } catch (err) {
          return this.handle_error(err, render);
        }
      }
      async prepare_options(opts) {
        var _a, _b, _c;
        if (!this.base_model_config) {
          this.base_model_config = await this.get_base_model_config();
          this.config = {
            ...this.base_model_config,
            ...this.config
          };
        }
        const prepared_opts = {
          ...this.default_opts,
          messages: ((_b = await ((_a = this.current) == null ? void 0 : _a.get_chat_ml())) == null ? void 0 : _b.messages) || [],
          ...opts
        };
        if (prepared_opts.stream !== false && this.config.streaming && !((_c = this.current) == null ? void 0 : _c.tool_choice)) {
          prepared_opts.stream = true;
        } else {
          prepared_opts.stream = false;
        }
        return this.request_middlewares(JSON.parse(JSON.stringify(prepared_opts)));
      }
      create_request(opts) {
        var _a, _b;
        const req = {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.api_key}`
          },
          method: "POST"
        };
        if (this.config.headers) {
          req.headers = { ...req.headers, ...this.config.headers };
        }
        if (this.config.api_key_header) {
          if (this.config.api_key_header !== "none") {
            req.headers[this.config.api_key_header] = this.api_key;
          }
          delete req.headers.Authorization;
        }
        const body = typeof ((_a = this.env.actions) == null ? void 0 : _a.prepare_request_body) === "function" ? this.env.actions.prepare_request_body(opts) : { ...opts };
        req.body = JSON.stringify(typeof ((_b = this.adapter) == null ? void 0 : _b.prepare_request_body) === "function" ? this.adapter.prepare_request_body(body) : body);
        return req;
      }
      async handle_streaming_request(request, render) {
        return this.stream(request);
      }
      async handle_non_streaming_request(request, opts, render) {
        const resp_json = await this.request(request);
        if (resp_json.error) {
          return this.handle_api_error(resp_json.error, render);
        }
        const tool_call = this.get_tool_call(resp_json);
        if (tool_call) {
          return this.handle_tool_call(tool_call, opts, render);
        }
        const message_content = this.get_message_content(resp_json);
        if (render) {
          this.done_handler(message_content);
        }
        return message_content;
      }
      handle_api_error(error, render) {
        console.error(error);
        if (render) {
          this.done_handler("*API Error. See console logs for details.*");
        }
        return "*API Error. See console logs for details.*";
      }
      async handle_tool_call(tool_call, opts, render) {
        var _a, _b;
        if ((_b = (_a = this.env.chats) == null ? void 0 : _a.current) == null ? void 0 : _b.tool_choice) {
          this.env.chats.current.tool_choice = null;
        }
        const tool_name = this.get_tool_name(tool_call);
        const tool_call_content = this.get_tool_call_content(tool_call);
        const tools = opts.tools || [];
        const tool = tools.find((t) => t.function.name === tool_name);
        const tool_handler = this.get_tool_handler(tool_name);
        if (!tool_handler || !is_valid_tool_call(tool, tool_call_content)) {
          return this.handle_invalid_tool_call(tool_name, tool_call_content);
        }
        await this.add_tool_call_to_chat(tool_name, tool_call_content);
        const tool_output = await tool_handler(this.env, tool_call_content);
        if (tool_output) {
          await this.current.add_tool_output(tool_name, tool_output);
          this.current.tool_choice = "none";
          return this.complete({});
        }
      }
      handle_invalid_tool_call(tool_name, tool_call_content) {
        console.warn(`Tool ${tool_name} not found or invalid, returning tool_call_content`);
        console.log({ tool_call_content });
        return tool_call_content;
      }
      async add_tool_call_to_chat(tool_name, tool_call_content) {
        var _a;
        if (typeof ((_a = this.current) == null ? void 0 : _a.add_message) === "function") {
          await this.current.add_message({
            role: "assistant",
            tool_calls: [{
              function: {
                name: tool_name,
                arguments: JSON.stringify(tool_call_content)
              }
            }]
          });
        }
      }
      handle_error(err, render) {
        console.error(err);
        if (render) {
          this.done_handler("*An error occurred. See console logs for details.*");
        }
        return "*An error occurred. See console logs for details.*";
      }
      // HANDLE TOOLS
      /**
       * Retrieves the tool handler function based on the tool name from the environment's actions.
       * This method can be overridden to use custom logic for handling tools.
       * 
       * @param {string} tool_name - The name of the tool for which the handler is to be retrieved.
       * @returns {Function} The handler function for the specified tool.
       */
      get_tool_handler(tool_name) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.env.actions) == null ? void 0 : _a.actions) == null ? void 0 : _b[tool_name]) == null ? void 0 : _c.handler;
      }
      /**
       * Extracts the tool call information from a JSON response. This method supports adapter-specific logic.
       * If no adapter method is provided, it defaults to the expected OpenAI JSON format.
       * 
       * @param {Object} json - The JSON response from which to extract the tool call.
       * @returns {Object} The first tool call found in the response.
       */
      get_tool_call(json) {
        var _a, _b, _c;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.get_tool_call) === "function")
          return this.adapter.get_tool_call(json);
        return (_c = (_b = json.choices) == null ? void 0 : _b[0].message.tool_calls) == null ? void 0 : _c[0];
      }
      /**
       * Determines the tool name from a tool call object. Supports adapter-specific implementations.
       * Defaults to extracting the name directly from the tool call structure.
       * 
       * @param {Object} tool_call - The tool call object from which to extract the tool name.
       * @returns {string} The name of the tool.
       */
      get_tool_name(tool_call) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.get_tool_name) === "function")
          return this.adapter.get_tool_name(tool_call);
        return tool_call.function.name;
      }
      /**
       * Extracts the tool call content from a tool call object. Supports adapter-specific logic.
       * Defaults to parsing the 'arguments' field of the tool call function as JSON.
       * 
       * @param {Object} tool_call - The tool call object from which to extract the content.
       * @returns {Object} The parsed arguments of the tool call.
       */
      get_tool_call_content(tool_call) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.get_tool_call_content) === "function")
          return this.adapter.get_tool_call_content(tool_call);
        return JSON.parse(tool_call.function.arguments);
      }
      // HANDLE MESSAGES
      /**
       * Retrieves the message object from a JSON response. Supports adapter-specific implementations.
       * Defaults to handling both OpenAI and Ollama formats by checking for message structures in 'choices'.
       * 
       * @param {Object} json - The JSON response from which to extract the message.
       * @returns {Object} The message object extracted from the response.
       */
      get_message(json) {
        var _a, _b;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.get_message) === "function")
          return this.adapter.get_message(json);
        return ((_b = json.choices) == null ? void 0 : _b[0].message) || json.message;
      }
      /**
       * Extracts the content of a message from a JSON response. Supports adapter-specific implementations.
       * This method relies on `get_message` to first retrieve the message object.
       * 
       * @param {Object} json - The JSON response from which to extract the message content.
       * @returns {string} The content of the message.
       */
      get_message_content(json) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.get_message_content) === "function")
          return this.adapter.get_message_content(json);
        return this.get_message(json).content;
      }
      async request(req) {
        req.url = this.endpoint;
        req.throw = false;
        const resp = this._request_adapter ? await this._request_adapter(req) : await fetch(this.endpoint, req);
        console.log(resp);
        const resp_json = await this.get_resp_json(resp);
        console.log(resp_json);
        return resp_json;
      }
      async get_resp_json(resp) {
        return typeof resp.json === "function" ? await resp.json() : await resp.json;
      }
      get request_adapter() {
        return this._request_adapter;
      }
      async stream(req) {
        console.log("Streaming Request: ");
        console.log(req);
        const full_text = await new Promise((resolve, reject) => {
          try {
            this.active_stream = new SmartStreamer(this.endpoint_streaming, req);
            let curr_text = "";
            this.active_stream.addEventListener("message", (e) => {
              if (this.is_end_of_stream(e)) {
                this.stop_stream();
                return resolve(curr_text);
              }
              let text_chunk = this.get_text_chunk_from_stream(e);
              if (!text_chunk)
                return;
              curr_text += text_chunk;
              this.chunk_handler(text_chunk);
            });
            this.active_stream.addEventListener("readystatechange", (e) => {
              if (e.readyState >= 2)
                console.log("ReadyState: " + e.readyState);
            });
            this.active_stream.addEventListener("error", (e) => {
              console.error(e);
              this.done_handler("*API Error. See console logs for details.*");
              this.stop_stream();
              reject(e);
            });
            this.active_stream.stream();
          } catch (err) {
            console.error(err);
            this.stop_stream();
            reject(err);
          }
        });
        this.done_handler(full_text);
        return full_text;
      }
      get_text_chunk_from_stream(event) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.get_text_chunk_from_stream) === "function")
          return this.adapter.get_text_chunk_from_stream(event);
        let resp = null;
        let text_chunk = "";
        try {
          resp = JSON.parse(event.data);
          text_chunk = resp.choices[0].delta.content;
        } catch (err) {
          console.log(err);
          console.log(event.data);
          if (event.data.indexOf("}{") > -1)
            event.data = event.data.replace(/}{/g, "},{");
          resp = JSON.parse(`[${event.data}]`);
          resp.forEach((r) => {
            if (r.choices)
              text_chunk += r.choices[0].delta.content;
          });
        }
        return text_chunk;
      }
      is_end_of_stream(event) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.is_end_of_stream) === "function")
          return this.adapter.is_end_of_stream(event);
        return event.data === "[DONE]";
      }
      stop_stream() {
        if (this.active_stream) {
          this.active_stream.end();
          this.active_stream = null;
        }
      }
      done_handler(full_str) {
        if (typeof this.main.done_handler === "function")
          this.main.done_handler(full_str);
      }
      chunk_handler(text_chunk) {
        if (typeof this.main.chunk_handler === "function")
          this.main.chunk_handler(text_chunk);
      }
      async count_tokens(input) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.count_tokens) === "function")
          return await this.adapter.count_tokens(input);
        return this.estimate_tokens(input);
      }
      estimate_tokens(input) {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.estimate_tokens) === "function")
          return this.adapter.estimate_tokens(input);
        if (typeof input === "object")
          input = JSON.stringify(input);
        return input.length / 4;
      }
      async test_api_key() {
        console.log(this.api_key);
        try {
          const request = {
            messages: [
              { role: "user", content: "Hello" }
            ],
            temperature: 0,
            max_tokens: 100,
            stream: false,
            n: 1
          };
          if (this.config.fetch_models) {
            request.model = this.config.default_model;
          }
          const resp = await this.complete(request, false);
          console.log(resp);
          if (!resp)
            return false;
          return true;
        } catch (err) {
          console.error(err);
          return false;
        }
      }
      async get_models() {
        var _a;
        if (!this.api_key) {
          console.warn(`No API key found for ${this.platform_key}. Cannot retrieve models.`);
          return [];
        }
        if (((_a = this.platforms[this.platform_key]) == null ? void 0 : _a.fetch_models) && typeof fetch_models[this.platform_key] === "function") {
          const models = await fetch_models[this.platform_key](this.api_key, this._request_adapter);
          if (models) {
            models.sort((a, b) => a.model_name.localeCompare(b.model_name));
            return models;
          } else
            console.error(`No models found for ${this.platform_key}`, models);
        }
        return [];
      }
      async get_base_model_config() {
        const models = await this.get_models();
        return models.find((m) => m.key === this.model_name);
      }
      // getters
      get api_key() {
        return this.config.api_key;
      }
      get current() {
        var _a;
        return (_a = this.env.chats) == null ? void 0 : _a.current;
      }
      // use endpoint of combine protocol, hostname, port, and path
      get endpoint() {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.endpoint) !== "undefined")
          return this.adapter.endpoint.replace("MODEL_NAME", this.model_name);
        return this.config.endpoint || this.config.protocol + "://" + this.config.hostname + (this.config.port ? ":" + this.config.port : "") + this.endpoint_path;
      }
      get endpoint_streaming() {
        var _a;
        if (typeof ((_a = this.adapter) == null ? void 0 : _a.endpoint_streaming) !== "undefined")
          return this.adapter.endpoint_streaming.replace("MODEL_NAME", this.model_name);
        return this.config.endpoint_streaming || this.endpoint;
      }
      get endpoint_path() {
        return this.config.path.startsWith("/") ? this.config.path : "/" + this.config.path;
      }
      get max_input_tokens() {
        return this.config.max_input_tokens;
      }
      get max_output_tokens() {
        return this.config.max_output_tokens;
      }
      get model_name() {
        return this.config.model_name || this.config.default_model;
      }
      get multimodal() {
        var _a;
        return typeof ((_a = this.adapter) == null ? void 0 : _a.multimodal) !== "undefined" ? this.adapter.multimodal : this.config.multimodal;
      }
    };
    exports.SmartChatModel = SmartChatModel2;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SmartMemosPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// SmartMemosAudioRecordModal.ts
var import_obsidian = require("obsidian");
var SmartMemosAudioRecordModal = class extends import_obsidian.Modal {
  constructor(app, handleAudioRecording, settings) {
    super(app);
    this.mediaRecorder = null;
    this.chunks = [];
    this.isRecording = false;
    this.intervalId = null;
    this.startTime = 0;
    this.elapsedTime = 0;
    this.isResetting = false;
    this.handleAudioRecording = handleAudioRecording;
    this.settings = settings;
  }
  onOpen() {
    const { contentEl, modalEl } = this;
    if (!contentEl || !modalEl) {
      console.error("contentEl or modalEl is null");
      return;
    }
    modalEl.addClass("smart-memo-recording");
    const headerTimerContainer = contentEl.createDiv({ cls: "smart-memo-header-timer-container" });
    const header = headerTimerContainer.createEl("h2", { text: "Recording...", cls: "smart-memo-recording-header" });
    this.timer = headerTimerContainer.createEl("div", { cls: "smart-memo-timer", text: "00:00" });
    contentEl.addClass("smart-memo-audio-record-modal-content");
    const redDotContainer = contentEl.createDiv({ cls: "smart-memo-red-dot-container" });
    this.redDot = redDotContainer.createDiv({ cls: "smart-memo-red-dot" });
    const controlGroupWrapper = contentEl.createDiv({ cls: "smart-memo-control-group-wrapper" });
    const controlGroup = controlGroupWrapper.createDiv({ cls: "smart-memo-modal-button-group" });
    const playPauseButton = controlGroup.createEl("button", { cls: "smart-memo-modal-button smart-memo-flex" });
    const stopButton = controlGroup.createEl("button", { cls: "smart-memo-modal-button smart-memo-flex" });
    (0, import_obsidian.setIcon)(playPauseButton, "pause");
    (0, import_obsidian.setIcon)(stopButton, "square");
    stopButton.addEventListener("click", async () => {
      const audioFile = await this.stopRecording();
      this.handleAudioRecording(audioFile, false, this.keepAudioCheckbox.checked, this.includeAudioFileLinkCheckbox.checked);
    });
    playPauseButton.addEventListener("click", () => {
      if (this.isRecording) {
        this.pauseRecording();
        (0, import_obsidian.setIcon)(playPauseButton, "circle");
        header.textContent = "Paused";
        modalEl.addClass("smart-memo-paused");
        modalEl.removeClass("smart-memo-recording");
      } else {
        this.resumeOrStartRecording();
        (0, import_obsidian.setIcon)(playPauseButton, "pause");
        header.textContent = "Recording...";
        modalEl.removeClass("smart-memo-paused");
        modalEl.addClass("smart-memo-recording");
      }
      this.isRecording = !this.isRecording;
    });
    const transcribeButton = controlGroupWrapper.createEl("button", { cls: "smart-memo-modal-button smart-memo-full-width-button smart-memo-transcribe-button" });
    transcribeButton.addEventListener("click", async () => {
      const audioFile = await this.stopRecording();
      this.handleAudioRecording(audioFile, true, this.keepAudioCheckbox.checked, this.includeAudioFileLinkCheckbox.checked);
    });
    (0, import_obsidian.setIcon)(transcribeButton, "file-text");
    const buttonText = document.createTextNode(" Smart Transcribe");
    transcribeButton.appendChild(buttonText);
    const svgElement = transcribeButton.querySelector("svg");
    if (svgElement) {
      svgElement.style.marginRight = "10px";
    }
    const resetButton = contentEl.createEl("button", { cls: "smart-memo-modal-button smart-memo-full-width-button smart-memo-reset-button", text: "Restart" });
    resetButton.addEventListener("click", () => {
      this.hardReset();
      (0, import_obsidian.setIcon)(playPauseButton, "circle");
      header.textContent = "Ready to Record";
      this.isRecording = false;
      modalEl.addClass("smart-memo-paused");
      modalEl.removeClass("smart-memo-recording");
      this.redDot.classList.remove("smart-memo-pulse-animation");
    });
    const keepAudioContainer = contentEl.createDiv({ cls: "smart-memo-keep-audio-container" });
    this.keepAudioCheckbox = keepAudioContainer.createEl("input", { type: "checkbox", cls: "smart-memo-keep-audio-checkbox" });
    this.keepAudioCheckbox.checked = this.settings.keepAudio;
    const keepAudioLabel = keepAudioContainer.createEl("label", { text: "Keep Audio File", cls: "smart-memo-keep-audio-label" });
    keepAudioLabel.htmlFor = this.keepAudioCheckbox.id;
    const includeAudioFileLinkContainer = contentEl.createDiv({ cls: "smart-memo-include-audio-file-link-container" });
    this.includeAudioFileLinkCheckbox = includeAudioFileLinkContainer.createEl("input", { type: "checkbox", cls: "smart-memo-include-audio-file-link-checkbox" });
    this.includeAudioFileLinkCheckbox.checked = this.settings.includeAudioFileLink;
    const includeAudioFileLinkLabel = includeAudioFileLinkContainer.createEl("label", { text: "Include Audio File Player", cls: "smart-memo-include-audio-file-link-label" });
    includeAudioFileLinkLabel.htmlFor = this.includeAudioFileLinkCheckbox.id;
    this.startRecording();
    this.isRecording = true;
    this.redDot.classList.add("smart-memo-pulse-animation");
    const activeElement = document.activeElement;
    if (activeElement) {
      activeElement.blur();
    }
  }
  startRecording() {
    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
      this.mediaRecorder = new MediaRecorder(stream);
      this.setupMediaRecorder();
      this.mediaRecorder.start(1e3);
      this.startTime = Date.now();
      this.startTimer();
      this.mediaRecorder.addEventListener("dataavailable", this.onDataAvailable.bind(this));
    }).catch((error) => {
      console.error("Error accessing microphone:", error);
      this.reject(error);
    });
  }
  setupMediaRecorder() {
    if (this.mediaRecorder) {
      this.mediaRecorder.addEventListener("stop", this.onStop.bind(this));
    }
  }
  onDataAvailable(event) {
    if (this.isResetting) {
      return;
    }
    this.chunks.push(event.data);
  }
  onStop() {
    if (this.isResetting) {
      this.isResetting = false;
      return;
    }
    const blob = new Blob(this.chunks, { type: "audio/wav" });
    if (this.resolve) {
      this.resolve(blob);
      this.close();
    } else {
      console.error("Resolve function is not defined");
    }
  }
  pauseRecording() {
    if (this.mediaRecorder && this.mediaRecorder.state === "recording") {
      this.mediaRecorder.pause();
      this.stopTimer();
      this.elapsedTime += Date.now() - this.startTime;
      this.redDot.classList.remove("smart-memo-pulse-animation");
    }
  }
  resumeOrStartRecording() {
    if (this.mediaRecorder && this.mediaRecorder.state === "paused") {
      this.mediaRecorder.resume();
    } else {
      this.startRecording();
    }
    this.startTime = Date.now();
    this.startTimer();
    this.redDot.classList.add("smart-memo-pulse-animation");
  }
  hardReset() {
    if (this.mediaRecorder) {
      this.mediaRecorder.stop();
      this.mediaRecorder.onstop = null;
      this.mediaRecorder.ondataavailable = null;
      this.mediaRecorder = null;
    }
    this.isResetting = true;
    this.chunks = [];
    this.elapsedTime = 0;
    this.stopTimer();
    this.timer.textContent = "00:00";
    this.redDot.classList.remove("smart-memo-pulse-animation");
  }
  stopRecording() {
    return new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
      if (this.mediaRecorder) {
        this.mediaRecorder.addEventListener("stop", this.onStop.bind(this));
        this.mediaRecorder.stop();
        this.stopTimer();
      } else {
        resolve(null);
      }
    });
  }
  startTimer() {
    this.stopTimer();
    this.intervalId = window.setInterval(() => {
      const elapsedTimeInSeconds = Math.floor(this.elapsedTime / 1e3) + Math.floor((Date.now() - this.startTime) / 1e3);
      const minutes = Math.floor(elapsedTimeInSeconds / 60);
      const seconds = elapsedTimeInSeconds % 60;
      this.timer.textContent = `${this.padNumber(minutes)}:${this.padNumber(seconds)}`;
    }, 1e3);
  }
  stopTimer() {
    if (this.intervalId !== null) {
      window.clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }
  padNumber(num) {
    return num.toString().padStart(2, "0");
  }
  open() {
    super.open();
    return new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
  }
};

// Utils.ts
var import_obsidian2 = require("obsidian");
async function saveFile(app, audioBlob, fileName, path) {
  try {
    const normalizedPath = (0, import_obsidian2.normalizePath)(path);
    const filePath = `${normalizedPath}/${fileName}`;
    await ensureDirectoryExists(app, normalizedPath);
    const arrayBuffer = await audioBlob.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);
    const file = await app.vault.createBinary(filePath, uint8Array);
    if (!file) {
      throw new Error("File creation failed and returned null");
    }
    return file;
  } catch (error) {
    console.error("Error saving audio file:", error);
    throw error;
  }
}
async function ensureDirectoryExists(app, folderPath) {
  const parts = folderPath.split("/");
  let currentPath = "";
  for (const part of parts) {
    currentPath = currentPath ? `${currentPath}/${part}` : part;
    try {
      const folder = app.vault.getAbstractFileByPath(currentPath);
      if (!folder) {
        await app.vault.createFolder(currentPath);
      } else if (folder instanceof import_obsidian2.TFolder) {
        console.log(`Folder already exists: ${currentPath}`);
      } else {
        throw new Error(`${currentPath} is not a folder`);
      }
    } catch (error) {
      if (error.message.includes("Folder already exists")) {
        console.log(`Handled existing folder: ${currentPath}`);
      } else {
        console.error(`Error ensuring directory exists: ${error.message}`);
        throw error;
      }
    }
  }
}

// main.ts
var { SmartChatModel } = require_smart_chat_model();
var DEFAULT_SETTINGS = {
  model: "gpt-4-0613",
  apiKey: "",
  prompt: `You are an expert note-making AI for obsidian who specializes in the Linking Your Thinking (LYK) strategy.  The following is a transcription of recording of someone talking aloud or people in a conversation. There may be a lot of random things said given fluidity of conversation or thought process and the microphone's ability to pick up all audio.  Give me detailed notes in markdown language on what was said in the most easy-to-understand, detailed, and conceptual format.  Include any helpful information that can conceptualize the notes further or enhance the ideas, and then summarize what was said.  Do not mention "the speaker" anywhere in your response.  The notes your write should be written as if I were writting them. Finally, ensure to end with code for a mermaid chart that shows an enlightening concept map combining both the transcription and the information you added to it.  The following is the transcribed audio:

`,
  includeTranscript: true,
  recordingFilePath: "",
  keepAudio: true,
  includeAudioFileLink: false
};
var MODELS = [
  "gpt-3.5-turbo-16k",
  "gpt-3.5-turbo-0613",
  "text-davinci-003",
  "text-davinci-002",
  "code-davinci-002",
  "code-davinci-001",
  "gpt-4-0613",
  "gpt-4-32k-0613",
  "gpt-4o",
  "gpt-4o-mini"
];
var SmartMemosPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.apiKey = "sk-as123mkqwenjasdasdj12...";
    this.model = "gpt-4-0613";
  }
  async onload() {
    await this.loadSettings();
    const app_json = await this.app.vault.adapter.read(".obsidian/app.json");
    this.appJsonObj = JSON.parse(app_json);
    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
    this.addCommand({
      id: "open-transcript-modal",
      name: "Smart transcribe",
      editorCallback: (editor, view) => {
        this.commandGenerateTranscript(editor);
      }
    });
    this.addCommand({
      id: "record-smart-memo",
      name: "Record smart memo",
      editorCallback: async (editor, view) => {
        this.audioFile = await new SmartMemosAudioRecordModal(this.app, this.handleAudioRecording.bind(this), this.settings).open();
      }
    });
    this.registerMarkdownPostProcessor((el, ctx) => {
      const audioLinks = el.querySelectorAll('a.internal-link[data-href$=".wav"]');
      audioLinks.forEach((link) => {
        const href = link.getAttribute("data-href");
        if (href === null) {
          console.error("Failed to get the href attribute from the link element.");
          return;
        }
        const abstractFile = this.app.vault.getAbstractFileByPath(href);
        if (!(abstractFile instanceof import_obsidian3.TFile)) {
          console.error("The path does not point to a valid file in the vault.");
          return;
        }
        const audio = document.createElement("audio");
        audio.src = this.app.vault.getResourcePath(abstractFile);
        audio.controls = true;
        audio.addEventListener("loadedmetadata", () => {
          if (audio.parentNode) {
            const durationDisplay = document.createElement("span");
            durationDisplay.textContent = `Duration: ${audio.duration.toFixed(2)} seconds`;
            audio.parentNode.insertBefore(durationDisplay, audio.nextSibling);
          }
        });
        audio.load();
        link.replaceWith(audio);
      });
    });
    this.addRibbonIcon("microphone", "Record smart memo", async (evt) => {
      this.audioFile = await new SmartMemosAudioRecordModal(this.app, this.handleAudioRecording.bind(this), this.settings).open();
    });
    this.addSettingTab(new SmartMemosSettingTab(this.app, this));
  }
  // Add a new method to handle the audio recording and processing
  async handleAudioRecording(audioFile, transcribe, keepAudio, includeAudioFileLink) {
    try {
      console.log("Handling audio recording:", audioFile);
      if (!audioFile) {
        console.log("No audio was recorded.");
        return;
      }
      this.audioFile = audioFile;
      const fileName = `recording-${Date.now()}.wav`;
      const file = await saveFile(this.app, this.audioFile, fileName, this.settings.recordingFilePath);
      this.settings.keepAudio = keepAudio;
      this.settings.includeAudioFileLink = includeAudioFileLink;
      this.saveSettings();
      if (includeAudioFileLink && keepAudio) {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
        if (activeView) {
          const editor = activeView.editor;
          const cursor = editor.getCursor();
          const link = `![[${file.path}]]`;
          editor.replaceRange(link, cursor);
          editor.replaceRange("", { line: cursor.line, ch: cursor.ch }, { line: cursor.line, ch: cursor.ch });
        }
      }
      if (transcribe) {
        this.transcribeRecording(file);
      }
    } catch (error) {
      console.error("Error handling audio recording:", error);
      new import_obsidian3.Notice("Failed to handle audio recording");
    }
  }
  // Add a new method to transcribe the audio file and generate text
  async transcribeRecording(audioFile) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView) {
      console.error("No active Markdown view found.");
      return;
    }
    const editor = activeView.editor;
    this.app.vault.readBinary(audioFile).then((audioBuffer) => {
      if (this.writing) {
        new import_obsidian3.Notice("Generator is already in progress.");
        return;
      }
      this.writing = true;
      new import_obsidian3.Notice("Generating transcript...");
      const fileType = audioFile.extension;
      this.generateTranscript(audioBuffer, fileType).then((result) => {
        this.transcript = result;
        const prompt = this.settings.prompt + result;
        new import_obsidian3.Notice("Transcript generated...");
        this.generateText(prompt, editor, editor.getCursor("to").line);
        if (!this.settings.keepAudio) {
          this.app.vault.delete(audioFile);
        }
      }).catch((error) => {
        console.warn(error.message);
        new import_obsidian3.Notice(error.message);
        this.writing = false;
      });
    });
  }
  writeText(editor, LnToWrite, text) {
    const newLine = this.getNextNewLine(editor, LnToWrite);
    editor.setLine(newLine, "\n" + text.trim() + "\n");
    return newLine;
  }
  getNextNewLine(editor, Ln) {
    let newLine = Ln;
    while (editor.getLine(newLine).trim().length > 0) {
      if (newLine == editor.lastLine())
        editor.setLine(newLine, editor.getLine(newLine) + "\n");
      newLine++;
    }
    return newLine;
  }
  commandGenerateTranscript(editor) {
    const position = editor.getCursor();
    const text = editor.getRange({ line: 0, ch: 0 }, position);
    const regex = [
      /(?<=\[\[)(([^[\]])+)\.(mp3|mp4|mpeg|mpga|m4a|wav|webm)(?=]])/g,
      /(?<=\[(.*)]\()(([^[\]])+)\.(mp3|mp4|mpeg|mpga|m4a|wav|webm)(?=\))/g
    ];
    this.findFilePath(text, regex).then((path) => {
      const fileType = path.split(".").pop();
      if (fileType == void 0 || fileType == null || fileType == "") {
        new import_obsidian3.Notice("No audio file found");
      } else {
        this.app.vault.adapter.exists(path).then((exists) => {
          if (!exists)
            throw new Error(path + " does not exist");
          this.app.vault.adapter.readBinary(path).then((audioBuffer) => {
            if (this.writing) {
              new import_obsidian3.Notice("Generator is already in progress.");
              return;
            }
            this.writing = true;
            new import_obsidian3.Notice("Generating transcript...");
            this.generateTranscript(audioBuffer, fileType).then((result) => {
              this.transcript = result;
              const prompt = this.settings.prompt + result;
              new import_obsidian3.Notice("Transcript generated...");
              this.generateText(prompt, editor, editor.getCursor("to").line);
            }).catch((error) => {
              console.warn(error.message);
              new import_obsidian3.Notice(error.message);
              this.writing = false;
            });
          });
        });
      }
    }).catch((error) => {
      console.warn(error.message);
      new import_obsidian3.Notice(error.message);
    });
  }
  async findFilePath(text, regex) {
    console.log("dir text: ", text);
    let filename = "";
    let result;
    for (const reg of regex) {
      while ((result = reg.exec(text)) !== null) {
        filename = (0, import_obsidian3.normalizePath)(decodeURI(result[0])).trim();
      }
    }
    if (filename === "")
      throw new Error("No file found in the text.");
    console.log("file name: ", filename);
    const fullPath = filename;
    console.log("full path: ", fullPath);
    const fileExists = this.app.vault.getAbstractFileByPath(fullPath) instanceof import_obsidian3.TAbstractFile;
    if (fileExists)
      return fullPath;
    const allFiles = this.app.vault.getFiles();
    const foundFile = allFiles.find((file) => file.name === filename.split("/").pop());
    if (foundFile)
      return foundFile.path;
    throw new Error("File not found");
  }
  async generateTranscript(audioBuffer, filetype) {
    if (this.settings.apiKey.length <= 1)
      throw new Error("OpenAI API Key is not provided.");
    try {
      const decodedAudioData = await this.audioContext.decodeAudioData(audioBuffer);
      const targetSampleRate = 16e3;
      const downsampledAudioBuffer = await this.downsampleAudioBuffer(decodedAudioData, targetSampleRate);
      const chunkDuration = 600;
      const audioChunks = this.splitAudioBuffer(downsampledAudioBuffer, chunkDuration);
      let results = [];
      for (let i = 0; i < audioChunks.length; i++) {
        new import_obsidian3.Notice(`Transcribing chunk #${i + 1} of ${audioChunks.length}...`);
        const wavArrayBuffer = this.encodeAudioBufferToWav(audioChunks[i]);
        const sizeInMB = wavArrayBuffer.byteLength / (1024 * 1024);
        if (sizeInMB > 24) {
          throw new Error("Chunk size exceeds 25 MB limit.");
        }
        const formData = new FormData();
        const blob = new Blob([wavArrayBuffer], { type: "audio/wav" });
        formData.append("file", blob, "audio.wav");
        formData.append("model", "whisper-1");
        const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
          method: "POST",
          headers: {
            "Authorization": "Bearer " + this.settings.apiKey
          },
          body: formData
        });
        const result = await response.json();
        if (response.ok && result.text) {
          results.push(result.text);
        } else {
          throw new Error(`Error: ${result.error.message}`);
        }
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
      return results.join(" ");
    } catch (error) {
      console.error("Transcription failed:", error);
      if (error.message.includes("401")) {
        throw new Error("OpenAI API Key is not valid.");
      } else if (error.message.includes("400")) {
        throw new Error("Bad Request. Please check the format of the request.");
      } else {
        throw error;
      }
    }
  }
  async downsampleAudioBuffer(audioBuffer, targetSampleRate) {
    const numberOfChannels = audioBuffer.numberOfChannels;
    const duration = audioBuffer.duration;
    const offlineContext = new OfflineAudioContext(numberOfChannels, targetSampleRate * duration, targetSampleRate);
    const bufferSource = offlineContext.createBufferSource();
    bufferSource.buffer = audioBuffer;
    bufferSource.connect(offlineContext.destination);
    bufferSource.start(0);
    const renderedBuffer = await offlineContext.startRendering();
    return renderedBuffer;
  }
  splitAudioBuffer(audioBuffer, chunkDuration) {
    const numberOfChannels = audioBuffer.numberOfChannels;
    const sampleRate = audioBuffer.sampleRate;
    const totalSamples = audioBuffer.length;
    const chunks = [];
    let offset = 0;
    const samplesPerChunk = Math.floor(chunkDuration * sampleRate);
    while (offset < totalSamples) {
      const chunkSamples = Math.min(samplesPerChunk, totalSamples - offset);
      const chunkBuffer = new AudioBuffer({
        length: chunkSamples,
        numberOfChannels,
        sampleRate
      });
      for (let channel = 0; channel < numberOfChannels; channel++) {
        const channelData = audioBuffer.getChannelData(channel).subarray(offset, offset + chunkSamples);
        chunkBuffer.copyToChannel(channelData, channel, 0);
      }
      chunks.push(chunkBuffer);
      offset += chunkSamples;
    }
    return chunks;
  }
  encodeAudioBufferToWav(audioBuffer) {
    const numChannels = audioBuffer.numberOfChannels;
    const sampleRate = audioBuffer.sampleRate;
    const format = 1;
    const bitDepth = 16;
    const numSamples = audioBuffer.length * numChannels;
    const buffer = new ArrayBuffer(44 + numSamples * 2);
    const view = new DataView(buffer);
    this.writeString(view, 0, "RIFF");
    view.setUint32(4, 36 + numSamples * 2, true);
    this.writeString(view, 8, "WAVE");
    this.writeString(view, 12, "fmt ");
    view.setUint32(16, 16, true);
    view.setUint16(20, format, true);
    view.setUint16(22, numChannels, true);
    view.setUint32(24, sampleRate, true);
    view.setUint32(28, sampleRate * numChannels * bitDepth / 8, true);
    view.setUint16(32, numChannels * bitDepth / 8, true);
    view.setUint16(34, bitDepth, true);
    this.writeString(view, 36, "data");
    view.setUint32(40, numSamples * 2, true);
    let offset = 44;
    for (let i = 0; i < audioBuffer.length; i++) {
      for (let channel = 0; channel < numChannels; channel++) {
        let sample = audioBuffer.getChannelData(channel)[i];
        sample = Math.max(-1, Math.min(1, sample));
        sample = sample < 0 ? sample * 32768 : sample * 32767;
        view.setInt16(offset, sample, true);
        offset += 2;
      }
    }
    return buffer;
  }
  writeString(view, offset, string) {
    for (let i = 0; i < string.length; i++) {
      view.setUint8(offset + i, string.charCodeAt(i));
    }
  }
  async generateText(prompt, editor, currentLn, contextPrompt) {
    if (prompt.length < 1)
      throw new Error("Cannot find prompt.");
    if (this.settings.apiKey.length <= 1)
      throw new Error("OpenAI API Key is not provided.");
    prompt = prompt + ".";
    let newPrompt = prompt;
    const messages = [];
    messages.push({
      role: "user",
      content: newPrompt
    });
    new import_obsidian3.Notice(`Performing customized superhuman analysis...`);
    let LnToWrite = this.getNextNewLine(editor, currentLn);
    let lastLine = LnToWrite;
    const mock_env = {
      chunk_handler: (chunk) => {
        editor.setLine(LnToWrite, editor.getLine(LnToWrite) + chunk);
        if (chunk.includes("\n")) {
          LnToWrite = this.getNextNewLine(editor, LnToWrite);
        }
      },
      done_handler: (final_resp) => {
        LnToWrite = this.getNextNewLine(editor, lastLine);
        if (this.settings.includeTranscript) {
          editor.setLine(LnToWrite, editor.getLine(LnToWrite) + "\n# Transcript\n" + this.transcript);
        }
      }
    };
    const smart_chat_model = new SmartChatModel(
      mock_env,
      "openai",
      {
        api_key: this.settings.apiKey,
        model: this.settings.model
      }
    );
    const resp = await smart_chat_model.complete({ messages });
    this.writing = false;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SmartMemosSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("OpenAI api key").setDesc("Ex: sk-as123mkqwenjasdasdj12...").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.apiKey).setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Model").setDesc("Select the model to use for note-generation").addDropdown((dropdown) => {
      dropdown.addOptions(MODELS.reduce((models, model) => {
        models[model] = model;
        return models;
      }, {}));
      dropdown.setValue(this.plugin.settings.model);
      dropdown.onChange(async (value) => {
        this.plugin.settings.model = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Custom transcription-to-notes prompt").setDesc("Prompt that will be sent to Chatpgt right before adding your transcribed audio").addTextArea((text) => {
      if (text.inputEl) {
        text.inputEl.classList.add("smart-memo-text-box");
      }
      text.setPlaceholder(
        "Act as my personal secretary and worlds greatest entreprenuer and know I will put these notes in my personal obsidian where I have all my notes linked by categories, tags, etc. The following is a transcription of recording of someone talking aloud or people in a conversation. May be a lot of random things that are said given fluidity of conversation and the microphone ability to pick up all audio. Make outline of all topics and points within a structured hierarchy. Make sure to include any quantifiable information said such as the cost of headphones being $400.  Then go into to detail with summaries that explain things more eloquently. Finally, Create a mermaid chart code that complements the outline.\n\n"
      ).setValue(this.plugin.settings.prompt).onChange(async (value) => {
        this.plugin.settings.prompt = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Include Transcript").setDesc("Toggle this setting if you want to include the raw transcript on top of custom notes.").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTranscript).onChange(async (value) => {
      this.plugin.settings.includeTranscript = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Recording File Path").setDesc('Specify the file path where recordings will be saved. Ex. If you want to put recordings in Resources folder then path is "Resources" (Defaults to root)').addText((text) => text.setPlaceholder("Ex. Resources (if in Resources)").setValue(this.plugin.settings.recordingFilePath || "").onChange(async (value) => {
      this.plugin.settings.recordingFilePath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Save Audio File").setDesc("Toggle this setting if you want to save/remove the audio file after it has been transcribed.").addToggle((toggle) => toggle.setValue(this.plugin.settings.keepAudio).onChange(async (value) => {
      this.plugin.settings.keepAudio = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Include Audio Player").setDesc("Toggle this setting if you want the audio file player to be displayed along with the transcription.").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeAudioFileLink).onChange(async (value) => {
      this.plugin.settings.includeAudioFileLink = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
