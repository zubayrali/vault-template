"use strict";var t,e,n,r=require("obsidian");function a(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError,function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.WikiLink=3]="WikiLink",t[t.WikiDisplay=4]="WikiDisplay",t[t.Text=5]="Text",t[t.dvField=6]="dvField",t[t.Table=7]="Table",t[t.FileMeta=8]="FileMeta",t[t.Task=9]="Task",t[t.TaskDone=10]="TaskDone",t[t.TaskNotDone=11]="TaskNotDone"}(t||(t={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Pie=2]="Pie",t[t.Radar=3]="Radar",t[t.Summary=4]="Summary",t[t.Table=5]="Table",t[t.Month=6]="Month",t[t.Heatmap=7]="Heatmap",t[t.Bullet=8]="Bullet",t[t.Unknown=9]="Unknown"}(e||(e={})),function(t){t[t.Number=0]="Number",t[t.Int=1]="Int",t[t.Date=2]="Date",t[t.Time=3]="Time",t[t.DateTime=4]="DateTime",t[t.String=5]="String"}(n||(n={}));class i{constructor(t,e){this.date=t,this.value=e}}class o{constructor(e,r,a){if(this.type=r,this.target=a,this.separator="",this.id=e,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueType=n.Number,this.usedAsXDataset=!1,this.numTargets=0,r===t.Table){const t=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");let e;for(;e=t.exec(a);)if(void 0!==e.groups.accessor){const n=parseFloat(e.groups.accessor);if(Number.isNumber(n)&&void 0!==e.groups.accessor1){const r=parseFloat(e.groups.accessor1);if(Number.isNumber(r)){let i;void 0!==e.groups.accessor2&&(i=parseFloat(e.groups.accessor2)),this.accessor=n,this.accessor1=r,Number.isNumber(i)&&(this.accessor2=i),this.parentTarget=a.replace(t,"")}break}}}else{const t=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");let e;for(;e=t.exec(a);)if(void 0!==e.groups.accessor){const n=parseFloat(e.groups.accessor);Number.isNumber(n)&&(this.accessor=n,this.parentTarget=a.replace(t,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}setSeparator(t){this.separator=t}getSeparator(t=!1){return""===this.separator?t?",":"/":this.separator}addNumTargets(t=1){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}}class s{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.startDate=null,this.endDate=null,this.numTargets=0,this.lineInfo=null,this.barInfo=null,this.isTmpDataset=!1,this.valueType=null==e?void 0:e.valueType;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}cloneToTmpDataset(){if(!this.isTmpDataset){const t=new s(this.parent,null);return t.name="tmp",t.values=[...this.values],t.yMin=this.yMin,t.yMax=this.yMax,t.startDate=this.startDate.clone(),t.endDate=this.endDate.clone(),t.numTargets=this.numTargets,t.isTmpDataset=!0,t.valueType=this.valueType,t}return this}getName(){return this.name}setName(t){this.name=t}getId(){return this.id}setId(t){this.id=t}addNumTargets(t){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}getValue(t,e=0){const n=this.parent.getIndexOfDate(t)+Math.floor(e);return n>=0&&n<this.values.length?this.values[n]:null}setValue(t,e){const n=this.parent.getIndexOfDate(t);n>=0&&n<this.values.length&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e),(null===this.startDate||t<this.startDate)&&(this.startDate=t.clone()),(null===this.endDate||t>this.endDate)&&(this.endDate=t.clone()))}recalculateMinMax(){this.yMin=Math.min(...this.values),this.yMax=Math.max(...this.values)}getYMin(){return this.yMin}getYMax(){return this.yMax}getStartDate(){return this.startDate}getEndDate(){return this.endDate}shift(t,e){let n=!1;for(let r=0;r<this.values.length;r++)null!==this.values[r]&&(null===e||this.values[r]>=e)&&(this.values[r]=this.values[r]+t,n=!0);n&&(this.yMin=this.yMin+t,this.yMax=this.yMax+t)}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){const t=this.currentIndex++;return{done:!1,value:new i(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class l{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){const t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){const n=new s(this,t);return n.setId(t.getId()),e&&n.setName(e.datasetName[t.getId()]),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(const e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(const e of this.datasets)if(e.getId()===t)return e;return null}getXDatasetIds(){const t=[];for(const e of this.datasets)if(e.getQuery().usedAsXDataset){const n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){const t=[];for(const e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class u{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.file=[],this.specifiedFilesOnly=!1,this.fileContainsLinkedFiles=[],this.fileMultiplierAfterLink="",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.valueShift=[],this.shiftOnlyValueLargerThan=[],this.valueType=[],this.textValueMap={},this.dataAreaSize=new x(300,300),this.aspectRatio=new w(1,1),this.margin=new A(10,10,10,10),this.fixedScale=1,this.fitPanelWidth=!1,this.output=[],this.line=[],this.bar=[],this.pie=[],this.summary=[],this.month=[],this.heatmap=[],this.bullet=[],this.customDataset=[],this.datasets=null}getQueryById(t){for(const e of this.queries)if(e.getId()===t)return e}}class c{constructor(){this.id=-1,this.name="",this.xData=[],this.yData=[]}}class h{constructor(){this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.xAxisTickInterval=null,this.yAxisTickInterval=[],this.xAxisTickLabelFormat=null,this.yAxisTickLabelFormat=[],this.yMin=[],this.yMax=[],this.reverseYAxis=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return e.Unknown}}class f extends h{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}GetGraphType(){return e.Line}}class d extends h{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}GetGraphType(){return e.Bar}}class g{constructor(){this.title="",this.data=[],this.dataColor=[],this.dataName=[],this.label=[],this.hideLabelLessThan=.03,this.extLabel=[],this.showExtLabelOnlyIfNoLabel=!1,this.ratioInnerRadius=0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return e.Pie}}class p{constructor(){this.template="",this.style=""}GetGraphType(){return e.Summary}}class y{constructor(){this.mode="circle",this.dataset=[],this.startWeekOn="Sun",this.threshold=[],this.yMin=[],this.yMax=[],this.color=null,this.dimNotInMonth=!0,this.initMonth="",this.showSelectedValue=!0,this.headerYearColor=null,this.headerMonthColor=null,this.dividingLineColor=null,this.showCircle=!0,this.showStreak=!0,this.showTodayRing=!0,this.showSelectedRing=!0,this.circleColor=null,this.circleColorByValue=!1,this.todayRingColor="",this.selectedRingColor="firebrick",this.showAnnotation=!0,this.annotation=[],this.showAnnotationOfAllTargets=!0,this.selectedDate="",this.selectedDataset=null}GetGraphType(){return e.Month}}class m{constructor(){this.dataset="0",this.startWeekOn="Sun",this.orientation="vertical",this.yMin=null,this.yMax=null,this.color=null}GetGraphType(){return e.Heatmap}}class v{constructor(){this.title="",this.dataset="0",this.orientation="horizontal",this.value="",this.valueUnit="",this.valueColor="#69b3a2",this.range=[],this.rangeColor=[],this.showMarker=!1,this.markerValue=0,this.markerColor=""}GetGraphType(){return e.Bullet}}class x{constructor(t,e){this.width=t,this.height=e}}class A{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class w{constructor(t,e){this.x=t,this.y=e}recalculateSize(t){const e=this.x/this.y,n=parseFloat((t.width*e).toFixed(2));return new x(n,t.height)}}class b{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){const e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class D{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}class k{constructor(){this.fileTotal=0,this.fileAvailable=0,this.fileOutOfDateRange=0,this.fileNotInFormat=0,this.errorMessage="",this.minDate=window.moment(""),this.maxDate=window.moment(""),this.gotAnyValidXValue=!1,this.gotAnyValidYValue=!1}}function C(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function M(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function T(t){let e,n,r;function a(t,r,a=0,i=t.length){if(a<i){if(0!==e(r,r))return i;do{const e=a+i>>>1;n(t[e],r)<0?a=e+1:i=e}while(a<i)}return a}return 2!==t.length?(e=C,n=(e,n)=>C(t(e),n),r=(e,n)=>t(e)-n):(e=t===C||t===M?t:_,n=t,r=t),{left:a,center:function(t,e,n=0,i=t.length){const o=a(t,e,n,i-1);return o>n&&r(t[o-1],e)>-r(t[o],e)?o-1:o},right:function(t,r,a=0,i=t.length){if(a<i){if(0!==e(r,r))return i;do{const e=a+i>>>1;n(t[e],r)<=0?a=e+1:i=e}while(a<i)}return a}}}function _(){return 0}const E=T(C).right;T((function(t){return null===t?NaN:+t})).center;var F=E;class S extends Map{constructor(t,e=N){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const[e,n]of t)this.set(e,n)}get(t){return super.get(B(this,t))}has(t){return super.has(B(this,t))}set(t,e){return super.set(function({_intern:t,_key:e},n){const r=e(n);return t.has(r)?t.get(r):(t.set(r,n),n)}(this,t),e)}delete(t){return super.delete(function({_intern:t,_key:e},n){const r=e(n);t.has(r)&&(n=t.get(r),t.delete(r));return n}(this,t))}}function B({_intern:t,_key:e},n){const r=e(n);return t.has(r)?t.get(r):n}function N(t){return null!==t&&"object"==typeof t?t.valueOf():t}function I(t,e){return(null==t||!(t>=t))-(null==e||!(e>=e))||(t<e?-1:t>e?1:0)}const L=Math.sqrt(50),V=Math.sqrt(10),O=Math.sqrt(2);function P(t,e,n){const r=(e-t)/Math.max(0,n),a=Math.floor(Math.log10(r)),i=r/Math.pow(10,a),o=i>=L?10:i>=V?5:i>=O?2:1;let s,l,u;return a<0?(u=Math.pow(10,-a)/o,s=Math.round(t*u),l=Math.round(e*u),s/u<t&&++s,l/u>e&&--l,u=-u):(u=Math.pow(10,a)*o,s=Math.round(t/u),l=Math.round(e/u),s*u<t&&++s,l*u>e&&--l),l<s&&.5<=n&&n<2?P(t,e,2*n):[s,l,u]}function $(t,e,n){return P(t=+t,e=+e,n=+n)[2]}function Y(t,e,n){n=+n;const r=(e=+e)<(t=+t),a=r?$(e,t,n):$(t,e,n);return(r?-1:1)*(a<0?1/-a:a)}function z(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function R(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function U(t,e,n=0,r=1/0,a){if(e=Math.floor(e),n=Math.floor(Math.max(0,n)),r=Math.floor(Math.min(t.length-1,r)),!(n<=e&&e<=r))return t;for(a=void 0===a?I:function(t=C){if(t===C)return I;if("function"!=typeof t)throw new TypeError("compare is not a function");return(e,n)=>{const r=t(e,n);return r||0===r?r:(0===t(n,n))-(0===t(e,e))}}(a);r>n;){if(r-n>600){const i=r-n+1,o=e-n+1,s=Math.log(i),l=.5*Math.exp(2*s/3),u=.5*Math.sqrt(s*l*(i-l)/i)*(o-i/2<0?-1:1);U(t,e,Math.max(n,Math.floor(e-o*l/i+u)),Math.min(r,Math.floor(e+(i-o)*l/i+u)),a)}const i=t[e];let o=n,s=r;for(H(t,n,e),a(t[r],i)>0&&H(t,n,r);o<s;){for(H(t,o,s),++o,--s;a(t[o],i)<0;)++o;for(;a(t[s],i)>0;)--s}0===a(t[n],i)?H(t,n,s):(++s,H(t,s,r)),s<=e&&(n=s+1),e<=s&&(r=s-1)}return t}function H(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function X(t,e){return function(t,e,n){if(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n)),(r=t.length)&&!isNaN(e=+e)){if(e<=0||r<2)return R(t);if(e>=1)return z(t);var r,a=(r-1)*e,i=Math.floor(a),o=z(U(t,i).subarray(0,i+1));return o+(R(t.subarray(i+1))-o)*(a-i)}}(t,.5,e)}function W(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}function j(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let a of t)(a=+e(a,++r,t))&&(n+=a)}return n}function q(t){return t}var G=1,Q=2,Z=3,K=4,J=1e-6;function tt(t){return"translate("+t+",0)"}function et(t){return"translate(0,"+t+")"}function nt(t){return e=>+t(e)}function rt(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function at(){return!this.__axis}function it(t,e){var n=[],r=null,a=null,i=6,o=6,s=3,l="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,u=t===G||t===K?-1:1,c=t===K||t===Q?"x":"y",h=t===G||t===Z?tt:et;function f(f){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==a?e.tickFormat?e.tickFormat.apply(e,n):q:a,p=Math.max(i,0)+s,y=e.range(),m=+y[0]+l,v=+y[y.length-1]+l,x=(e.bandwidth?rt:nt)(e.copy(),l),A=f.selection?f.selection():f,w=A.selectAll(".domain").data([null]),b=A.selectAll(".tick").data(d,e).order(),D=b.exit(),k=b.enter().append("g").attr("class","tick"),C=b.select("line"),M=b.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(k),C=C.merge(k.append("line").attr("stroke","currentColor").attr(c+"2",u*i)),M=M.merge(k.append("text").attr("fill","currentColor").attr(c,u*p).attr("dy",t===G?"0em":t===Z?"0.71em":"0.32em")),f!==A&&(w=w.transition(f),b=b.transition(f),C=C.transition(f),M=M.transition(f),D=D.transition(f).attr("opacity",J).attr("transform",(function(t){return isFinite(t=x(t))?h(t+l):this.getAttribute("transform")})),k.attr("opacity",J).attr("transform",(function(t){var e=this.parentNode.__axis;return h((e&&isFinite(e=e(t))?e:x(t))+l)}))),D.remove(),w.attr("d",t===K||t===Q?o?"M"+u*o+","+m+"H"+l+"V"+v+"H"+u*o:"M"+l+","+m+"V"+v:o?"M"+m+","+u*o+"V"+l+"H"+v+"V"+u*o:"M"+m+","+l+"H"+v),b.attr("opacity",1).attr("transform",(function(t){return h(x(t)+l)})),C.attr(c+"2",u*i),M.attr(c,u*p).text(g),A.filter(at).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Q?"start":t===K?"end":"middle"),A.each((function(){this.__axis=x}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=Array.from(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(a=t,f):a},f.tickSize=function(t){return arguments.length?(i=o=+t,f):i},f.tickSizeInner=function(t){return arguments.length?(i=+t,f):i},f.tickSizeOuter=function(t){return arguments.length?(o=+t,f):o},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f.offset=function(t){return arguments.length?(l=+t,f):l},f}function ot(t){return it(Z,t)}function st(t){return it(K,t)}var lt={value:()=>{}};function ut(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function ht(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function ft(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=lt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}ct.prototype=ut.prototype={constructor:ct,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),o=-1,s=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=i[o]).type)a[n]=ft(a[n],t.name,e);else if(null==e)for(n in a)a[n]=ft(a[n],t.name,null);return this}for(;++o<s;)if((n=(t=i[o]).type)&&(n=ht(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new ct(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var dt="http://www.w3.org/1999/xhtml",gt={svg:"http://www.w3.org/2000/svg",xhtml:dt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function pt(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),gt.hasOwnProperty(e)?{space:gt[e],local:t}:t}function yt(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===dt&&e.documentElement.namespaceURI===dt?e.createElement(t):e.createElementNS(n,t)}}function mt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function vt(t){var e=pt(t);return(e.local?mt:yt)(e)}function xt(){}function At(t){return null==t?xt:function(){return this.querySelector(t)}}function wt(){return[]}function bt(t){return null==t?wt:function(){return this.querySelectorAll(t)}}function Dt(t){return function(){return function(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}(t.apply(this,arguments))}}function kt(t){return function(){return this.matches(t)}}function Ct(t){return function(e){return e.matches(t)}}var Mt=Array.prototype.find;function Tt(){return this.firstElementChild}var _t=Array.prototype.filter;function Et(){return Array.from(this.children)}function Ft(t){return new Array(t.length)}function St(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function Bt(t,e,n,r,a,i){for(var o,s=0,l=e.length,u=i.length;s<u;++s)(o=e[s])?(o.__data__=i[s],r[s]=o):n[s]=new St(t,i[s]);for(;s<l;++s)(o=e[s])&&(a[s]=o)}function Nt(t,e,n,r,a,i,o){var s,l,u,c=new Map,h=e.length,f=i.length,d=new Array(h);for(s=0;s<h;++s)(l=e[s])&&(d[s]=u=o.call(l,l.__data__,s,e)+"",c.has(u)?a[s]=l:c.set(u,l));for(s=0;s<f;++s)u=o.call(t,i[s],s,i)+"",(l=c.get(u))?(r[s]=l,l.__data__=i[s],c.delete(u)):n[s]=new St(t,i[s]);for(s=0;s<h;++s)(l=e[s])&&c.get(d[s])===l&&(a[s]=l)}function It(t){return t.__data__}function Lt(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Vt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Ot(t){return function(){this.removeAttribute(t)}}function Pt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function $t(t,e){return function(){this.setAttribute(t,e)}}function Yt(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function zt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Rt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function Ut(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Ht(t){return function(){this.style.removeProperty(t)}}function Xt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Wt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function jt(t,e){return t.style.getPropertyValue(e)||Ut(t).getComputedStyle(t,null).getPropertyValue(e)}function qt(t){return function(){delete this[t]}}function Gt(t,e){return function(){this[t]=e}}function Qt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Zt(t){return t.trim().split(/^|\s+/)}function Kt(t){return t.classList||new Jt(t)}function Jt(t){this._node=t,this._names=Zt(t.getAttribute("class")||"")}function te(t,e){for(var n=Kt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function ee(t,e){for(var n=Kt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function ne(t){return function(){te(this,t)}}function re(t){return function(){ee(this,t)}}function ae(t,e){return function(){(e.apply(this,arguments)?te:ee)(this,t)}}function ie(){this.textContent=""}function oe(t){return function(){this.textContent=t}}function se(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function le(){this.innerHTML=""}function ue(t){return function(){this.innerHTML=t}}function ce(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function he(){this.nextSibling&&this.parentNode.appendChild(this)}function fe(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function de(){return null}function ge(){var t=this.parentNode;t&&t.removeChild(this)}function pe(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ye(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function me(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?e.length=a:delete this.__on}}}function ve(t,e,n){return function(){var r,a=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(a)for(var o=0,s=a.length;o<s;++o)if((r=a[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},a?a.push(r):this.__on=[r]}}function xe(t,e,n){var r=Ut(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Ae(t,e){return function(){return xe(this,t,e)}}function we(t,e){return function(){return xe(this,t,e.apply(this,arguments))}}St.prototype={constructor:St,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},Jt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var be=[null];function De(t,e){this._groups=t,this._parents=e}function ke(){return new De([[document.documentElement]],be)}function Ce(t){return"string"==typeof t?new De([[document.querySelector(t)]],[document.documentElement]):new De([[t]],be)}function Me(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Te(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function _e(){}De.prototype=ke.prototype={constructor:De,select:function(t){"function"!=typeof t&&(t=At(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,s=e[a],l=s.length,u=r[a]=new Array(l),c=0;c<l;++c)(i=s[c])&&(o=t.call(i,i.__data__,c,s))&&("__data__"in i&&(o.__data__=i.__data__),u[c]=o);return new De(r,this._parents)},selectAll:function(t){t="function"==typeof t?Dt(t):bt(t);for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,s=e[i],l=s.length,u=0;u<l;++u)(o=s[u])&&(r.push(t.call(o,o.__data__,u,s)),a.push(o));return new De(r,a)},selectChild:function(t){return this.select(null==t?Tt:function(t){return function(){return Mt.call(this.children,t)}}("function"==typeof t?t:Ct(t)))},selectChildren:function(t){return this.selectAll(null==t?Et:function(t){return function(){return _t.call(this.children,t)}}("function"==typeof t?t:Ct(t)))},filter:function(t){"function"!=typeof t&&(t=kt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],s=o.length,l=r[a]=[],u=0;u<s;++u)(i=o[u])&&t.call(i,i.__data__,u,o)&&l.push(i);return new De(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,It);var n=e?Nt:Bt,r=this._parents,a=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=a.length,o=new Array(i),s=new Array(i),l=new Array(i),u=0;u<i;++u){var c=r[u],h=a[u],f=h.length,d=Lt(t.call(c,c&&c.__data__,u,r)),g=d.length,p=s[u]=new Array(g),y=o[u]=new Array(g);n(c,h,p,y,l[u]=new Array(f),d,e);for(var m,v,x=0,A=0;x<g;++x)if(m=p[x]){for(x>=A&&(A=x+1);!(v=y[A])&&++A<g;);m._next=v||null}}return(o=new De(o,r))._enter=s,o._exit=l,o},enter:function(){return new De(this._enter||this._groups.map(Ft),this._parents)},exit:function(){return new De(this._exit||this._groups.map(Ft),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(a=e(a))&&(a=a.selection()),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,a=n.length,i=r.length,o=Math.min(a,i),s=new Array(a),l=0;l<o;++l)for(var u,c=n[l],h=r[l],f=c.length,d=s[l]=new Array(f),g=0;g<f;++g)(u=c[g]||h[g])&&(d[g]=u);for(;l<a;++l)s[l]=n[l];return new De(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Vt);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,s=n[i],l=s.length,u=a[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(u[c]=o);u.sort(e)}return new De(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,s=i.length;o<s;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=pt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Pt:Ot:"function"==typeof e?n.local?Rt:zt:n.local?Yt:$t)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ht:"function"==typeof e?Wt:Xt)(t,e,null==n?"":n)):jt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?qt:"function"==typeof e?Qt:Gt)(t,e)):this.node()[t]},classed:function(t,e){var n=Zt(t+"");if(arguments.length<2){for(var r=Kt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?ae:e?ne:re)(n,e))},text:function(t){return arguments.length?this.each(null==t?ie:("function"==typeof t?se:oe)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?le:("function"==typeof t?ce:ue)(t)):this.node().innerHTML},raise:function(){return this.each(he)},lower:function(){return this.each(fe)},append:function(t){var e="function"==typeof t?t:vt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:vt(t),r=null==e?de:"function"==typeof e?e:At(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ge)},clone:function(t){return this.select(t?ye:pe)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),o=i.length;if(!(arguments.length<2)){for(s=e?ve:me,r=0;r<o;++r)this.each(s(i[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<o;++r)if((a=i[r]).type===l.type&&a.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?we:Ae)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,a=t[e],i=0,o=a.length;i<o;++i)(r=a[i])&&(yield r)}};var Ee=.7,Fe=1/Ee,Se="\\s*([+-]?\\d+)\\s*",Be="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ne="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ie=/^#([0-9a-f]{3,8})$/,Le=new RegExp(`^rgb\\(${Se},${Se},${Se}\\)$`),Ve=new RegExp(`^rgb\\(${Ne},${Ne},${Ne}\\)$`),Oe=new RegExp(`^rgba\\(${Se},${Se},${Se},${Be}\\)$`),Pe=new RegExp(`^rgba\\(${Ne},${Ne},${Ne},${Be}\\)$`),$e=new RegExp(`^hsl\\(${Be},${Ne},${Ne}\\)$`),Ye=new RegExp(`^hsla\\(${Be},${Ne},${Ne},${Be}\\)$`),ze={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Re(){return this.rgb().formatHex()}function Ue(){return this.rgb().formatRgb()}function He(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Ie.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Xe(e):3===n?new Ge(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?We(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?We(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Le.exec(t))?new Ge(e[1],e[2],e[3],1):(e=Ve.exec(t))?new Ge(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Oe.exec(t))?We(e[1],e[2],e[3],e[4]):(e=Pe.exec(t))?We(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=$e.exec(t))?en(e[1],e[2]/100,e[3]/100,1):(e=Ye.exec(t))?en(e[1],e[2]/100,e[3]/100,e[4]):ze.hasOwnProperty(t)?Xe(ze[t]):"transparent"===t?new Ge(NaN,NaN,NaN,0):null}function Xe(t){return new Ge(t>>16&255,t>>8&255,255&t,1)}function We(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ge(t,e,n,r)}function je(t){return t instanceof _e||(t=He(t)),t?new Ge((t=t.rgb()).r,t.g,t.b,t.opacity):new Ge}function qe(t,e,n,r){return 1===arguments.length?je(t):new Ge(t,e,n,null==r?1:r)}function Ge(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Qe(){return`#${tn(this.r)}${tn(this.g)}${tn(this.b)}`}function Ze(){const t=Ke(this.opacity);return`${1===t?"rgb(":"rgba("}${Je(this.r)}, ${Je(this.g)}, ${Je(this.b)}${1===t?")":`, ${t})`}`}function Ke(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function Je(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function tn(t){return((t=Je(t))<16?"0":"")+t.toString(16)}function en(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new rn(t,e,n,r)}function nn(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof _e||(t=He(t)),!t)return new rn;if(t instanceof rn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,s=i-a,l=(i+a)/2;return s?(o=e===i?(n-r)/s+6*(n<r):n===i?(r-e)/s+2:(e-n)/s+4,s/=l<.5?i+a:2-i-a,o*=60):s=l>0&&l<1?0:o,new rn(o,s,l,t.opacity)}function rn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function an(t){return(t=(t||0)%360)<0?t+360:t}function on(t){return Math.max(0,Math.min(1,t||0))}function sn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Me(_e,He,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Re,formatHex:Re,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return nn(this).formatHsl()},formatRgb:Ue,toString:Ue}),Me(Ge,qe,Te(_e,{brighter(t){return t=null==t?Fe:Math.pow(Fe,t),new Ge(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Ee:Math.pow(Ee,t),new Ge(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Ge(Je(this.r),Je(this.g),Je(this.b),Ke(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Qe,formatHex:Qe,formatHex8:function(){return`#${tn(this.r)}${tn(this.g)}${tn(this.b)}${tn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Ze,toString:Ze})),Me(rn,(function(t,e,n,r){return 1===arguments.length?nn(t):new rn(t,e,n,null==r?1:r)}),Te(_e,{brighter(t){return t=null==t?Fe:Math.pow(Fe,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Ee:Math.pow(Ee,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new Ge(sn(t>=240?t-240:t+120,a,r),sn(t,a,r),sn(t<120?t+240:t-120,a,r),this.opacity)},clamp(){return new rn(an(this.h),on(this.s),on(this.l),Ke(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=Ke(this.opacity);return`${1===t?"hsl(":"hsla("}${an(this.h)}, ${100*on(this.s)}%, ${100*on(this.l)}%${1===t?")":`, ${t})`}`}}));const ln=Math.PI/180,un=180/Math.PI,cn=.96422,hn=1,fn=.82521,dn=4/29,gn=6/29,pn=3*gn*gn,yn=gn*gn*gn;function mn(t){if(t instanceof xn)return new xn(t.l,t.a,t.b,t.opacity);if(t instanceof kn)return Cn(t);t instanceof Ge||(t=je(t));var e,n,r=Dn(t.r),a=Dn(t.g),i=Dn(t.b),o=An((.2225045*r+.7168786*a+.0606169*i)/hn);return r===a&&a===i?e=n=o:(e=An((.4360747*r+.3850649*a+.1430804*i)/cn),n=An((.0139322*r+.0971045*a+.7141733*i)/fn)),new xn(116*o-16,500*(e-o),200*(o-n),t.opacity)}function vn(t,e,n,r){return 1===arguments.length?mn(t):new xn(t,e,n,null==r?1:r)}function xn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function An(t){return t>yn?Math.pow(t,1/3):t/pn+dn}function wn(t){return t>gn?t*t*t:pn*(t-dn)}function bn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Dn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function kn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Cn(t){if(isNaN(t.h))return new xn(t.l,0,0,t.opacity);var e=t.h*ln;return new xn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Me(xn,vn,Te(_e,{brighter(t){return new xn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker(t){return new xn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Ge(bn(3.1338561*(e=cn*wn(e))-1.6168667*(t=hn*wn(t))-.4906146*(n=fn*wn(n))),bn(-.9787684*e+1.9161415*t+.033454*n),bn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Me(kn,(function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof kn)return new kn(t.h,t.c,t.l,t.opacity);if(t instanceof xn||(t=mn(t)),0===t.a&&0===t.b)return new kn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*un;return new kn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new kn(t,e,n,null==r?1:r)}),Te(_e,{brighter(t){return new kn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker(t){return new kn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb(){return Cn(this).rgb()}}));var Mn=t=>()=>t;function Tn(t){return 1==(t=+t)?_n:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Mn(isNaN(e)?n:e)}}function _n(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Mn(isNaN(t)?e:t)}var En=function t(e){var n=Tn(e);function r(t,e){var r=n((t=qe(t)).r,(e=qe(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=_n(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);var Fn,Sn=(Fn=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,s=r<e-1?t[r+2]:2*i-a;return function(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}((n-r/e)*e,o,a,i,s)}},function(t){var e,n,r=t.length,a=new Array(r),i=new Array(r),o=new Array(r);for(e=0;e<r;++e)n=qe(t[e]),a[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return a=Fn(a),i=Fn(i),o=Fn(o),n.opacity=1,function(t){return n.r=a(t),n.g=i(t),n.b=o(t),n+""}});function Bn(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,a=e.slice();return function(i){for(n=0;n<r;++n)a[n]=t[n]*(1-i)+e[n]*i;return a}}function Nn(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Yn(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function In(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Ln(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Vn(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Yn(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}var On=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pn=new RegExp(On.source,"g");function $n(t,e){var n,r,a,i=On.lastIndex=Pn.lastIndex=0,o=-1,s=[],l=[];for(t+="",e+="";(n=On.exec(t))&&(r=Pn.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),s[o]?s[o]+=a:s[++o]=a),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,l.push({i:o,x:Ln(n,r)})),i=Pn.lastIndex;return i<e.length&&(a=e.slice(i),s[o]?s[o]+=a:s[++o]=a),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Yn(t,e){var n,r=typeof e;return null==e||"boolean"===r?Mn(e):("number"===r?Ln:"string"===r?(n=He(e))?(e=n,En):$n:e instanceof He?En:e instanceof Date?In:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Bn:Array.isArray(e)?Nn:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Vn:Ln)(t,e)}function zn(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Rn,Un=180/Math.PI,Hn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Xn(t,e,n,r,a,i){var o,s,l;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*Un,skewX:Math.atan(l)*Un,scaleX:o,scaleY:s}}function Wn(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var s=[],l=[];return i=t(i),o=t(o),function(t,r,a,i,o,s){if(t!==a||r!==i){var l=o.push("translate(",null,e,null,n);s.push({i:l-4,x:Ln(t,a)},{i:l-2,x:Ln(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,s,l),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Ln(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,s,l),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Ln(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,s,l),function(t,e,n,r,i,o){if(t!==n||e!==r){var s=i.push(a(i)+"scale(",null,",",null,")");o.push({i:s-4,x:Ln(t,n)},{i:s-2,x:Ln(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,s,l),i=o=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var jn=Wn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Hn:Xn(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),qn=Wn((function(t){return null==t?Hn:(Rn||(Rn=document.createElementNS("http://www.w3.org/2000/svg","g")),Rn.setAttribute("transform",t),(t=Rn.transform.baseVal.consolidate())?Xn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Hn)}),", ",")",")");function Gn(t,e){var n=_n((t=vn(t)).l,(e=vn(e)).l),r=_n(t.a,e.a),a=_n(t.b,e.b),i=_n(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}var Qn,Zn,Kn=0,Jn=0,tr=0,er=1e3,nr=0,rr=0,ar=0,ir="object"==typeof performance&&performance.now?performance:Date,or="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function sr(){return rr||(or(lr),rr=ir.now()+ar)}function lr(){rr=0}function ur(){this._call=this._time=this._next=null}function cr(t,e,n){var r=new ur;return r.restart(t,e,n),r}function hr(){rr=(nr=ir.now())+ar,Kn=Jn=0;try{!function(){sr(),++Kn;for(var t,e=Qn;e;)(t=rr-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Kn}()}finally{Kn=0,function(){var t,e,n=Qn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Qn=e);Zn=t,dr(r)}(),rr=0}}function fr(){var t=ir.now(),e=t-nr;e>er&&(ar-=e,nr=t)}function dr(t){Kn||(Jn&&(Jn=clearTimeout(Jn)),t-rr>24?(t<1/0&&(Jn=setTimeout(hr,t-ir.now()-ar)),tr&&(tr=clearInterval(tr))):(tr||(nr=ir.now(),tr=setInterval(fr,er)),Kn=1,or(hr)))}function gr(t,e,n){var r=new ur;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}ur.prototype=cr.prototype={constructor:ur,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?sr():+n)+(null==e?0:+e),this._next||Zn===this||(Zn?Zn._next=this:Qn=this,Zn=this),this._call=t,this._time=n,dr()},stop:function(){this._call&&(this._call=null,this._time=1/0,dr())}};var pr=ut("start","end","cancel","interrupt"),yr=[],mr=0,vr=1,xr=2,Ar=3,wr=4,br=5,Dr=6;function kr(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(t){n.state=vr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(i){var u,c,h,f;if(n.state!==vr)return l();for(u in a)if((f=a[u]).name===n.name){if(f.state===Ar)return gr(o);f.state===wr?(f.state=Dr,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete a[u]):+u<e&&(f.state=Dr,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete a[u])}if(gr((function(){n.state===Ar&&(n.state=wr,n.timer.restart(s,n.delay,n.time),s(i))})),n.state=xr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===xr){for(n.state=Ar,r=new Array(h=n.tween.length),u=0,c=-1;u<h;++u)(f=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function s(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=br,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);n.state===br&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=Dr,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=cr(i,0,n.time)}(t,n,{name:e,index:r,group:a,on:pr,tween:yr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:mr})}function Cr(t,e){var n=Tr(t,e);if(n.state>mr)throw new Error("too late; already scheduled");return n}function Mr(t,e){var n=Tr(t,e);if(n.state>Ar)throw new Error("too late; already running");return n}function Tr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function _r(t,e){var n,r;return function(){var a=Mr(this,t),i=a.tween;if(i!==n)for(var o=0,s=(r=n=i).length;o<s;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}function Er(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Mr(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var s={name:e,value:n},l=0,u=a.length;l<u;++l)if(a[l].name===e){a[l]=s;break}l===u&&a.push(s)}i.tween=a}}function Fr(t,e,n){var r=t._id;return t.each((function(){var t=Mr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Tr(t,r).value[e]}}function Sr(t,e){var n;return("number"==typeof e?Ln:e instanceof He?En:(n=He(e))?(e=n,En):$n)(t,e)}function Br(t){return function(){this.removeAttribute(t)}}function Nr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ir(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}}function Lr(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}function Vr(t,e,n){var r,a,i;return function(){var o,s,l=n(this);if(null!=l)return(o=this.getAttribute(t))===(s=l+"")?null:o===r&&s===a?i:(a=s,i=e(r=o,l));this.removeAttribute(t)}}function Or(t,e,n){var r,a,i;return function(){var o,s,l=n(this);if(null!=l)return(o=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:o===r&&s===a?i:(a=s,i=e(r=o,l));this.removeAttributeNS(t.space,t.local)}}function Pr(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,a)),n}return a._value=e,a}function $r(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,a)),n}return a._value=e,a}function Yr(t,e){return function(){Cr(this,t).delay=+e.apply(this,arguments)}}function zr(t,e){return e=+e,function(){Cr(this,t).delay=e}}function Rr(t,e){return function(){Mr(this,t).duration=+e.apply(this,arguments)}}function Ur(t,e){return e=+e,function(){Mr(this,t).duration=e}}var Hr=ke.prototype.constructor;function Xr(t){return function(){this.style.removeProperty(t)}}var Wr=0;function jr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function qr(){return++Wr}var Gr=ke.prototype;jr.prototype={constructor:jr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=At(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var s,l,u=r[o],c=u.length,h=i[o]=new Array(c),f=0;f<c;++f)(s=u[f])&&(l=t.call(s,s.__data__,f,u))&&("__data__"in s&&(l.__data__=s.__data__),h[f]=l,kr(h[f],e,n,f,h,Tr(s,n)));return new jr(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=bt(t));for(var r=this._groups,a=r.length,i=[],o=[],s=0;s<a;++s)for(var l,u=r[s],c=u.length,h=0;h<c;++h)if(l=u[h]){for(var f,d=t.call(l,l.__data__,h,u),g=Tr(l,n),p=0,y=d.length;p<y;++p)(f=d[p])&&kr(f,e,n,p,d,g);i.push(d),o.push(l)}return new jr(i,o,e,n)},selectChild:Gr.selectChild,selectChildren:Gr.selectChildren,filter:function(t){"function"!=typeof t&&(t=kt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],s=o.length,l=r[a]=[],u=0;u<s;++u)(i=o[u])&&t.call(i,i.__data__,u,o)&&l.push(i);return new jr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),s=0;s<i;++s)for(var l,u=e[s],c=n[s],h=u.length,f=o[s]=new Array(h),d=0;d<h;++d)(l=u[d]||c[d])&&(f[d]=l);for(;s<r;++s)o[s]=e[s];return new jr(o,this._parents,this._name,this._id)},selection:function(){return new Hr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=qr(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,s=r[i],l=s.length,u=0;u<l;++u)if(o=s[u]){var c=Tr(o,e);kr(o,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new jr(r,this._parents,t,n)},call:Gr.call,nodes:Gr.nodes,node:Gr.node,size:Gr.size,empty:Gr.empty,each:Gr.each,on:function(t,e){var n=this._id;return arguments.length<2?Tr(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Cr:Mr;return function(){var o=i(this,t),s=o.on;s!==r&&(a=(r=s).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=pt(t),r="transform"===n?qn:Sr;return this.attrTween(t,"function"==typeof e?(n.local?Or:Vr)(n,r,Fr(this,"attr."+t,e)):null==e?(n.local?Nr:Br)(n):(n.local?Lr:Ir)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=pt(t);return this.tween(n,(r.local?Pr:$r)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?jn:Sr;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=jt(this,t),o=(this.style.removeProperty(t),jt(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,Xr(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=jt(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=jt(this,t)),o===l?null:o===r&&l===a?i:(a=l,i=e(r=o,s))}}(t,r,Fr(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,s="end."+o;return function(){var l=Mr(this,t),u=l.on,c=null==l.value[o]?i||(i=Xr(e)):void 0;u===n&&a===c||(r=(n=u).copy()).on(s,a=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=jt(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,i,n)),r}return i._value=e,i}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Fr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=Tr(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?_r:Er)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Yr:zr)(e,t)):Tr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Rr:Ur)(e,t)):Tr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Mr(this,t).ease=e}}(e,t)):Tr(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Mr(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var s={value:o},l={value:function(){0==--a&&i()}};n.each((function(){var n=Mr(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e})),0===a&&i()}))},[Symbol.iterator]:Gr[Symbol.iterator]};var Qr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Zr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}ke.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>xr&&n.state<br,n.state=Dr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)}))},ke.prototype.transition=function(t){var e,n;t instanceof jr?(e=t._id,t=t._name):(e=qr(),(n=Qr).time=sr(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,s=r[i],l=s.length,u=0;u<l;++u)(o=s[u])&&kr(o,t,e,u,s,n||Zr(o,e));return new jr(r,this._parents,t,e)};const Kr=Math.PI,Jr=2*Kr,ta=1e-6,ea=Jr-ta;function na(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class ra{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?na:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return na;const n=10**e;return function(t){this._+=t[0];for(let e=1,r=t.length;e<r;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,r){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(t,e,n,r,a,i){this._append`C${+t},${+e},${+n},${+r},${this._x1=+a},${this._y1=+i}`}arcTo(t,e,n,r,a){if(t=+t,e=+e,n=+n,r=+r,(a=+a)<0)throw new Error(`negative radius: ${a}`);let i=this._x1,o=this._y1,s=n-t,l=r-e,u=i-t,c=o-e,h=u*u+c*c;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(h>ta)if(Math.abs(c*s-l*u)>ta&&a){let f=n-i,d=r-o,g=s*s+l*l,p=f*f+d*d,y=Math.sqrt(g),m=Math.sqrt(h),v=a*Math.tan((Kr-Math.acos((g+h-p)/(2*y*m)))/2),x=v/m,A=v/y;Math.abs(x-1)>ta&&this._append`L${t+x*u},${e+x*c}`,this._append`A${a},${a},0,0,${+(c*f>u*d)},${this._x1=t+A*s},${this._y1=e+A*l}`}else this._append`L${this._x1=t},${this._y1=e}`;else;}arc(t,e,n,r,a,i){if(t=+t,e=+e,i=!!i,(n=+n)<0)throw new Error(`negative radius: ${n}`);let o=n*Math.cos(r),s=n*Math.sin(r),l=t+o,u=e+s,c=1^i,h=i?r-a:a-r;null===this._x1?this._append`M${l},${u}`:(Math.abs(this._x1-l)>ta||Math.abs(this._y1-u)>ta)&&this._append`L${l},${u}`,n&&(h<0&&(h=h%Jr+Jr),h>ea?this._append`A${n},${n},0,1,${c},${t-o},${e-s}A${n},${n},0,1,${c},${this._x1=l},${this._y1=u}`:h>ta&&this._append`A${n},${n},0,${+(h>=Kr)},${c},${this._x1=t+n*Math.cos(a)},${this._y1=e+n*Math.sin(a)}`)}rect(t,e,n,r){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function aa(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function ia(t){return(t=aa(Math.abs(t)))?t[1]:NaN}var oa,sa=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function la(t){if(!(e=sa.exec(t)))throw new Error("invalid format: "+t);var e;return new ua({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function ua(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function ca(t,e){var n=aa(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}la.prototype=ua.prototype,ua.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ha={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>ca(100*t,e),r:ca,s:function(t,e){var n=aa(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(oa=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+aa(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function fa(t){return t}var da,ga,pa,ya=Array.prototype.map,ma=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function va(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?fa:(e=ya.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],o=0,s=e[0],l=0;a>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),i.push(t.substring(a-=s,a+s)),!((l+=s+1)>r));)s=e[o=(o+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?fa:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(ya.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=la(t)).fill,n=t.align,h=t.sign,f=t.symbol,d=t.zero,g=t.width,p=t.comma,y=t.precision,m=t.trim,v=t.type;"n"===v?(p=!0,v="g"):ha[v]||(void 0===y&&(y=12),m=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var x="$"===f?a:"#"===f&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",A="$"===f?i:/[%p]/.test(v)?l:"",w=ha[v],b=/[defgprs%]/.test(v);function D(t){var a,i,l,f=x,D=A;if("c"===v)D=w(t)+D,t="";else{var k=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:w(Math.abs(t),y),m&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(!+t[r])break t;a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),k&&0==+t&&"+"!==h&&(k=!1),f=(k?"("===h?h:u:"-"===h||"("===h?"":h)+f,D=("s"===v?ma[8+oa/3]:"")+D+(k&&"("===h?")":""),b)for(a=-1,i=t.length;++a<i;)if(48>(l=t.charCodeAt(a))||l>57){D=(46===l?o+t.slice(a+1):t.slice(a))+D,t=t.slice(0,a);break}}p&&!d&&(t=r(t,1/0));var C=f.length+t.length+D.length,M=C<g?new Array(g-C+1).join(e):"";switch(p&&d&&(t=r(M+t,M.length?g-D.length:1/0),M=""),n){case"<":t=f+t+D+M;break;case"=":t=f+M+t+D;break;case"^":t=M.slice(0,C=M.length>>1)+f+t+D+M.slice(C);break;default:t=M+f+t+D}return s(t)}return y=void 0===y?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),D.toString=function(){return t+""},D}return{format:h,formatPrefix:function(t,e){var n=h(((t=la(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ia(e)/3))),a=Math.pow(10,-r),i=ma[8+r/3];return function(t){return n(a*t)+i}}}}function xa(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}da=va({thousands:",",grouping:[3],currency:["$",""]}),ga=da.format,pa=da.formatPrefix;const Aa=Symbol("implicit");function wa(){var t=new S,e=[],n=[],r=Aa;function a(a){let i=t.get(a);if(void 0===i){if(r!==Aa)return r;t.set(a,i=e.push(a)-1)}return n[i%n.length]}return a.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new S;for(const r of n)t.has(r)||t.set(r,e.push(r)-1);return a},a.range=function(t){return arguments.length?(n=Array.from(t),a):n.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return wa(e,n).unknown(r)},xa.apply(a,arguments),a}function ba(t){return+t}var Da=[0,1];function ka(t){return t}function Ca(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Ma(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=Ca(a,r),i=n(o,i)):(r=Ca(r,a),i=n(i,o)),function(t){return i(r(t))}}function Ta(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)a[o]=Ca(t[o],t[o+1]),i[o]=n(e[o],e[o+1]);return function(e){var n=F(t,e,1,r)-1;return i[n](a[n](e))}}function _a(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ea(){var t,e,n,r,a,i,o=Da,s=Da,l=Yn,u=ka;function c(){var t,e,n,l=Math.min(o.length,s.length);return u!==ka&&(t=o[0],e=o[l-1],t>e&&(n=t,t=e,e=n),u=function(n){return Math.max(t,Math.min(e,n))}),r=l>2?Ta:Ma,a=i=null,h}function h(e){return null==e||isNaN(e=+e)?n:(a||(a=r(o.map(t),s,l)))(t(u(e)))}return h.invert=function(n){return u(e((i||(i=r(s,o.map(t),Ln)))(n)))},h.domain=function(t){return arguments.length?(o=Array.from(t,ba),c()):o.slice()},h.range=function(t){return arguments.length?(s=Array.from(t),c()):s.slice()},h.rangeRound=function(t){return s=Array.from(t),l=zn,c()},h.clamp=function(t){return arguments.length?(u=!!t||ka,c()):u!==ka},h.interpolate=function(t){return arguments.length?(l=t,c()):l},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,r){return t=n,e=r,c()}}function Fa(){return Ea()(ka,ka)}function Sa(t,e,n,r){var a,i=Y(t,e,n);switch((r=la(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ia(e)/3)))-ia(Math.abs(t)))}(i,o))||(r.precision=a),pa(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,ia(e)-ia(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-ia(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return ga(r)}function Ba(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const r=e<t,[a,i,o]=r?P(e,t,n):P(t,e,n);if(!(i>=a))return[];const s=i-a+1,l=new Array(s);if(r)if(o<0)for(let t=0;t<s;++t)l[t]=(i-t)/-o;else for(let t=0;t<s;++t)l[t]=(i-t)*o;else if(o<0)for(let t=0;t<s;++t)l[t]=(a+t)/-o;else for(let t=0;t<s;++t)l[t]=(a+t)*o;return l}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Sa(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a,i=e(),o=0,s=i.length-1,l=i[o],u=i[s],c=10;for(u<l&&(a=l,l=u,u=a,a=o,o=s,s=a);c-- >0;){if((a=$(l,u,n))===r)return i[o]=l,i[s]=u,e(i);if(a>0)l=Math.floor(l/a)*a,u=Math.ceil(u/a)*a;else{if(!(a<0))break;l=Math.ceil(l*a)/a,u=Math.floor(u*a)/a}r=a}return t},t}function Na(){var t=Fa();return t.copy=function(){return _a(t,Na())},xa.apply(t,arguments),Ba(t)}const Ia=new Date,La=new Date;function Va(t,e,n,r){function a(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return a.floor=e=>(t(e=new Date(+e)),e),a.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),a.round=t=>{const e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),a.range=(n,r,i)=>{const o=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return o;let s;do{o.push(s=new Date(+n)),e(n,i),t(n)}while(s<n&&n<r);return o},a.filter=n=>Va((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,r)=>{if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})),n&&(a.count=(e,r)=>(Ia.setTime(+e),La.setTime(+r),t(Ia),t(La),Math.floor(n(Ia,La))),a.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?e=>r(e)%t==0:e=>a.count(0,e)%t==0):a:null)),a}const Oa=Va((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));Oa.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?Va((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):Oa:null),Oa.range;const Pa=1e3,$a=6e4,Ya=36e5,za=864e5,Ra=6048e5,Ua=2592e6,Ha=31536e6,Xa=Va((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*Pa)}),((t,e)=>(e-t)/Pa),(t=>t.getUTCSeconds()));Xa.range;const Wa=Va((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*Pa)}),((t,e)=>{t.setTime(+t+e*$a)}),((t,e)=>(e-t)/$a),(t=>t.getMinutes()));Wa.range;const ja=Va((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*$a)}),((t,e)=>(e-t)/$a),(t=>t.getUTCMinutes()));ja.range;const qa=Va((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*Pa-t.getMinutes()*$a)}),((t,e)=>{t.setTime(+t+e*Ya)}),((t,e)=>(e-t)/Ya),(t=>t.getHours()));qa.range;const Ga=Va((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*Ya)}),((t,e)=>(e-t)/Ya),(t=>t.getUTCHours()));Ga.range;const Qa=Va((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*$a)/za),(t=>t.getDate()-1));Qa.range;const Za=Va((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/za),(t=>t.getUTCDate()-1));Za.range;const Ka=Va((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/za),(t=>Math.floor(t/za)));function Ja(t){return Va((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*$a)/Ra))}Ka.range;const ti=Ja(0),ei=Ja(1),ni=Ja(2),ri=Ja(3),ai=Ja(4),ii=Ja(5),oi=Ja(6);function si(t){return Va((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/Ra))}ti.range,ei.range,ni.range,ri.range,ai.range,ii.range,oi.range;const li=si(0),ui=si(1),ci=si(2),hi=si(3),fi=si(4),di=si(5),gi=si(6);li.range,ui.range,ci.range,hi.range,fi.range,di.range,gi.range;const pi=Va((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth()));pi.range;const yi=Va((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth()));yi.range;const mi=Va((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear()));mi.every=t=>isFinite(t=Math.floor(t))&&t>0?Va((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null,mi.range;const vi=Va((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));function xi(t,e,n,r,a,i){const o=[[Xa,1,Pa],[Xa,5,5e3],[Xa,15,15e3],[Xa,30,3e4],[i,1,$a],[i,5,3e5],[i,15,9e5],[i,30,18e5],[a,1,Ya],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,za],[r,2,1728e5],[n,1,Ra],[e,1,Ua],[e,3,7776e6],[t,1,Ha]];function s(e,n,r){const a=Math.abs(n-e)/r,i=T((([,,t])=>t)).right(o,a);if(i===o.length)return t.every(Y(e/Ha,n/Ha,r));if(0===i)return Oa.every(Math.max(Y(e,n,r),1));const[s,l]=o[a/o[i-1][2]<o[i][2]/a?i-1:i];return s.every(l)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const a=n&&"function"==typeof n.range?n:s(t,e,n),i=a?a.range(t,+e+1):[];return r?i.reverse():i},s]}vi.every=t=>isFinite(t=Math.floor(t))&&t>0?Va((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null,vi.range,xi(vi,yi,li,Ka,Ga,ja);const[Ai,wi]=xi(mi,pi,ti,Qa,qa,Wa);function bi(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Di(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ki(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Ci,Mi,Ti={"-":"",_:" ",0:"0"},_i=/^\s*\d+/,Ei=/^%/,Fi=/[\\^$*+?|[\]().{}]/g;function Si(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function Bi(t){return t.replace(Fi,"\\$&")}function Ni(t){return new RegExp("^(?:"+t.map(Bi).join("|")+")","i")}function Ii(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Li(t,e,n){var r=_i.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Vi(t,e,n){var r=_i.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Oi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Pi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function $i(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Yi(t,e,n){var r=_i.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function zi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ri(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ui(t,e,n){var r=_i.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Hi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Xi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Wi(t,e,n){var r=_i.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function ji(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function qi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Gi(t,e,n){var r=_i.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Qi(t,e,n){var r=_i.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Zi(t,e,n){var r=_i.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ki(t,e,n){var r=Ei.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ji(t,e,n){var r=_i.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function to(t,e,n){var r=_i.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function eo(t,e){return Si(t.getDate(),e,2)}function no(t,e){return Si(t.getHours(),e,2)}function ro(t,e){return Si(t.getHours()%12||12,e,2)}function ao(t,e){return Si(1+Qa.count(mi(t),t),e,3)}function io(t,e){return Si(t.getMilliseconds(),e,3)}function oo(t,e){return io(t,e)+"000"}function so(t,e){return Si(t.getMonth()+1,e,2)}function lo(t,e){return Si(t.getMinutes(),e,2)}function uo(t,e){return Si(t.getSeconds(),e,2)}function co(t){var e=t.getDay();return 0===e?7:e}function ho(t,e){return Si(ti.count(mi(t)-1,t),e,2)}function fo(t){var e=t.getDay();return e>=4||0===e?ai(t):ai.ceil(t)}function go(t,e){return t=fo(t),Si(ai.count(mi(t),t)+(4===mi(t).getDay()),e,2)}function po(t){return t.getDay()}function yo(t,e){return Si(ei.count(mi(t)-1,t),e,2)}function mo(t,e){return Si(t.getFullYear()%100,e,2)}function vo(t,e){return Si((t=fo(t)).getFullYear()%100,e,2)}function xo(t,e){return Si(t.getFullYear()%1e4,e,4)}function Ao(t,e){var n=t.getDay();return Si((t=n>=4||0===n?ai(t):ai.ceil(t)).getFullYear()%1e4,e,4)}function wo(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Si(e/60|0,"0",2)+Si(e%60,"0",2)}function bo(t,e){return Si(t.getUTCDate(),e,2)}function Do(t,e){return Si(t.getUTCHours(),e,2)}function ko(t,e){return Si(t.getUTCHours()%12||12,e,2)}function Co(t,e){return Si(1+Za.count(vi(t),t),e,3)}function Mo(t,e){return Si(t.getUTCMilliseconds(),e,3)}function To(t,e){return Mo(t,e)+"000"}function _o(t,e){return Si(t.getUTCMonth()+1,e,2)}function Eo(t,e){return Si(t.getUTCMinutes(),e,2)}function Fo(t,e){return Si(t.getUTCSeconds(),e,2)}function So(t){var e=t.getUTCDay();return 0===e?7:e}function Bo(t,e){return Si(li.count(vi(t)-1,t),e,2)}function No(t){var e=t.getUTCDay();return e>=4||0===e?fi(t):fi.ceil(t)}function Io(t,e){return t=No(t),Si(fi.count(vi(t),t)+(4===vi(t).getUTCDay()),e,2)}function Lo(t){return t.getUTCDay()}function Vo(t,e){return Si(ui.count(vi(t)-1,t),e,2)}function Oo(t,e){return Si(t.getUTCFullYear()%100,e,2)}function Po(t,e){return Si((t=No(t)).getUTCFullYear()%100,e,2)}function $o(t,e){return Si(t.getUTCFullYear()%1e4,e,4)}function Yo(t,e){var n=t.getUTCDay();return Si((t=n>=4||0===n?fi(t):fi.ceil(t)).getUTCFullYear()%1e4,e,4)}function zo(){return"+0000"}function Ro(){return"%"}function Uo(t){return+t}function Ho(t){return Math.floor(+t/1e3)}function Xo(t){return new Date(t)}function Wo(t){return t instanceof Date?+t:+new Date(+t)}function jo(t,e,n,r,a,i,o,s,l,u){var c=Fa(),h=c.invert,f=c.domain,d=u(".%L"),g=u(":%S"),p=u("%I:%M"),y=u("%I %p"),m=u("%a %d"),v=u("%b %d"),x=u("%B"),A=u("%Y");function w(t){return(l(t)<t?d:s(t)<t?g:o(t)<t?p:i(t)<t?y:r(t)<t?a(t)<t?m:v:n(t)<t?x:A)(t)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?f(Array.from(t,Wo)):f().map(Xo)},c.ticks=function(e){var n=f();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?w:u(e)},c.nice=function(t){var n=f();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?f(function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],o=t[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),t[r]=e.floor(i),t[a]=e.ceil(o),t}(n,t)):c},c.copy=function(){return _a(c,jo(t,e,n,r,a,i,o,s,l,u))},c}function qo(){return xa.apply(jo(Ai,wi,mi,pi,ti,Qa,qa,Wa,Xa,Mi).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}!function(t){Ci=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,s=t.months,l=t.shortMonths,u=Ni(a),c=Ii(a),h=Ni(i),f=Ii(i),d=Ni(o),g=Ii(o),p=Ni(s),y=Ii(s),m=Ni(l),v=Ii(l),x={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:eo,e:eo,f:oo,g:vo,G:Ao,H:no,I:ro,j:ao,L:io,m:so,M:lo,p:function(t){return a[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Uo,s:Ho,S:uo,u:co,U:ho,V:go,w:po,W:yo,x:null,X:null,y:mo,Y:xo,Z:wo,"%":Ro},A={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:bo,e:bo,f:To,g:Po,G:Yo,H:Do,I:ko,j:Co,L:Mo,m:_o,M:Eo,p:function(t){return a[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Uo,s:Ho,S:Fo,u:So,U:Bo,V:Io,w:Lo,W:Vo,x:null,X:null,y:Oo,Y:$o,Z:zo,"%":Ro},w={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=f.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:Xi,e:Xi,f:Zi,g:zi,G:Yi,H:ji,I:ji,j:Wi,L:Qi,m:Hi,M:qi,p:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:Ui,Q:Ji,s:to,S:Gi,u:Vi,U:Oi,V:Pi,w:Li,W:$i,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:zi,Y:Yi,Z:Ri,"%":Ki};function b(t,e){return function(n){var r,a,i,o=[],s=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++s<u;)37===t.charCodeAt(s)&&(o.push(t.slice(l,s)),null!=(a=Ti[r=t.charAt(++s)])?r=t.charAt(++s):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),l=s+1);return o.push(t.slice(l,s)),o.join("")}}function D(t,e){return function(n){var r,a,i=ki(1900,void 0,1);if(k(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Di(ki(i.y,0,1))).getUTCDay(),r=a>4||0===a?ui.ceil(r):ui(r),r=Za.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=bi(ki(i.y,0,1))).getDay(),r=a>4||0===a?ei.ceil(r):ei(r),r=Qa.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Di(ki(i.y,0,1)).getUTCDay():bi(ki(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Di(i)):bi(i)}}function k(t,e,n,r){for(var a,i,o=0,s=e.length,l=n.length;o<s;){if(r>=l)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=w[a in Ti?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return x.x=b(n,x),x.X=b(r,x),x.c=b(e,x),A.x=b(n,A),A.X=b(r,A),A.c=b(e,A),{format:function(t){var e=b(t+="",x);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",A);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}(t),Mi=Ci.format,Ci.parse,Ci.utcFormat,Ci.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Go=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map((function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}));function Qo(t){return function(){return t}}(t=>{Sn(t[t.length-1])})(Go);const Zo=Math.abs,Ko=Math.atan2,Jo=Math.cos,ts=Math.max,es=Math.min,ns=Math.sin,rs=Math.sqrt,as=1e-12,is=Math.PI,os=is/2,ss=2*is;function ls(t){return t>=1?os:t<=-1?-os:Math.asin(t)}function us(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new ra(e)}function cs(t){return t.innerRadius}function hs(t){return t.outerRadius}function fs(t){return t.startAngle}function ds(t){return t.endAngle}function gs(t){return t&&t.padAngle}function ps(t,e,n,r,a,i,o){var s=t-n,l=e-r,u=(o?i:-i)/rs(s*s+l*l),c=u*l,h=-u*s,f=t+c,d=e+h,g=n+c,p=r+h,y=(f+g)/2,m=(d+p)/2,v=g-f,x=p-d,A=v*v+x*x,w=a-i,b=f*p-g*d,D=(x<0?-1:1)*rs(ts(0,w*w*A-b*b)),k=(b*x-v*D)/A,C=(-b*v-x*D)/A,M=(b*x+v*D)/A,T=(-b*v+x*D)/A,_=k-y,E=C-m,F=M-y,S=T-m;return _*_+E*E>F*F+S*S&&(k=M,C=T),{cx:k,cy:C,x01:-c,y01:-h,x11:k*(a/w-1),y11:C*(a/w-1)}}function ys(){var t=cs,e=hs,n=Qo(0),r=null,a=fs,i=ds,o=gs,s=null,l=us(u);function u(){var u,c,h=+t.apply(this,arguments),f=+e.apply(this,arguments),d=a.apply(this,arguments)-os,g=i.apply(this,arguments)-os,p=Zo(g-d),y=g>d;if(s||(s=u=l()),f<h&&(c=f,f=h,h=c),f>as)if(p>ss-as)s.moveTo(f*Jo(d),f*ns(d)),s.arc(0,0,f,d,g,!y),h>as&&(s.moveTo(h*Jo(g),h*ns(g)),s.arc(0,0,h,g,d,y));else{var m,v,x=d,A=g,w=d,b=g,D=p,k=p,C=o.apply(this,arguments)/2,M=C>as&&(r?+r.apply(this,arguments):rs(h*h+f*f)),T=es(Zo(f-h)/2,+n.apply(this,arguments)),_=T,E=T;if(M>as){var F=ls(M/h*ns(C)),S=ls(M/f*ns(C));(D-=2*F)>as?(w+=F*=y?1:-1,b-=F):(D=0,w=b=(d+g)/2),(k-=2*S)>as?(x+=S*=y?1:-1,A-=S):(k=0,x=A=(d+g)/2)}var B=f*Jo(x),N=f*ns(x),I=h*Jo(b),L=h*ns(b);if(T>as){var V,O=f*Jo(A),P=f*ns(A),$=h*Jo(w),Y=h*ns(w);if(p<is)if(V=function(t,e,n,r,a,i,o,s){var l=n-t,u=r-e,c=o-a,h=s-i,f=h*l-c*u;if(!(f*f<as))return[t+(f=(c*(e-i)-h*(t-a))/f)*l,e+f*u]}(B,N,$,Y,O,P,I,L)){var z=B-V[0],R=N-V[1],U=O-V[0],H=P-V[1],X=1/ns(function(t){return t>1?0:t<-1?is:Math.acos(t)}((z*U+R*H)/(rs(z*z+R*R)*rs(U*U+H*H)))/2),W=rs(V[0]*V[0]+V[1]*V[1]);_=es(T,(h-W)/(X-1)),E=es(T,(f-W)/(X+1))}else _=E=0}k>as?E>as?(m=ps($,Y,B,N,f,E,y),v=ps(O,P,I,L,f,E,y),s.moveTo(m.cx+m.x01,m.cy+m.y01),E<T?s.arc(m.cx,m.cy,E,Ko(m.y01,m.x01),Ko(v.y01,v.x01),!y):(s.arc(m.cx,m.cy,E,Ko(m.y01,m.x01),Ko(m.y11,m.x11),!y),s.arc(0,0,f,Ko(m.cy+m.y11,m.cx+m.x11),Ko(v.cy+v.y11,v.cx+v.x11),!y),s.arc(v.cx,v.cy,E,Ko(v.y11,v.x11),Ko(v.y01,v.x01),!y))):(s.moveTo(B,N),s.arc(0,0,f,x,A,!y)):s.moveTo(B,N),h>as&&D>as?_>as?(m=ps(I,L,O,P,h,-_,y),v=ps(B,N,$,Y,h,-_,y),s.lineTo(m.cx+m.x01,m.cy+m.y01),_<T?s.arc(m.cx,m.cy,_,Ko(m.y01,m.x01),Ko(v.y01,v.x01),!y):(s.arc(m.cx,m.cy,_,Ko(m.y01,m.x01),Ko(m.y11,m.x11),!y),s.arc(0,0,h,Ko(m.cy+m.y11,m.cx+m.x11),Ko(v.cy+v.y11,v.cx+v.x11),y),s.arc(v.cx,v.cy,_,Ko(v.y11,v.x11),Ko(v.y01,v.x01),!y))):s.arc(0,0,h,b,w,y):s.lineTo(I,L)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-is/2;return[Jo(r)*n,ns(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Qo(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Qo(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Qo(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Qo(+t),u):r},u.startAngle=function(t){return arguments.length?(a="function"==typeof t?t:Qo(+t),u):a},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Qo(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Qo(+t),u):o},u.context=function(t){return arguments.length?(s=null==t?null:t,u):s},u}function ms(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function vs(t){this._context=t}function xs(t){return new vs(t)}function As(t){return t[0]}function ws(t){return t[1]}function bs(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function Ds(t){return t}function ks(t,e,n){this.k=t,this.x=e,this.y=n}vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},ks.prototype={constructor:ks,scale:function(t){return 1===t?this:new ks(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new ks(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new ks(1,0,0),ks.prototype;const Cs=(()=>{const t=["HH","H","hh","h"],e=["mm","m"],n=["ss","s",""],r=[];for(const a of t)for(const t of e)for(const e of n){let n=`${a}:${t}`;""!==e&&(n+=`:${e}`),a.contains("h")&&(n+=" a"),r.push(n)}return r})(),Ms=(t,e,n)=>{if(!e&&!n)return t;let r=t;if(r.startsWith("^")&&(r=r.slice(1)),e){const t=new RegExp("^("+e+")","gm");t.test(r)&&(r=r.replace(t,""))}if(n){const t=new RegExp("("+n+")$","gm");t.test(r)&&(r=r.replace(t,""))}return r},Ts=(t,e)=>{let n=e;t.length>4&&t.startsWith("[[")&&t.endsWith("]]")&&(t=t.substring(2,t.length-2)),"iso-8601"===e.toLowerCase()&&(n=window.moment.ISO_8601);let r=window.moment(t,n,!0);return r=r.startOf("day"),r},_s=(t,e,n=!0)=>{if(!t||!e||0===e.length)return[null,t];let r=null;const a="^(?<value>[0-9]+)("+e.join("|")+")$",i=new RegExp(a,"gm"),o=i.exec(t);return o&&void 0!==o.groups&&void 0!==o.groups.value&&(r=parseFloat(o.groups.value),Number.isNumber(r)&&!Number.isNaN(r))?(n&&(t=t.replace(i,"")),[r,t]):[null,t]},Es=t=>{if(!t)return null;const e=window.moment.duration(0);let n=!1,r=!1;t.startsWith("+")&&(r=!1,t=t.substring(1)),t.startsWith("-")&&(r=!0,t=t.substring(1));let a=null;[a,t]=_s(t,["year","years","Y","y"]),null!==a&&(r&&(a*=-1),e.add(a,"years"),n=!0);let i=null;[i,t]=_s(t,["month","months","M"]),null!==i&&(r&&(i*=-1),e.add(i,"months"),n=!0);let o=null;[o,t]=_s(t,["week","weeks","W","w"]),null!==o&&(r&&(o*=-1),e.add(o,"weeks"),n=!0);let s=null;[s,t]=_s(t,["day","days","D","d"]),null!==s&&(r&&(s*=-1),e.add(s,"days"),n=!0);let l=null;[l,t]=_s(t,["hour","hours","H","h"]),null!==l&&(r&&(l*=-1),e.add(l,"hours"),n=!0);let u=null;[u,t]=_s(t,["minute","minutes","m"]),null!==u&&(r&&(u*=-1),e.add(u,"minutes"),n=!0);let c=null;return[c,t]=_s(t,["second","seconds","S","s"]),null!==c&&(r&&(c*=-1),e.add(c,"seconds"),n=!0),n?e:null},Fs=(t,e)=>{let n=null;const r=Es(t);return r&&window.moment.isDuration(r)&&(n=Ns(e),n=n.add(r),n&&n.isValid()),n},Ss=(t,e)=>null==t?null:"iso-8601"===e.toLowerCase()?t.format():t.format(e),Bs=(t,e)=>{const n=window.moment(t),r=Ss(n,e);return Ts(r,e)},Ns=t=>{const e=window.moment(),n=Ss(e,t);return Ts(n,t)},Is=(t,e)=>{const n=(e=e.replace(/^\./,"")).split(".");for(let e=0,r=n.length;e<r;++e){const r=n[e];if(!(r in t))return null;t=t[r]}return"string"==typeof t||Array.isArray(t)?t:"number"==typeof t||"boolean"==typeof t?t.toString():null},Ls=(t,e)=>{const n=Array.from(t),r=n.findIndex((t=>t!==e)),a=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===a?t:t.substring(r,t.length-a)},Vs=t=>{if(null===t)return null;const e=new RegExp('<img[^>]*?alt\\s*=\\s*[""\']?(?<emoji>[^\'"" >]+?)[ \'""][^>]*?>',"g");return t.replace(e,((...t)=>{const e=t[t.length-1];return e&&e.emoji?e.emoji.trim():""}))},Os=(t,e=null)=>{let r=null,a=n.Number;if("string"==typeof t)if(t.includes(":")){let e=!1;t.startsWith("-")&&(e=!0,t=t.substring(1));const i=window.moment(t,Cs,!0);i.isValid()&&(r=i.diff(window.moment("00:00","HH:mm",!0),"seconds"),e&&(r*=-1),a=n.Time)}else if(e){const n=Object.keys(e);for(const r of n)if("string"==typeof r){const n=new RegExp(r,"gm");if(n.test(t)&&Number.isNumber(e[r])){const a=e[r].toString();t=t.replace(n,a);break}}r=parseFloat(t),Number.isNaN(r)&&(r=null)}else r=parseFloat(t),Number.isNaN(r)&&(r=null);else"number"==typeof t&&(r=t);return{type:a,value:r}},Ps=(t,e="",n="")=>{const r=Ce("body").append("svg"),a=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&a.attr("class",e),n&&a.attr("transform","rotate("+n+")");const i=r.node().getBBox();return r.remove(),{width:i.width,height:i.height}},$s=(t,e,n)=>{const r=(0|parseFloat(t.attr("width")))+e,a=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",a)},Ys=(t,e,n)=>{const r=new b(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")},zs=t=>t=(t=(t=t.replace(/(^\\s\*)|(\\s\*$)/gi,"")).replace(/\[ \]{2,}/gi," ")).replace(/\\n /,"\\n"),Rs="\\w$€£¥¢₹₨₱₩฿₫₪α-ωΑ-Ω©®℗™℠一-鿿㐀-䶿　、-〿",Us=(t,e)=>{const n=t.basename,r=Ms(n,e.dateFormatPrefix,e.dateFormatSuffix);return Ts(r,e.dateFormat)},Hs=(t,e,n)=>{let r=window.moment("");const a=t.frontmatter;if(a&&Is(a,e.getTarget())){let t=Is(a,e.getTarget());"string"==typeof t&&(t=Ms(t,n.dateFormatPrefix,n.dateFormatSuffix),r=Ts(t,n.dateFormat))}return r};function Xs(t,e,n){let r=window.moment("");const a=new RegExp(e,"gm");let i;for(;i=a.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.value){let t=i.groups.value.trim();if(t=Ms(t,n.dateFormatPrefix,n.dateFormatSuffix),r=Ts(t,n.dateFormat),r.isValid())return r}return r}const Ws=(t,e,n)=>{window.moment("");let r=e.getTarget();e.getParentTarget()&&(r=e.getParentTarget());return Xs(t,"(^|\\s)#"+r+"(\\/[\\w-]+)*(:(?<value>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)",n)},js=(t,e,n)=>{window.moment("");return Xs(t,e.getTarget(),n)},qs=(t,e,n)=>{window.moment("");let r=e.getTarget();e.getParentTarget()&&(r=e.getParentTarget()),r=r.replace("-","[\\s\\-]");return Xs(t,"(^| |\\t)\\*{0,2}"+r+"\\*{0,2}(::[ |\\t]*(?<value>[\\d\\.\\/\\-\\w,@; \\t:]*))(\\r\\?\\n|\\r|$)",n)},Gs=(t,e,n)=>{let a=window.moment("");if(t&&t instanceof r.TFile){const r=e.getTarget();if("cDate"===r){const e=t.stat.ctime;a=Bs(e,n.dateFormat)}else if("mDate"===r){const e=t.stat.mtime;a=Bs(e,n.dateFormat)}else"name"===r&&(a=Us(t,n))}return a},Qs=(e,n,r)=>{window.moment("");const a=n.getType();let i=n.getTarget();return i=a===t.Task?"\\[[\\sx]\\]\\s"+i:a===t.TaskDone?"\\[x\\]\\s"+i:a===t.TaskNotDone?"\\[\\s\\]\\s"+i:"\\[[\\sx]\\]\\s"+i,Xs(e,i,r)},Zs=(t,e,n,r)=>{if(t.has(e)){t.get(e).push({query:n,value:r})}else{const a=new Array;a.push({query:n,value:r}),t.set(e,a)}},Ks=(t,e,r,a,i,o)=>{const s=new RegExp(e,"gm");let l,u=0,c=!1;for(;l=s.exec(t);)if(o.ignoreAttachedValue[r.getId()])u+=o.constValue[r.getId()],c=!0,r.addNumTargets();else if(void 0!==l.groups&&void 0!==l.groups.value){const t=l.groups.value.trim().split(r.getSeparator());if(!t)continue;if(1===t.length){const e=t[0].trim(),a=Os(e,o.textValueMap);null!==a.value&&(a.type===n.Time?(u=a.value,c=!0,r.valueType=n.Time,r.addNumTargets()):o.ignoreZeroValue[r.getId()]&&0===a.value||(u+=a.value,c=!0,r.addNumTargets()))}else if(t.length>r.getAccessor()&&r.getAccessor()>=0){const e=t[r.getAccessor()].trim(),a=Os(e,o.textValueMap);null!==a.value&&(a.type===n.Time?(u=a.value,c=!0,r.valueType=n.Time,r.addNumTargets()):(u+=a.value,c=!0,r.addNumTargets()))}}else u+=o.constValue[r.getId()],c=!0,r.addNumTargets();if(c){const t=i.get(o.xDataset[r.getId()]);return Zs(a,t,r,u),!0}return!1},Js=(t,e,a,i,o,s)=>{if(t&&t instanceof r.TFile){const r=a.getTarget(),l=s.get(i.xDataset[a.getId()]);if("cDate"===r){const e=t.stat.ctime;return a.valueType=n.Date,a.addNumTargets(),Zs(o,l,a,e),!0}if("mDate"===r){const e=t.stat.mtime;return a.valueType=n.Date,a.addNumTargets(),Zs(o,l,a,e),!0}if("size"===r){const e=t.stat.size;return a.addNumTargets(),Zs(o,l,a,e),!0}if("numWords"===r){const t=(t=>{t=zs(t);const e=new RegExp(["(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-"+/A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source+"])+",/[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source].join("|"),"g");return(t.match(e)||[]).length})(e);return Zs(o,l,a,t),!0}if("numChars"===r){const t=e.length;return a.addNumTargets(),Zs(o,l,a,t),!0}if("numSentences"===r){const t=(t=>(((t=zs(t))||"").match(/[^.。!！?？\s][^.。!！?？]*(?:[.!?](?!['‘’"“”「」『』]?\s|$)[^.。!！?？]*)*[.。!！?？]?['’"”」』]?(?=\s||$)/gm)||[]).length)(e);return a.addNumTargets(),Zs(o,l,a,t),!0}if("name"===r){let e=0,r=!1;const s=Os(t.basename,i.textValueMap);null!==s.value&&(s.type===n.Time?(e=s.value,r=!0,a.valueType=n.Time,a.addNumTargets()):i.ignoreZeroValue[a.getId()]&&0===s.value||(e+=s.value,r=!0,a.addNumTargets()));let u=null;if(r&&(u=e),null!==u)return Zs(o,l,a,u),!0}}return!1},tl=(t,e,n,r,a)=>{let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i=i.replace("-","[\\s\\-]");return Ks(t,"^.*?(\\[|\\()\\*{0,2}"+i+"\\*{0,2}(::[ |\\t]*(?<value>[\\d\\.\\/\\-,@; \\t:"+Rs+"]*))(\\]|\\)).*?$",e,r,a,n)},el=t=>{switch(t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1;default:return null}},nl=t=>"tag"===t.toLowerCase()||"text"===t.toLowerCase()||"frontmatter"===t.toLowerCase()||"wiki"===t.toLowerCase()||"wiki.link"===t.toLowerCase()||"wiki.display"===t.toLowerCase()||"dvfield"===t.toLowerCase()||"table"===t.toLowerCase()||"filemeta"===t.toLowerCase()||"task"===t.toLowerCase()||"task.all"===t.toLowerCase()||"task.done"===t.toLowerCase()||"task.notdone"===t.toLowerCase(),rl=t=>"left"===t||"right"===t||"none"===t,al=t=>!0,il=t=>{const e="::::::tracker::::::",n=t.split("\\,").join(e).split(",");for(let t=0;t<n.length;t++)n[t]=n[t].split(e).join(",");return n},ol=(t,e,n,r,a)=>{const i=[];let o="",s=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowed for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],l=null;if(n>0&&(l=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==l?l:r}else{if("boolean"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,s++}}else{const t=e[e.length-1];i[n]=s>0?t:r}}}else if("string"==typeof e){const a=il(e);if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<i.length;e++)if(e<a.length){const n=a[e].trim();let l=null;if(e>0&&(l=el(a[e-1].trim())),""===n)i[e]=null!==l?l:r;else{const r=el(n);if(null===r){o="Invalid inputs for "+t;break}i[e]=r,s++}}else{const t=el(a[a.length-1].trim());i[e]=s>0&&null!==t?t:r}}else if(""===e);else{const n=el(e);if(null!==n){i[0]=n,s++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){i[0]=e,s++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;return a||0!==s||(o="No valid input for "+t),""!==o?o:i},sl=(t,e,n,r,a)=>{const i=[];let o="",s=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowed for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],l=null;if(n>0&&(l=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==l?l:r}else{if("number"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,s++}}else{const t=e[e.length-1];i[n]=s>0?t:r}}}else if("string"==typeof e){const a=il(e);if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<i.length;n++)if(n<a.length){const e=a[n].trim();let l=null;if(n>0&&(l=Os(a[n-1].trim()).value),""===e)null!==l&&Number.isNumber(l)?i[n]=l:i[n]=r;else{const r=Os(e).value;if(null===r){o="Invalid inputs for "+t;break}i[n]=r,s++}}else{const t=Os(a[e.length-1].trim()).value;i[n]=s>0&&null!==t?t:r}}else if(""===e);else{const n=Os(e).value;if(null!==n){i[0]=n,s++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){i[0]=e,s++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return a||0!==s||(o="No valid input for "+t),""!==o?o:i},ll=(t,e)=>"string"==typeof t?Vs(t):"number"==typeof t?t.toString():e,ul=(t,e,n,r,a,i)=>{const o=[];let s="",l=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return s="Too many inputs for parameter '"+t+"'",s;if(0===e.length)return s="Empty array not allowed for "+t,s;for(let n=0;n<o.length;n++)if(n<e.length){let i=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"!=typeof i){s="Invalid inputs for "+t;break}if(i=i.trim(),""===i)o[n]=null!==u?u:r;else if(a){if(!a(i)){s="Invalid inputs for "+t;break}o[n]=i,l++}else o[n]=i,l++}else{const t=e[e.length-1].trim();o[n]=l>0?t:r}}}else if("string"==typeof e){const i=il(e);if(i.length>1){if(i.length>n)return s="Too many inputs for parameter '"+t+"'",s;for(let e=0;e<o.length;e++)if(e<i.length){const n=i[e].trim();let u=null;if(e>0&&(u=i[e-1].trim()),""===n)o[e]=null!==u?u:r;else if(a){if(!a(n)){s="Invalid inputs for "+t;break}o[e]=n,l++}else o[e]=n,l++}else{const t=i[i.length-1].trim();o[e]=l>0?t:r}}else if(""===e);else if(a)if(a(e)){o[0]=e,l++;for(let t=1;t<o.length;t++)o[t]=e}else s="Invalid inputs for "+t;else{o[0]=e,l++;for(let t=1;t<o.length;t++)o[t]=e}}else if("number"==typeof e){const n=e.toString();if(a)if(a(n)){o[0]=n,l++;for(let t=1;t<o.length;t++)o[t]=n}else s="Invalid inputs for "+t;else{o[0]=n,l++;for(let t=1;t<o.length;t++)o[t]=n}}else s="Invalid inputs for "+t;if(i||0!==l||(s="No valid input for "+t),""!==s)return s;for(let t=0;t<o.length;t++)o[t]=Vs(o[t]);return o},cl=(t,e)=>{const n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(const r of e)if("string"==typeof r){const e=parseFloat(r);if(!Number.isNumber(e)){return`Parameter '${t}' accepts only numbers`}n.push(e)}}else if("string"==typeof e){const r=il(e);if(r.length>1)for(const e of r){const r=parseFloat(e.trim());if(Number.isNaN(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}else{if(""===e){return`Empty ${t} is not allowed.`}{const r=parseFloat(e);if(!Number.isNumber(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}}}else{if("number"!=typeof e){return`Invalid ${t}`}n.push(e)}return n},hl=(t,e)=>{const n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(const t of e)"string"==typeof t&&n.push(t.trim())}else{if("string"!=typeof e){return`Invalid ${t}`}{const r=il(e);if(r.length>1)for(const t of r)n.push(t.trim());else{if(""===e){return`Empty ${t} is not allowed.`}n.push(e)}}}for(let t=0;t<n.length;t++)n[t]=Vs(n[t]);return n},fl=(t,e)=>{t&&(e.title=ll(null==t?void 0:t.title,e.title),e.xAxisLabel=ll(null==t?void 0:t.xAxisLabel,e.xAxisLabel),e.xAxisColor=ll(null==t?void 0:t.xAxisColor,e.xAxisColor),e.xAxisLabelColor=ll(null==t?void 0:t.xAxisLabelColor,e.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal",e.legendBgColor=ll(null==t?void 0:t.legendBgColor,e.legendBgColor),e.legendBorderColor=ll(null==t?void 0:t.legendBorderColor,e.legendBorderColor));const n=ul("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;const r=ul("yAxisColor",null==t?void 0:t.yAxisColor,2,"",al,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;const a=ul("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",al,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=a;const i=ul("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=i,e.xAxisTickInterval=ll(null==t?void 0:t.xAxisTickInterval,e.xAxisTickInterval);const o=ul("yAxisTickInterval",null==t?void 0:t.yAxisTickInterval,2,null,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yAxisTickInterval accepts not more than two values for left and right y-axes";e.yAxisTickInterval=o,e.xAxisTickLabelFormat=ll(null==t?void 0:t.xAxisTickLabelFormat,e.xAxisTickLabelFormat);const s=ul("yAxisTickLabelFormat",null==t?void 0:t.yAxisTickLabelFormat,2,null,null,!0);if("string"==typeof s)return s;if(s.length>2)return"yAxisTickLabelFormat accepts not more than two values for left and right y-axes";e.yAxisTickLabelFormat=s;const l=sl("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof l)return l;if(l.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=l;const u=sl("yMax",null==t?void 0:t.yMax,2,null,!0);if("string"==typeof u)return u;if(u.length>2)return"yMax accepts not more than two values for left and right y-axes";e.yMax=u;const c=ol("reverseYAxis",null==t?void 0:t.reverseYAxis,2,!1,!0);return"string"==typeof c?c:c.length>2?"reverseYAxis accepts not more than two values for left and right y-axes":void(e.reverseYAxis=c)},dl=t=>{const e=[];if(null!==t){const n=Object.keys(t);for(const t of n)e.push(t.toString())}return e};var gl,pl={};gl=pl,function(){var t={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function e(n){return function(n,r){var a,i,o,s,l,u,c,h,f,d=1,g=n.length,p="";for(i=0;i<g;i++)if("string"==typeof n[i])p+=n[i];else if("object"==typeof n[i]){if((s=n[i]).keys)for(a=r[d],o=0;o<s.keys.length;o++){if(null==a)throw new Error(e('[sprintf] Cannot access property "%s" of undefined value "%s"',s.keys[o],s.keys[o-1]));a=a[s.keys[o]]}else a=s.param_no?r[s.param_no]:r[d++];if(t.not_type.test(s.type)&&t.not_primitive.test(s.type)&&a instanceof Function&&(a=a()),t.numeric_arg.test(s.type)&&"number"!=typeof a&&isNaN(a))throw new TypeError(e("[sprintf] expecting number but found %T",a));switch(t.number.test(s.type)&&(h=a>=0),s.type){case"b":a=parseInt(a,10).toString(2);break;case"c":a=String.fromCharCode(parseInt(a,10));break;case"d":case"i":a=parseInt(a,10);break;case"j":a=JSON.stringify(a,null,s.width?parseInt(s.width):0);break;case"e":a=s.precision?parseFloat(a).toExponential(s.precision):parseFloat(a).toExponential();break;case"f":a=s.precision?parseFloat(a).toFixed(s.precision):parseFloat(a);break;case"g":a=s.precision?String(Number(a.toPrecision(s.precision))):parseFloat(a);break;case"o":a=(parseInt(a,10)>>>0).toString(8);break;case"s":a=String(a),a=s.precision?a.substring(0,s.precision):a;break;case"t":a=String(!!a),a=s.precision?a.substring(0,s.precision):a;break;case"T":a=Object.prototype.toString.call(a).slice(8,-1).toLowerCase(),a=s.precision?a.substring(0,s.precision):a;break;case"u":a=parseInt(a,10)>>>0;break;case"v":a=a.valueOf(),a=s.precision?a.substring(0,s.precision):a;break;case"x":a=(parseInt(a,10)>>>0).toString(16);break;case"X":a=(parseInt(a,10)>>>0).toString(16).toUpperCase()}t.json.test(s.type)?p+=a:(!t.number.test(s.type)||h&&!s.sign?f="":(f=h?"+":"-",a=a.toString().replace(t.sign,"")),u=s.pad_char?"0"===s.pad_char?"0":s.pad_char.charAt(1):" ",c=s.width-(f+a).length,l=s.width&&c>0?u.repeat(c):"",p+=s.align?f+a+l:"0"===u?f+l+a:l+f+a)}return p}(function(e){if(r[e])return r[e];for(var n,a=e,i=[],o=0;a;){if(null!==(n=t.text.exec(a)))i.push(n[0]);else if(null!==(n=t.modulo.exec(a)))i.push("%");else{if(null===(n=t.placeholder.exec(a)))throw new SyntaxError("[sprintf] unexpected placeholder");if(n[2]){o|=1;var s=[],l=n[2],u=[];if(null===(u=t.key.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(u[1]);""!==(l=l.substring(u[0].length));)if(null!==(u=t.key_access.exec(l)))s.push(u[1]);else{if(null===(u=t.index_access.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(u[1])}n[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");i.push({placeholder:n[0],param_no:n[1],keys:n[2],sign:n[3],pad_char:n[4],align:n[5],width:n[6],precision:n[7],type:n[8]})}a=a.substring(n[0].length)}return r[e]=i}(n),arguments)}function n(t,n){return e.apply(null,[t].concat(n||[]))}var r=Object.create(null);gl.sprintf=e,gl.vsprintf=n,"undefined"!=typeof window&&(window.sprintf=e,window.vsprintf=n)}();class yl{static get version(){return"1.3.8"}static toString(){return"JavaScript Expression Parser (JSEP) v"+yl.version}static addUnaryOp(t){return yl.max_unop_len=Math.max(t.length,yl.max_unop_len),yl.unary_ops[t]=1,yl}static addBinaryOp(t,e,n){return yl.max_binop_len=Math.max(t.length,yl.max_binop_len),yl.binary_ops[t]=e,n?yl.right_associative.add(t):yl.right_associative.delete(t),yl}static addIdentifierChar(t){return yl.additional_identifier_chars.add(t),yl}static addLiteral(t,e){return yl.literals[t]=e,yl}static removeUnaryOp(t){return delete yl.unary_ops[t],t.length===yl.max_unop_len&&(yl.max_unop_len=yl.getMaxKeyLen(yl.unary_ops)),yl}static removeAllUnaryOps(){return yl.unary_ops={},yl.max_unop_len=0,yl}static removeIdentifierChar(t){return yl.additional_identifier_chars.delete(t),yl}static removeBinaryOp(t){return delete yl.binary_ops[t],t.length===yl.max_binop_len&&(yl.max_binop_len=yl.getMaxKeyLen(yl.binary_ops)),yl.right_associative.delete(t),yl}static removeAllBinaryOps(){return yl.binary_ops={},yl.max_binop_len=0,yl}static removeLiteral(t){return delete yl.literals[t],yl}static removeAllLiterals(){return yl.literals={},yl}get char(){return this.expr.charAt(this.index)}get code(){return this.expr.charCodeAt(this.index)}constructor(t){this.expr=t,this.index=0}static parse(t){return new yl(t).parse()}static getMaxKeyLen(t){return Math.max(0,...Object.keys(t).map((t=>t.length)))}static isDecimalDigit(t){return t>=48&&t<=57}static binaryPrecedence(t){return yl.binary_ops[t]||0}static isIdentifierStart(t){return t>=65&&t<=90||t>=97&&t<=122||t>=128&&!yl.binary_ops[String.fromCharCode(t)]||yl.additional_identifier_chars.has(String.fromCharCode(t))}static isIdentifierPart(t){return yl.isIdentifierStart(t)||yl.isDecimalDigit(t)}throwError(t){const e=new Error(t+" at character "+this.index);throw e.index=this.index,e.description=t,e}runHook(t,e){if(yl.hooks[t]){const n={context:this,node:e};return yl.hooks.run(t,n),n.node}return e}searchHook(t){if(yl.hooks[t]){const e={context:this};return yl.hooks[t].find((function(t){return t.call(e.context,e),e.node})),e.node}}gobbleSpaces(){let t=this.code;for(;t===yl.SPACE_CODE||t===yl.TAB_CODE||t===yl.LF_CODE||t===yl.CR_CODE;)t=this.expr.charCodeAt(++this.index);this.runHook("gobble-spaces")}parse(){this.runHook("before-all");const t=this.gobbleExpressions(),e=1===t.length?t[0]:{type:yl.COMPOUND,body:t};return this.runHook("after-all",e)}gobbleExpressions(t){let e,n,r=[];for(;this.index<this.expr.length;)if(e=this.code,e===yl.SEMCOL_CODE||e===yl.COMMA_CODE)this.index++;else if(n=this.gobbleExpression())r.push(n);else if(this.index<this.expr.length){if(e===t)break;this.throwError('Unexpected "'+this.char+'"')}return r}gobbleExpression(){const t=this.searchHook("gobble-expression")||this.gobbleBinaryExpression();return this.gobbleSpaces(),this.runHook("after-expression",t)}gobbleBinaryOp(){this.gobbleSpaces();let t=this.expr.substr(this.index,yl.max_binop_len),e=t.length;for(;e>0;){if(yl.binary_ops.hasOwnProperty(t)&&(!yl.isIdentifierStart(this.code)||this.index+t.length<this.expr.length&&!yl.isIdentifierPart(this.expr.charCodeAt(this.index+t.length))))return this.index+=e,t;t=t.substr(0,--e)}return!1}gobbleBinaryExpression(){let t,e,n,r,a,i,o,s,l;if(i=this.gobbleToken(),!i)return i;if(e=this.gobbleBinaryOp(),!e)return i;for(a={value:e,prec:yl.binaryPrecedence(e),right_a:yl.right_associative.has(e)},o=this.gobbleToken(),o||this.throwError("Expected expression after "+e),r=[i,a,o];e=this.gobbleBinaryOp();){if(n=yl.binaryPrecedence(e),0===n){this.index-=e.length;break}a={value:e,prec:n,right_a:yl.right_associative.has(e)},l=e;const s=t=>a.right_a&&t.right_a?n>t.prec:n<=t.prec;for(;r.length>2&&s(r[r.length-2]);)o=r.pop(),e=r.pop().value,i=r.pop(),t={type:yl.BINARY_EXP,operator:e,left:i,right:o},r.push(t);t=this.gobbleToken(),t||this.throwError("Expected expression after "+l),r.push(a,t)}for(s=r.length-1,t=r[s];s>1;)t={type:yl.BINARY_EXP,operator:r[s-1].value,left:r[s-2],right:t},s-=2;return t}gobbleToken(){let t,e,n,r;if(this.gobbleSpaces(),r=this.searchHook("gobble-token"),r)return this.runHook("after-token",r);if(t=this.code,yl.isDecimalDigit(t)||t===yl.PERIOD_CODE)return this.gobbleNumericLiteral();if(t===yl.SQUOTE_CODE||t===yl.DQUOTE_CODE)r=this.gobbleStringLiteral();else if(t===yl.OBRACK_CODE)r=this.gobbleArray();else{for(e=this.expr.substr(this.index,yl.max_unop_len),n=e.length;n>0;){if(yl.unary_ops.hasOwnProperty(e)&&(!yl.isIdentifierStart(this.code)||this.index+e.length<this.expr.length&&!yl.isIdentifierPart(this.expr.charCodeAt(this.index+e.length)))){this.index+=n;const t=this.gobbleToken();return t||this.throwError("missing unaryOp argument"),this.runHook("after-token",{type:yl.UNARY_EXP,operator:e,argument:t,prefix:!0})}e=e.substr(0,--n)}yl.isIdentifierStart(t)?(r=this.gobbleIdentifier(),yl.literals.hasOwnProperty(r.name)?r={type:yl.LITERAL,value:yl.literals[r.name],raw:r.name}:r.name===yl.this_str&&(r={type:yl.THIS_EXP})):t===yl.OPAREN_CODE&&(r=this.gobbleGroup())}return r?(r=this.gobbleTokenProperty(r),this.runHook("after-token",r)):this.runHook("after-token",!1)}gobbleTokenProperty(t){this.gobbleSpaces();let e=this.code;for(;e===yl.PERIOD_CODE||e===yl.OBRACK_CODE||e===yl.OPAREN_CODE||e===yl.QUMARK_CODE;){let n;if(e===yl.QUMARK_CODE){if(this.expr.charCodeAt(this.index+1)!==yl.PERIOD_CODE)break;n=!0,this.index+=2,this.gobbleSpaces(),e=this.code}this.index++,e===yl.OBRACK_CODE?(t={type:yl.MEMBER_EXP,computed:!0,object:t,property:this.gobbleExpression()},this.gobbleSpaces(),e=this.code,e!==yl.CBRACK_CODE&&this.throwError("Unclosed ["),this.index++):e===yl.OPAREN_CODE?t={type:yl.CALL_EXP,arguments:this.gobbleArguments(yl.CPAREN_CODE),callee:t}:(e===yl.PERIOD_CODE||n)&&(n&&this.index--,this.gobbleSpaces(),t={type:yl.MEMBER_EXP,computed:!1,object:t,property:this.gobbleIdentifier()}),n&&(t.optional=!0),this.gobbleSpaces(),e=this.code}return t}gobbleNumericLiteral(){let t,e,n="";for(;yl.isDecimalDigit(this.code);)n+=this.expr.charAt(this.index++);if(this.code===yl.PERIOD_CODE)for(n+=this.expr.charAt(this.index++);yl.isDecimalDigit(this.code);)n+=this.expr.charAt(this.index++);if(t=this.char,"e"===t||"E"===t){for(n+=this.expr.charAt(this.index++),t=this.char,"+"!==t&&"-"!==t||(n+=this.expr.charAt(this.index++));yl.isDecimalDigit(this.code);)n+=this.expr.charAt(this.index++);yl.isDecimalDigit(this.expr.charCodeAt(this.index-1))||this.throwError("Expected exponent ("+n+this.char+")")}return e=this.code,yl.isIdentifierStart(e)?this.throwError("Variable names cannot start with a number ("+n+this.char+")"):(e===yl.PERIOD_CODE||1===n.length&&n.charCodeAt(0)===yl.PERIOD_CODE)&&this.throwError("Unexpected period"),{type:yl.LITERAL,value:parseFloat(n),raw:n}}gobbleStringLiteral(){let t="";const e=this.index,n=this.expr.charAt(this.index++);let r=!1;for(;this.index<this.expr.length;){let e=this.expr.charAt(this.index++);if(e===n){r=!0;break}if("\\"===e)switch(e=this.expr.charAt(this.index++),e){case"n":t+="\n";break;case"r":t+="\r";break;case"t":t+="\t";break;case"b":t+="\b";break;case"f":t+="\f";break;case"v":t+="\v";break;default:t+=e}else t+=e}return r||this.throwError('Unclosed quote after "'+t+'"'),{type:yl.LITERAL,value:t,raw:this.expr.substring(e,this.index)}}gobbleIdentifier(){let t=this.code,e=this.index;for(yl.isIdentifierStart(t)?this.index++:this.throwError("Unexpected "+this.char);this.index<this.expr.length&&(t=this.code,yl.isIdentifierPart(t));)this.index++;return{type:yl.IDENTIFIER,name:this.expr.slice(e,this.index)}}gobbleArguments(t){const e=[];let n=!1,r=0;for(;this.index<this.expr.length;){this.gobbleSpaces();let a=this.code;if(a===t){n=!0,this.index++,t===yl.CPAREN_CODE&&r&&r>=e.length&&this.throwError("Unexpected token "+String.fromCharCode(t));break}if(a===yl.COMMA_CODE){if(this.index++,r++,r!==e.length)if(t===yl.CPAREN_CODE)this.throwError("Unexpected token ,");else if(t===yl.CBRACK_CODE)for(let t=e.length;t<r;t++)e.push(null)}else if(e.length!==r&&0!==r)this.throwError("Expected comma");else{const t=this.gobbleExpression();t&&t.type!==yl.COMPOUND||this.throwError("Expected comma"),e.push(t)}}return n||this.throwError("Expected "+String.fromCharCode(t)),e}gobbleGroup(){this.index++;let t=this.gobbleExpressions(yl.CPAREN_CODE);if(this.code===yl.CPAREN_CODE)return this.index++,1===t.length?t[0]:!!t.length&&{type:yl.SEQUENCE_EXP,expressions:t};this.throwError("Unclosed (")}gobbleArray(){return this.index++,{type:yl.ARRAY_EXP,elements:this.gobbleArguments(yl.CBRACK_CODE)}}}const ml=new class{add(t,e,n){if("string"!=typeof arguments[0])for(let t in arguments[0])this.add(t,arguments[0][t],arguments[1]);else(Array.isArray(t)?t:[t]).forEach((function(t){this[t]=this[t]||[],e&&this[t][n?"unshift":"push"](e)}),this)}run(t,e){this[t]=this[t]||[],this[t].forEach((function(t){t.call(e&&e.context?e.context:e,e)}))}};Object.assign(yl,{hooks:ml,plugins:new class{constructor(t){this.jsep=t,this.registered={}}register(...t){t.forEach((t=>{if("object"!=typeof t||!t.name||!t.init)throw new Error("Invalid JSEP plugin format");this.registered[t.name]||(t.init(this.jsep),this.registered[t.name]=t)}))}}(yl),COMPOUND:"Compound",SEQUENCE_EXP:"SequenceExpression",IDENTIFIER:"Identifier",MEMBER_EXP:"MemberExpression",LITERAL:"Literal",THIS_EXP:"ThisExpression",CALL_EXP:"CallExpression",UNARY_EXP:"UnaryExpression",BINARY_EXP:"BinaryExpression",ARRAY_EXP:"ArrayExpression",TAB_CODE:9,LF_CODE:10,CR_CODE:13,SPACE_CODE:32,PERIOD_CODE:46,COMMA_CODE:44,SQUOTE_CODE:39,DQUOTE_CODE:34,OPAREN_CODE:40,CPAREN_CODE:41,OBRACK_CODE:91,CBRACK_CODE:93,QUMARK_CODE:63,SEMCOL_CODE:59,COLON_CODE:58,unary_ops:{"-":1,"!":1,"~":1,"+":1},binary_ops:{"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},right_associative:new Set,additional_identifier_chars:new Set(["$","_"]),literals:{true:!0,false:!1,null:null},this_str:"this"}),yl.max_unop_len=yl.getMaxKeyLen(yl.unary_ops),yl.max_binop_len=yl.getMaxKeyLen(yl.binary_ops);const vl=t=>new yl(t).parse();Object.getOwnPropertyNames(yl).forEach((t=>{void 0===vl[t]&&"prototype"!==t&&(vl[t]=yl[t])})),vl.Jsep=yl;var xl={name:"ternary",init(t){t.hooks.add("after-expression",(function(e){if(e.node&&this.code===t.QUMARK_CODE){this.index++;const n=e.node,r=this.gobbleExpression();if(r||this.throwError("Expected expression"),this.gobbleSpaces(),this.code===t.COLON_CODE){this.index++;const a=this.gobbleExpression();if(a||this.throwError("Expected expression"),e.node={type:"ConditionalExpression",test:n,consequent:r,alternate:a},n.operator&&t.binary_ops[n.operator]<=.9){let r=n;for(;r.right.operator&&t.binary_ops[r.right.operator]<=.9;)r=r.right;e.node.test=r.right,r.right=e.node,e.node=n}}else this.throwError("Expected :")}}))}};vl.plugins.register(xl);const Al=t=>{if("number"==typeof t){if(0===t)return!1}else if(t instanceof s&&t.getValues().some((t=>0===t)))return!1;return!0},wl={min:(t,e)=>R(t.getValues()),minDate:(t,e)=>{const n=R(t.getValues());if(Number.isNumber(n)){const e=Array.from(t);for(const t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: min not found"},max:(t,e)=>z(t.getValues()),maxDate:(t,e)=>{const n=z(t.getValues());if(Number.isNumber(n)){const e=Array.from(t);for(const t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: max not found"},startDate:(t,e)=>{if(t){const e=t.getStartDate();if(e&&e.isValid())return e}return e.startDate},endDate:(t,e)=>{if(t){const e=t.getEndDate();if(e&&e.isValid())return e}return e.endDate},sum:(t,e)=>j(t.getValues()),count:(t,e)=>"Error: deprecated function 'count'",numTargets:(t,e)=>t.getNumTargets(),days:(t,e)=>"Error: deprecated function 'days'",numDays:(t,e)=>t.getLength(),numDaysHavingData:(t,e)=>t.getLengthNotNull(),maxStreak:(t,e)=>{let n=0,r=0;for(const e of t)null!==e.value?n++:n=0,n>=r&&(r=n);return r},maxStreakStart:(t,e)=>{let n=0,r=0,a=null,i=null;if(t)for(const e of t)null!==e.value?(0===n&&(a=e.date),n++):n=0,n>=r&&(r=n,i=a);return i},maxStreakEnd:(t,e)=>{let n=0,r=0,a=null,i=null;if(t){const e=Array.from(t);for(let t=0;t<e.length;t++){const o=e[t];let s=null;t<e.length-1&&(s=e[t+1]),null!==o.value?(n++,null===(null==s?void 0:s.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return i},maxBreaks:(t,e)=>{let n=0,r=0;for(const e of t)null===e.value?n++:n=0,n>r&&(r=n);return r},maxBreaksStart:(t,e)=>{let n=0,r=0,a=null,i=null;if(t)for(const e of t)null===e.value?(0===n&&(a=e.date),n++):n=0,n>=r&&(r=n,i=a);return i},maxBreaksEnd:(t,e)=>{let n=0,r=0,a=null,i=null;if(t){const e=Array.from(t);for(let t=0;t<e.length;t++){const o=e[t];let s=null;t<e.length-1&&(s=e[t+1]),null===o.value?(n++,null!==(null==s?void 0:s.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return i},lastStreak:(t,e)=>"Error: deprecated function 'lastStreak'",currentStreak:(t,e)=>{let n=0;if(t){const e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null===e[t].value)break;n++}}return n},currentStreakStart:(t,e)=>{let n=null;if(t){const e=Array.from(t);for(let t=e.length-1;t>=0;t--){const r=e[t];if(t<e.length-1&&(n=e[t+1].date),null===r.value)break}}return null===n?"Error: absent":n},currentStreakEnd:(t,e)=>{let n=0,r=null;if(t){const e=Array.from(t);for(let t=e.length-1;t>=0;t--){const a=e[t];if(null===a.value)break;0===n&&(r=a.date),n++}}return null===r?"Error: absent":r},currentBreaks:(t,e)=>{let n=0;if(t){const e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null!==e[t].value)break;n++}}return n},currentBreaksStart:(t,e)=>{let n=null;if(t){const e=Array.from(t);for(let t=e.length-1;t>=0;t--){const r=e[t];if(t<e.length-1&&(n=e[t+1].date),null!==r.value)break}}return null===n?"Error: absent":n},currentBreaksEnd:(t,e)=>{let n=0,r=null;if(t){const e=Array.from(t);for(let t=e.length-1;t>=0;t--){const a=e[t];if(null!==a.value)break;0===n&&(r=a.date),n++}}return null===r?"Error: absent":r},average:(t,e)=>{const n=t.getLengthNotNull();if(!Al(n))return"Error: divide by zero in expression";return j(t.getValues())/n},median:(t,e)=>X(t.getValues()),variance:(t,e)=>function(t,e){let n,r=0,a=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-a,a+=n/++r,i+=n*(e-a));else{let o=-1;for(let s of t)null!=(s=e(s,++o,t))&&(s=+s)>=s&&(n=s-a,a+=n/++r,i+=n*(s-a))}if(r>1)return i/(r-1)}(t.getValues())},bl={"-":t=>{if("number"==typeof t)return-1*t;if(t instanceof s){const e=t.cloneToTmpDataset();return e.getValues().forEach(((t,e,n)=>{null!==n[e]&&(n[e]=-1*t)})),e.recalculateMinMax(),e}return"Error: unknown operation for '-'"},"+":t=>{if("number"==typeof t)return t;if(t instanceof s){return t.cloneToTmpDataset()}return"Error: unknown operation for '+'"}},Dl={"+":(t,e)=>{if("number"==typeof t&&"number"==typeof e)return t+e;if("number"==typeof t&&e instanceof s){const n=e.cloneToTmpDataset();return n.getValues().forEach(((e,n,r)=>{null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&"number"==typeof e){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&e instanceof s){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t+e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '+'"},"-":(t,e)=>{if("number"==typeof t&&"number"==typeof e)return t-e;if("number"==typeof t&&e instanceof s){const n=e.cloneToTmpDataset();return n.getValues().forEach(((e,n,r)=>{null!==r[n]?r[n]=t-e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&"number"==typeof e){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t-e:r[n]=null})),n}if(t instanceof s&&e instanceof s){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t-e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '-'"},"*":(t,e)=>{if("number"==typeof t&&"number"==typeof e)return t*e;if("number"==typeof t&&e instanceof s){const n=e.cloneToTmpDataset();return n.getValues().forEach(((e,n,r)=>{null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&"number"==typeof e){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&e instanceof s){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t*e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '*'"},"/":(t,e)=>{if(!Al(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t/e;if("number"==typeof t&&e instanceof s){const n=e.cloneToTmpDataset();return n.getValues().forEach(((e,n,r)=>{null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&"number"==typeof e){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&e instanceof s){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t/e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '/'"},"%":(t,e)=>{if(!Al(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t%e;if("number"==typeof t&&e instanceof s){const n=e.cloneToTmpDataset();return n.getValues().forEach(((e,n,r)=>{null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&"number"==typeof e){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof s&&e instanceof s){const n=t.cloneToTmpDataset();return n.getValues().forEach(((t,n,r)=>{null!==r[n]?r[n]=t%e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '%'"}},kl={normalize:(t,e,n)=>{const r=t.getYMin(),a=t.getYMax();if(null!==r&&null!==a&&a>r){const e=t.cloneToTmpDataset();return e.getValues().forEach(((t,e,n)=>{n[e]=(t-r)/(a-r)})),e.recalculateMinMax(),e}return"Error: invalid data range for function 'normalize'"},setMissingValues:(t,e,n)=>{if(e&&e.length>0){const n=e[0],r=t.cloneToTmpDataset();return Number.isNumber(n)&&!Number.isNaN(n)?(r.getValues().forEach(((t,e,r)=>{null===t&&(r[e]=n)})),r.recalculateMinMax(),r):"Error: invalid arguments for function 'setMissingValues'"}return"Error: invalid arguments for function 'setMissingValues"}},Cl=(t,e)=>{switch(t.type){case"Literal":return t.value;case"Identifier":const n=t.name;return n in wl||n in kl?`Error: deprecated template variable '${n}', use '${n}()' instead`:`Error: unknown function name '${n}'`;case"UnaryExpression":const r=t,a=Cl(r.argument,e);return"string"==typeof a?a:bl[r.operator](a);case"BinaryExpression":const i=t,o=Cl(i.left,e),l=Cl(i.right,e),u=((t,e)=>"string"==typeof t?t:"string"==typeof e?e:("number"==typeof t||window.moment.isMoment(t)||t instanceof s)&&("number"==typeof e||window.moment.isMoment(e)||e instanceof s)?"":"Error: invalid operant type")(o,l);return"string"==typeof u&&u.startsWith("Error:")?u:Dl[i.operator](o,l);case"CallExpression":const c=t,h=c.callee.name,f=((t,e)=>t.map((t=>Cl(t,e))))(c.arguments,e);if("string"==typeof f)return f;if("dataset"===h){if(1===f.length){const t=f[0];if("string"==typeof t)return t;if("number"!=typeof t)return"Error: function 'dataset' only accepts id in number";const n=((t,e)=>e.datasets.getDatasetById(t))(t,e);return n||`Error: no dataset found for id '${t}'`}}else{if(h in wl){if(0===f.length){let t=null;for(const n of e.datasets)t||n.getQuery().usedAsXDataset||(t=n);return t?wl[h](t,e):`No available dataset found for function ${h}`}if(1===f.length){const t=f[0];return"string"==typeof t?t:t instanceof s?wl[h](t,e):`Error: function '${h}' only accepts Dataset`}return`Error: Too many arguments for function ${h}`}if(h in kl){if(1===f.length){if("string"==typeof f[0])return f[0];if(f[0]instanceof s){const t=f[0];return kl[h](t,null,e)}return`Error: function ${h} only accept Dataset`}if(f.length>1){if("string"==typeof f[0])return f[0];if(f[0]instanceof s){const t=f[0];return kl[h](t,f.filter(((t,e,n)=>e>0)),e)}return`Error: function ${h} only accept Dataset`}return`Error: Too many arguments for function ${h}`}}return`Error: unknown function name '${h}'`}return"Error: unknown expression"},Ml=(t,e)=>{const n=[],r=new RegExp("{{(?<expr>[\\w+\\-*\\/0-9\\s()\\[\\]%.,]+)(::(?<format>[\\w+\\-*\\/0-9\\s()\\[\\]%.:]+))?}}","gm");let a;for(;a=r.exec(t);){const t=a[0];if(!n.some((e=>e.source===t))&&(void 0!==a.groups&&void 0!==a.groups.expr)){const r=a.groups.expr;let i=null;try{i=vl(r)}catch(t){return"Error:"+t.message}if(!i)return"Error: failed to parse expression";const o=Cl(i,e);if("string"==typeof o)return o;if("number"==typeof o||window.moment.isMoment(o)){let e=null;void 0!==a.groups.format&&(e=a.groups.format),n.push({source:t,value:o,format:e})}}}return n},Tl=(t,e)=>{const n=Ml(t,e);if("string"==typeof n)return n;const r=n;for(const n of r){const r=n.source,a=n.value,i=n.format;let o="";"number"==typeof a?o=i?pl.sprintf("%"+i,a):a.toFixed(1):window.moment.isMoment(a)&&(o=Ss(a,i||e.dateFormat)),o&&(t=t.split(r).join(o))}return t},_l=(t,e)=>{if(t=t.trim(),/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)$/.test(t))return parseFloat(t);const n=Ml(t,e);if("string"==typeof n)return n;const r=n;return r.length>0?r[0].value:"Error: failed to resolve values"},El=(t,e,n)=>{if(!e||!n)return;const r=parseFloat(n.dataset);e.datasets.getDatasetById(r),"horizontal"===n.orientation?e.dataAreaSize={width:250,height:24}:"vertical"===n.orientation&&(e.dataAreaSize={width:24,height:250});const a=((t,e,n)=>{const r={};if(!e||!n)return;const a=Ce(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);r.svg=a;const i=a.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);r.graphArea=i;const o=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return r.dataArea=o,r})(t,e,n),i=((t,e,n,r)=>{if(!e||!n)return;const a=n.range,i=a[a.length-1],o=[0,i],s=n.valueUnit,l=t=>s&&s.endsWith("%")?Sa(0,i,7)(t)+" %":Sa(0,i,7)(t),u=l(i),c=Ps(u,"tracker-tick-label");if("horizontal"===n.orientation){const n=Na();n.domain(o).range([0,e.dataAreaSize.width]),t.scale=n;const r=ot(n);r.tickFormat(l);const a=t.dataArea.append("g").attr("id","axis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",e.dataAreaSize.width+c.width),a.attr("height",6+c.height),$s(t.svg,+c.width,6+c.height),$s(t.graphArea,+c.width,6+c.height)}else if("vertical"===n.orientation){const n=Na();n.domain(o).range([e.dataAreaSize.height,0]),t.scale=n;const r=st(n);r.tickFormat(l);const a=t.dataArea.append("g").attr("id","axis").attr("x",0).attr("y",0).call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",6+c.width),a.attr("height",e.dataAreaSize.width),$s(t.svg,6+c.width,0),$s(t.graphArea,6+c.width,0),Ys(t.dataArea,6+c.width,0)}})(a,e,n);if("string"==typeof i)return i;((t,e,n)=>{if(!e||!n)return;if(n.title){const r=Ps(n.title,"tracker-title-small");if("horizontal"===n.orientation){const a=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",r.width/2).attr("y",e.dataAreaSize.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=a,$s(t.svg,r.width+6,0),$s(t.graphArea,r.width+6,0),Ys(t.dataArea,r.width+6,0)}else if("vertical"===n.orientation){let a=e.dataAreaSize.width/2;r.width>e.dataAreaSize.width&&($s(t.svg,r.width-e.dataAreaSize.width,0),$s(t.graphArea,r.width-e.dataAreaSize.width,0),Ys(t.dataArea,r.width/2-e.dataAreaSize.width/2,0),a=r.width/2);const i=parseFloat(t.axis.attr("width")),o=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",a+i).attr("y",r.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=o,$s(t.svg,0,r.height+6),$s(t.graphArea,0,r.height+6),Ys(t.dataArea,0,r.height+6)}}if(n.valueUnit){const r=Ps(n.valueUnit,"tracker-tick-label");if("horizontal"===n.orientation){const a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",-1*(r.width+6)).attr("y",e.dataAreaSize.height+6).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a}else if("vertical"===n.orientation){const a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",e.dataAreaSize.width/2-r.width/2).attr("y",-(r.height/2+6)).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a,$s(t.svg,0,r.height+6),$s(t.graphArea,0,r.height+6),Ys(t.dataArea,0,r.height+6)}}})(a,e,n),((t,e,n,r)=>{if(!e||!n)return;const a=t.scale,i=n.range,o=n.rangeColor,s=[];let l=0;for(let t=0;t<i.length;t++)s.push({start:l,end:i[t],color:o[t]}),l=i[t];"horizontal"===n.orientation?t.dataArea.selectAll("backPanel").data(s).enter().append("rect").attr("x",((t,e)=>Math.floor(a(t.start)))).attr("y",(t=>0)).attr("width",((t,e)=>Math.ceil(a(t.end-t.start)))).attr("height",e.dataAreaSize.height).style("fill",(t=>t.color)):"vertical"===n.orientation&&t.dataArea.selectAll("backPanel").data(s).enter().append("rect").attr("x",((t,e)=>0)).attr("y",(t=>Math.floor(a(t.end)))).attr("width",e.dataAreaSize.width).attr("height",(t=>e.dataAreaSize.height-Math.floor(a(t.end-t.start)))).style("fill",(t=>t.color))})(a,e,n);const o=((t,e,n,r)=>{let a="";if(!e||!n)return;const i=_l(n.value,e);if("string"==typeof i)return i;const o=i;if(Number.isNaN(o))return a="Invalid input value: "+i,a;const s=n.valueColor,l=t.scale;if("horizontal"===n.orientation){const n=e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",l(0)).attr("y",n).attr("width",Math.floor(l(o))).attr("height",n).style("fill",s)}else if("vertical"===n.orientation){const n=e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n).attr("y",Math.floor(l(o))).attr("width",n).attr("height",e.dataAreaSize.height-Math.floor(l(o))).style("fill",s)}})(a,e,n);if("string"==typeof o)return o;((t,e,n,r)=>{if(!e||!n)return;if(!n.showMarker)return;const a=n.markerValue,i=n.markerColor,o=t.scale;if("horizontal"===n.orientation){const n=2*e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",o(a)-1.5).attr("y",n/4).attr("width",3).attr("height",n).style("fill",i)}else if("vertical"===n.orientation){const n=2*e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n/4).attr("y",o(a)-1.5).attr("width",n).attr("height",3).style("fill",i)}})(a,e,n),((t,e,n)=>{const r=Ce(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))})(t,a,e)},Fl=(t,e,n)=>{if(e&&Fl)return"Under construction"};let Sl=!1;const Bl=(t,e)=>{const n=e.dataset;if(0===n.length)return!1;let r=null;if(null===e.selectedDataset){for(const e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;if(r)return e.selectedDataset=r.getId(),!0}else{const a=e.selectedDataset;let i=n.findIndex((t=>t===a));if(i>=0){if(i===e.dataset.length-1){for(const e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;return!!r&&(e.selectedDataset=r.getId(),!0)}{i++;const a=n[i];if(r=t.datasets.getDatasetById(a),e.selectedDataset=a,r&&!r.getQuery().usedAsXDataset)return!0;Bl(t,e)}}}return!1},Nl=(t,e,n,r)=>{Ce(e).select("#svg").remove();const a=Object.getOwnPropertyNames(t);for(let e=0;e<a.length;e++)delete t[a[e]];const i=Ce(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=i;const o=i.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=o;const s=o.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=s,t},Il=(t,e)=>{const n=t.svg.selectAll("circle");for(const t of n){const e=Ce(t).attr("id");e&&e.startsWith("tracker-selected-circle-")&&Ce(t).style("stroke","none")}e.selectedDate="",t.monitor.text("")},Ll=(t,e,n,r,a)=>{if(!n||!r)return;const i=r.selectedDataset;if(null===i)return;const o=n.datasets.getDatasetById(i);if(!o)return;const s=o.getName();a.month(),a.daysInMonth(),a.year();const l=Ps("30","tracker-month-label"),u=2.8*Math.max(l.width,l.height),c=a.format("YYYY"),h=a.format("MMM"),f=Ps(c,"tracker-month-header-year"),d=Ps(h,"tracker-month-header-month");let g=0;const p=e.graphArea.append("g");let y=null;r.headerMonthColor?y=r.headerMonthColor:r.color&&(y=r.color);const m=p.append("text").text(h).attr("id","titleMonth").attr("transform","translate("+u/4+","+d.height+")").attr("class","tracker-month-header-month").style("cursor","default").on("click",(t=>{Il(e,r)}));y&&m.style("fill",y),g+=d.height;let v=null;r.headerYearColor?v=r.headerYearColor:r.color&&(v=r.color);const x=p.append("text").text(c).attr("id","titleYear").attr("transform","translate("+u/4+","+(g+f.height)+")").attr("class","tracker-month-header-year").style("cursor","default").attr("font-weight","bold").on("click",(t=>{Il(e,r)}));v&&x.style("fill",v),g+=f.height;const A=Ps(s,"tracker-month-title-rotator");if("circle"===r.mode||"annotation"===r.mode&&!r.showAnnotationOfAllTargets){const i=p.append("text").text(s).attr("transform","translate("+3.5*u+","+A.height+")").attr("class","tracker-month-title-rotator").style("cursor","pointer").on("click",(i=>{Bl(n,r)&&(Il(e,r),Ol(t,e,n,r,a))}));e.rotator=i}const w=Ps("0.0000","tracker-month-title-monitor"),b=p.append("text").text("").attr("id","monitor").attr("class","tracker-month-title-monitor").attr("transform","translate("+3.5*u+","+(A.height+w.height)+")").style("cursor","pointer").style("fill",r.selectedRingColor);e.monitor=b;const D=Ps("<","tracker-month-title-arrow");p.append("text").text("<").attr("id","arrowLeft").attr("transform","translate("+5.5*u+","+(g/2+D.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(i=>{Il(e,r),r.selectedDate="";const o=a.clone().add(-1,"month");Ol(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text(">").attr("id","arrowLeft").attr("transform","translate("+6.5*u+","+(g/2+D.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(i=>{Il(e,r);const o=a.clone().add(1,"month");Ol(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text("◦").attr("id","arrowToday").attr("transform","translate("+6*u+","+(g/2+D.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(a=>{Il(e,r);const i=Ns(n.dateFormat);Ol(t,e,n,r,i)})).style("cursor","pointer"),g+=8;const k=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];"mon"===r.startWeekOn.toLowerCase()&&k.push(k.shift());const C=Ps(k[0],"tracker-month-weekday");e.graphArea.selectAll("weekDays").data(k).enter().append("text").text((t=>t)).attr("transform",((t,e)=>"translate("+(e+.5)*u+","+(g+C.height)+")")).attr("class","tracker-month-weekday").attr("text-anchor","middle").style("cursor","default").on("click",(t=>{Il(e,r)})),g+=C.height+8;let M=null;r.dividingLineColor?M=r.dividingLineColor:r.color&&(M=r.color);const T=e.graphArea.append("rect").attr("x",0).attr("y",g).attr("width",6.5*u+C.width).attr("height",1).attr("class","tracker-month-dividing-line");M&&T.style("fill",M),g+=1,p.attr("height",g),e.header=p,Ys(e.dataArea,0,g)};function Vl(t,e,r,a,i){if(!r||!a)return;const o=a.mode;if("circle"!==o&&"annotation"!==o)return"Unknown month view mode";const s=a.selectedDataset;if(null===s)return;const l=r.datasets.getDatasetById(s);if(!l)return;let u=a.dataset.findIndex((t=>t===s));s<0&&(u=0);const c=a.threshold[u];i.month(),i.daysInMonth();const h=Ps("30","tracker-month-label"),f=2.8*Math.max(h.width,h.height),d=f/2.8*1.8/2,g=(f-2*d)/2;let p=R(l.getValues());null!==a.yMin[u]&&(p=a.yMin[u]);let y=z(l.getValues());null!==a.yMax[u]&&(y=a.yMax[u]);let m=!0;(null===y||null===p||y<=p)&&(m=!1);const v=i.clone().startOf("month");let x=v.clone().subtract(v.day(),"days");"mon"===a.startWeekOn.toLowerCase()&&(x=x.add(1,"days"));const A=i.clone().endOf("month");let w=A.clone().add(7-A.day()-1,"days");"mon"===a.startWeekOn.toLowerCase()&&(w=w.add(1,"days"));const b=l.getStartDate(),D=l.getEndDate(),k=a.showAnnotation,C=a.annotation,M=C[u],T=a.showAnnotationOfAllTargets,_=[];let E=0,F=0,S=0;for(let t=x.clone();t<=w;t.add(1,"days")){t=Ts(Ss(t,r.dateFormat),r.dateFormat),"2021-09-13"===t.format("YYYY-MM-DD")&&(Sl=!1),"mon"===a.startWeekOn.toLowerCase()?(E=t.day()-1,E<0&&(E=6),F=Math.floor(S/7)):(E=t.day(),F=Math.floor(S/7));let e=!0;(t.diff(v)<0||t.diff(A)>0)&&(e=!1);let n=!0;b&&D&&t.diff(b)>=0&&t.diff(D)<=0&&(n=!1);const i=l.getValue(t);Sl&&(console.log(l),console.log(Ss(t,r.dateFormat)),console.log(i));let o=!1;a.circleColorByValue?(m||null!==i&&i>c)&&(o=!0):null!==i&&i>c&&(o=!0);let s=null;a.circleColorByValue&&m&&null!==i&&(s=(i-p)/(y-p)),Sl&&(console.log(p),console.log(y),console.log(s));const u=l.getValue(t,1),h=l.getValue(t,-1);let f=!1;null!==i&&i>c&&null!==h&&h>c&&(f=!0);let d=!1;null!==i&&i>c&&null!==u&&u>c&&(d=!0),Sl&&(console.log(`preValue: ${h}, curValue: ${i}, nextValue: ${u}`),console.log(a.threshold),console.log(`streakIn: ${f}, streakOut: ${d}`));let g="";if(k)if(T)for(const e of a.dataset){const n=a.dataset.findIndex((t=>t===e));if(n>=0){const i=r.datasets.getDatasetById(e).getValue(t),o=a.threshold[n];null!==i&&i>o&&(g+=C[n])}}else i>c&&(g=M);_.push({date:Ss(t,r.dateFormat),value:i,scaledValue:s,dayInMonth:t.date(),isInThisMonth:e,isOutOfDataRange:n,row:F,col:E,showCircle:o,streakIn:f,streakOut:d,annotation:g}),S++,Sl&&(Sl=!1)}const B=(E+1)*f,N=Na().domain([-.5,6.5]).range([0,B]);if("circle"===o&&a.showCircle&&a.showStreak){let t="#69b3a2";a.circleColor?t=a.circleColor:a.color&&(t=a.color),e.dataArea.selectAll("streakIn").data(_.filter((t=>t.streakIn))).enter().append("rect").attr("x",(t=>N(t.col)-d-g)).attr("y",(t=>N(t.row)-1.5)).attr("width",g).attr("height",3).style("fill",(e=>e.showCircle?a.circleColorByValue?null!==e.scaledValue?Gn("white",t)(.8*e.scaledValue+.2):"none":t:"none")).style("opacity",(t=>t.isOutOfDataRange||a.dimNotInMonth&&!t.isInThisMonth?.2:1)),e.dataArea.selectAll("streakOut").data(_.filter((t=>t.streakOut))).enter().append("rect").attr("x",(t=>N(t.col)+d)).attr("y",(t=>N(t.row)-1.5)).attr("width",g).attr("height",3).style("fill",(e=>e.showCircle?a.circleColorByValue?null!==e.scaledValue?Gn("white",t)(.8*e.scaledValue+.2):"none":t:"none")).style("opacity",(t=>t.isOutOfDataRange||a.dimNotInMonth&&!t.isInThisMonth?.2:1))}let I="#69b3a2";a.circleColor?I=a.circleColor:a.color&&(I=a.color),"circle"===o&&a.showCircle&&e.dataArea.selectAll("dot").data(_).enter().append("circle").attr("r",d).attr("cx",(t=>N(t.col))).attr("cy",(t=>N(t.row))).style("fill",(t=>{if(t.showCircle){if(!a.circleColorByValue)return I;if(null!==t.scaledValue){return Gn("white",I)(.8*t.scaledValue+.2)}return"none"}return"none"})).style("opacity",(t=>t.isOutOfDataRange||a.dimNotInMonth&&!t.isInThisMonth?.2:1)).style("cursor","default");const L=Ss(window.moment(),r.dateFormat);if("circle"===o&&a.showTodayRing){const t=e.dataArea.selectAll("todayRing").data(_.filter((t=>t.date===L))).enter().append("circle").attr("r",.9*d).attr("cx",(t=>N(t.col))).attr("cy",(t=>N(t.row))).attr("class","tracker-month-today-circle").style("cursor","default");""!==a.todayRingColor?t.style("stroke",a.todayRingColor):t.style("stroke","white")}"circle"===o&&a.showSelectedRing&&e.dataArea.selectAll("selectedRing").data(_).enter().append("circle").attr("r",d).attr("cx",(t=>N(t.col))).attr("cy",(t=>N(t.row))).attr("id",(t=>"tracker-selected-circle-"+t.date)).attr("class","tracker-month-selected-circle").style("cursor","default").style("stroke","none"),e.dataArea.selectAll("dayLabel").data(_).enter().append("text").text((t=>t.dayInMonth.toString())).attr("transform",(t=>"translate("+N(t.col)+","+(N(t.row)+h.height/4)+")")).style("fill-opacity",(t=>t.isOutOfDataRange||a.dimNotInMonth&&!t.isInThisMonth?.2:1)).attr("date",(t=>t.date)).attr("value",(t=>t.value)).attr("valueType",(t=>n[l.valueType])).attr("class","tracker-month-label").on("click",(t=>{Il(e,a);const n=Ce(this).attr("date");if(a.selectedDate=n,a.showSelectedRing&&e.dataArea.select("#tracker-selected-circle-"+n).style("stroke",a.selectedRingColor),a.showSelectedValue){const t=Ce(this).attr("value");let n="";if("Time"===Ce(this).attr("valueType")){n=window.moment("00:00","HH:mm",!0).add(parseFloat(t),"seconds").format("HH:mm")}else n=t;e.monitor.text(n)}})).style("cursor","pointer"),"annotation"===o&&k&&e.dataArea.selectAll("dayAnnotation").data(_).enter().append("text").text((t=>t.annotation)).attr("transform",(t=>{const e=N(t.col);let n=N(t.row)+h.height/4;t.annotation&&(n+=d);return"translate("+e+","+n+")"})).attr("class","tracker-month-annotation");const V=parseFloat(e.svg.attr("width")),O=parseFloat(e.svg.attr("height")),P=parseFloat(e.graphArea.attr("width")),$=parseFloat(e.graphArea.attr("height")),Y=7*f+parseFloat(e.header.attr("height")),U=7*f;Y>O&&$s(e.svg,0,Y-O),U>V&&$s(e.svg,U-V,0),Y>$&&$s(e.graphArea,0,Y-$),U>P&&$s(e.svg,U-P,0)}const Ol=(t,e,n,r,a)=>{n&&Pl&&(e=Nl(e,t,n),Ll(t,e,n,r,a),Vl(0,e,n,r,a))},Pl=(t,e,n)=>{if(!e||!Pl)return;n.dataset;let r=0;for(const t of e.datasets)t.getQuery().usedAsXDataset||r++;if(0===r)return"No available dataset found";if(Bl(e,n),null===n.selectedDataset)return"No available dataset found";let a={};a=Nl(a,t,e);let i=null;if(n.initMonth){if(i=Fs(n.initMonth,e.dateFormat),!i){const t=window.moment(n.initMonth,"YYYY-MM",!0);if(!t.isValid())return"Invalid initMonth";i=t}}else i=e.datasets.getDates().last();i&&(Ll(t,a,e,n,i),Vl(0,a,e,n,i),((t,e,n)=>{const r=Ce(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))})(t,a,e))},$l=(t,e,n,r)=>{let a="";const i=.5*n.dataAreaSize.width,o=.7*i,s=o*r.ratioInnerRadius,l=[];for(const t of r.data){const e=_l(t,n);if("string"==typeof e){a=e;break}"number"==typeof e&&l.push(e)}if(""!==a)return a;const u=[];for(const t of r.label){const e=Tl(t,n);if(e.startsWith("Error")){a=e;break}u.push(e)}if(""!==a)return a;const c=r.hideLabelLessThan,h=u.map((t=>Ps(t,"tracker-tick-label"))),f=[];for(const t of r.extLabel){const e=Tl(t,n);if(e.startsWith("Error")){a=e;break}f.push(e)}if(""!==a)return a;const d=f.map((t=>Ps(t,"tracker-pie-label"))),g=r.showExtLabelOnlyIfNoLabel,p=wa().range(r.dataColor),y=e.dataArea.append("g");y.attr("transform",(()=>"translate("+.5*n.dataAreaSize.width+","+.5*n.dataAreaSize.height+")"));const m=function(){var t=Ds,e=bs,n=null,r=Qo(0),a=Qo(ss),i=Qo(0);function o(o){var s,l,u,c,h,f=(o=ms(o)).length,d=0,g=new Array(f),p=new Array(f),y=+r.apply(this,arguments),m=Math.min(ss,Math.max(-ss,a.apply(this,arguments)-y)),v=Math.min(Math.abs(m)/f,i.apply(this,arguments)),x=v*(m<0?-1:1);for(s=0;s<f;++s)(h=p[g[s]=s]=+t(o[s],s,o))>0&&(d+=h);for(null!=e?g.sort((function(t,n){return e(p[t],p[n])})):null!=n&&g.sort((function(t,e){return n(o[t],o[e])})),s=0,u=d?(m-f*x)/d:0;s<f;++s,y=c)l=g[s],c=y+((h=p[l])>0?h*u:0)+x,p[l]={data:o[l],index:s,value:h,startAngle:y,endAngle:c,padAngle:v};return p}return o.value=function(e){return arguments.length?(t="function"==typeof e?e:Qo(+e),o):t},o.sortValues=function(t){return arguments.length?(e=t,n=null,o):e},o.sort=function(t){return arguments.length?(n=t,e=null,o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Qo(+t),o):r},o.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Qo(+t),o):a},o.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:Qo(+t),o):i},o}(),v=m(l),x=y.selectAll("sector").data(v).enter().append("g").attr("class","sector"),A=ys().innerRadius(s).outerRadius(o),w=ys().innerRadius(.9*i).outerRadius(.9*i);x.append("path").attr("fill",((t,e)=>p(e.toString()))).attr("d",A);const b=t=>(t.endAngle-t.startAngle)/(2*Math.PI)<c;y.selectAll("label").data(m(l)).enter().append("text").text(((t,e)=>b(t)?"":u[e])).attr("transform",(t=>"translate("+A.centroid(t)[0]+","+A.centroid(t)[1]+")")).style("text-anchor","middle").attr("class","tracker-pie-label");const D=t=>t.startAngle+(t.endAngle-t.startAngle)/2;y.selectAll("extLabel").data(v).enter().append("text").text(((t,e)=>g?""===u[e]||b(t)?f[e]:"":f[e])).attr("transform",((t,e)=>{const n=w.centroid(t),r=D(t);return n[0]=(.99*i-d[e].width)*(r<Math.PI?1:-1),"translate("+n[0]+","+n[1]+")"})).style("text-anchor",(t=>D(t)<Math.PI?"start":"end")).attr("class","tracker-pie-label");const k=(t,e)=>{const n=h[e].width,r=d[e].width;b(t);const a=D(t),o=A.centroid(t),s=w.centroid(t),l=w.centroid(t);let c=Math.sqrt(Math.pow(s[0]-o[0],2)+Math.pow(s[1]-o[1],2));""!==u[e]&&(o[0]=o[0]+(s[0]-o[0])*n/c,o[1]=o[1]+(s[1]-o[1])*n/c,l[0]=(.99*i-r-3)*(a<Math.PI?1:-1)),c=Math.sqrt(Math.pow(s[0]-o[0],2)+Math.pow(s[1]-o[1],2));return c>Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2))?[o,l]:[o,s,l]};y.selectAll("line").data(v).enter().append("polyline").attr("stroke","black").style("fill","none").attr("stroke-width",1).attr("points",((t,e)=>{if(g){if((""===u[e]||b(t))&&""!==f[e])return k(t,e)}else if(""!==f[e])return k(t,e)})).attr("class","tracker-axis")},Yl=(t,e,n)=>{if(!e||!n)return;let r={};r=((t,e,n,r)=>{Ce(e).select("#svg").remove();const a=Object.getOwnPropertyNames(t);for(let e=0;e<a.length;e++)delete t[a[e]];const i=Ce(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=i;const o=i.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=o;const s=o.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=s,t})(r,t,e);const a=Go[n.dataColor.length];for(let t=0;t<n.dataColor.length;t++)null===n.dataColor[t]&&(n.dataColor[t]=a[t]);((t,e,n,r)=>{if(!n||!r)return;if(!r.title)return;const a=Ps(r.title,"tracker-title"),i=e.graphArea.append("text").text(r.title).attr("id","title").attr("transform","translate("+n.dataAreaSize.width/2+","+a.height/2+")").attr("height",a.height).attr("class","tracker-title");e.title=i,$s(e.svg,0,a.height),$s(e.graphArea,0,a.height),Ys(e.dataArea,0,a.height)})(0,r,e,n),$l(0,r,e,n),n.showLegend&&((t,e,n,r)=>{const a=e.svg;e.graphArea;const i=e.dataArea,o=e.title;let s=0;o&&(s=parseFloat(o.attr("height")));const l=r.dataName,u=l.map((t=>Ps(t,"tracker-legend-label")));let c=0,h=0;for(let t=0;t<l.length;t++)u[t].width>h&&(h=u[t].width,c=t);const f=h/l[c].length,d=u[c].height,g=l.length,p=2*f,y=d,m=2*f;let v=0,x=0;"vertical"===r.legendOrientation?(v=3*p+m+h,x=(g+1)*y):"horizontal"===r.legendOrientation&&(v=(2*p+m)*g+p+j(u,((t,e)=>t.width)),x=y+d);let A=0,w=0;if("top"===r.legendPosition)A=n.dataAreaSize.width/2-v/2,w=s,$s(a,0,x+y),Ys(i,0,x+y);else if("bottom"===r.legendPosition)A=n.dataAreaSize.width/2-v/2,w=s+n.dataAreaSize.height+y,$s(a,0,x+y);else if("left"===r.legendPosition)A=0,w=s+n.dataAreaSize.height/2-x/2,$s(a,v+p,0),Ys(i,v+p,0);else{if("right"!==r.legendPosition)return;A=n.dataAreaSize.width+p,w=s+n.dataAreaSize.height/2-x/2,$s(a,v+p,0)}const b=e.graphArea.append("g").attr("id","legend").attr("transform","translate("+A+","+w+")"),D=b.append("rect").attr("class","tracker-legend").attr("width",v).attr("height",x);r.legendBgColor&&D.style("fill",r.legendBgColor),r.legendBorderColor&&D.style("stroke",r.legendBorderColor);const k=p,C=d,M=k+p+m,T=C;if("vertical"===r.legendOrientation)b.selectAll("markers").data(l).enter().append("circle").attr("cx",k+m/2).attr("cy",((t,e)=>C+e*y)).attr("r",((t,e)=>5)).style("fill",((t,e)=>r.dataColor[e])),b.selectAll("labels").data(l).enter().append("text").attr("x",M).attr("y",((t,e)=>T+e*y)).text(((t,e)=>t)).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",((t,e)=>r.dataColor[e]));else if("horizontal"===r.legendOrientation){let t=0;t=0,b.selectAll("markers").data(l).enter().append("circle").attr("cx",((e,n)=>(0===n?t=k+m/2:t+=u[n].width+p+m+p,t))).attr("cy",C).attr("r",((t,e)=>5)).style("fill",((t,e)=>r.dataColor[e])),t=0,b.selectAll("labels").data(l).enter().append("text").attr("x",((e,n)=>(0===n?t=M:t+=u[n].width+p+m+p,t))).attr("y",T).text(((t,e)=>t)).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",((t,e)=>r.dataColor[e]))}})(0,r,e,n),((t,e,n)=>{const r=Ce(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))})(t,r,e)},zl=(t,e,n)=>{if(!e||!n)return;let r="";n.template,r=n.template;const a=Tl(r,e);if(a.startsWith("Error:"))return a;if(r=a,""!==r){const e=Ce(t).append("div");if(r.includes("\n")||r.includes("\\n")){const t=r.split(/(\n|\\n)/);for(const n of t)"\n"!==n&&"\\n"!==n&&e.append("div").text(n)}else e.text(r);""!==n.style&&e.attr("style",n.style)}},Rl=(t,e,n)=>{if(!e||!n)return;const r=e.datasets,a=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let a=-1;for(let i of t)null!=(i=e(i,++a,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}(r.getDates()),i=qo().domain(a).range([0,e.dataAreaSize.width]);t.xScale=i;const o=Es(n.xAxisTickInterval),[s,l]=((t,e)=>{let n=[],r=null;if(e){const r=t[0],a=t[t.length-1];n=Qa.range(r.toDate(),a.toDate(),e.asDays())}else{const e=t.length;r=e<=15?Qa:e<=60?Qa.every(4):e<=105?ti:e<=450?pi:e<=900?pi.every(2):mi}return[n,r]})(r.getDates(),o),u=((t,e)=>{if(e){const t=t=>Ss(window.moment(t),e);return t}{let e=null;const n=t.length;return e=Mi(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}})(r.getDates(),n.xAxisTickLabelFormat),c=ot(i);s&&0!==s.length?c.tickValues(s):l&&c.ticks(l),u&&c.tickFormat(u);const h=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(c).attr("class","tracker-axis");n.xAxisColor&&h.style("stroke",n.xAxisColor),t.xAxis=h;const f=Ps("99-99-99"),d=h.selectAll("text").attr("x",-1*f.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&d.style("fill",n.xAxisColor);const g=f.width*Math.sin(65/180*Math.PI),p=h.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+g)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&p.style("fill",n.xAxisLabelColor),h.attr("height",6+g),$s(t.svg,0,6+g),$s(t.graphArea,0,6+g)},Ul=(t,r,a,i,o)=>{if(!r||!a)return;const s=r.datasets;if(0===o.length)return;if("left"!==i&&"right"!==i)return;let l=null,u=null,c=null,h=!1;for(const t of o){const e=s.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===l||e.getYMin()<l)&&(l=e.getYMin()),(null===u||e.getYMax()>u)&&(u=e.getYMax()),h=e.valueType===n.Time,null===c)c=h;else if(h!==c)return"Not all values in time format"}let f=null;"left"===i?f=a.yMin[0]:"right"===i&&(f=a.yMin[1]);let d=!1;"number"!=typeof f?f=l:d=!0;let g=null;"left"===i?g=a.yMax[0]:"right"===i&&(g=a.yMax[1]);let p=!1;if("number"!=typeof g?g=u:p=!0,g<f){const t=f;f=g,g=t;const e=d;d=p,p=e}const y=g-f,m=Na();let v,x;v=d?f:f-.2*y,x=p?g:g+.2*y,a.GetGraphType()===e.Bar&&(x<0&&(x=0),v>0&&(v=0));let A=[v,x];("left"===i&&a.reverseYAxis[0]||"right"===i&&a.reverseYAxis[1])&&(A=[x,v]),m.domain(A).range([r.dataAreaSize.height,0]),"left"===i?t.leftYScale=m:"right"===i&&(t.rightYScale=m);let w="";"left"===i?w=a.yAxisColor[0]:"right"===i&&(w=a.yAxisColor[1]);let b="";"left"===i?b=a.yAxisLabelColor[0]:"right"===i&&(b=a.yAxisLabelColor[1]);let D="";"left"===i?D=a.yAxisLabel[0]:"right"===i&&(D=a.yAxisLabel[1]);let k="",C=null,M=null;"left"===i?(k=a.yAxisUnit[0],C=a.yAxisTickInterval[0],M=a.yAxisTickLabelFormat[0]):"right"===i&&(k=a.yAxisUnit[1],C=a.yAxisTickInterval[1],M=a.yAxisTickLabelFormat[1]);let T,_=null;if(h?_=Es(C):(_=parseFloat(C),Number.isNumber(_)&&!Number.isNaN(_)||(_=null)),"left"===i?T=st(m):"right"===i&&(T=it(Q,m)),T){const t=((t,e,n,r=!1)=>{if(r)return n?t=>window.moment("00:00","HH:mm",!0).add(t,"seconds").format(n):n=>{const r=Math.abs(e-t);let a=window.moment("00:00","HH:mm",!0).add(n,"seconds").format("HH:mm");return r>43200&&(n<t||n>e||(n-t)/3600%2<1)&&(a=""),a};if(n)return t=>pl.sprintf("%"+n,t);return Sa(t,e,10)})(v,x,M,h);t&&T.tickFormat(t);const e=((t,e,n,r=!1)=>{const a=Math.abs(e-t);let i=[];r?i=n&&window.moment.isDuration(n)?W(t,e,Math.abs(n.asSeconds())):a>18e3?W(t=3600*Math.floor(t/3600),e=3600*Math.ceil(e/3600),3600):W(t=1800*Math.floor(t/1800),e=1800*Math.ceil(e/1800),1800):n&&"number"==typeof n&&(i=W(t,e,n));return 0===i.length?null:i})(v,x,_,h);e&&T.tickValues(e)}const E=t.dataArea.append("g").attr("id","yAxis").call(T).attr("class","tracker-axis");"right"==i&&E.attr("transform","translate("+r.dataAreaSize.width+" ,0)"),"left"===i?t.leftYAxis=E:"right"===i&&(t.rightYAxis=E);const F=E.selectAll("path");w&&F.style("stroke",w);const S=E.selectAll("line");w&&S.style("stroke",w);const B=E.selectAll("text").attr("class","tracker-tick-label");w&&B.style("fill",w);let N=0;for(const t of B)if(t.textContent){const e=Ps(t.textContent,"tracker-axis-label");e.width>N&&(N=e.width)}""!==k&&(D+=" ("+k+")");const I=Ps(D),L=E.append("text").text(D).attr("transform","rotate(-90)").attr("x",-1*r.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===i?L.attr("y",-6-N-I.height/2):L.attr("y",6+N+I.height),b&&L.style("fill",b);const V=I.height+N+6;E.attr("width",V),$s(t.svg,V,0),$s(t.graphArea,V,0),"left"===i&&(Ys(t.dataArea,V,0),t.title&&Ys(t.title,V,0))},Hl=(t,e,n,r,a)=>{if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showLine[r.getId()]){const e=function(t,e){var n=Qo(!0),r=null,a=xs,i=null,o=us(s);function s(s){var l,u,c,h=(s=ms(s)).length,f=!1;for(null==r&&(i=a(c=o())),l=0;l<=h;++l)!(l<h&&n(u=s[l],l,s))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+t(u,l,s),+e(u,l,s));if(c)return i=null,c+""||null}return t="function"==typeof t?t:void 0===t?As:Qo(t),e="function"==typeof e?e:void 0===e?ws:Qo(e),s.x=function(e){return arguments.length?(t="function"==typeof e?e:Qo(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:Qo(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:Qo(!!t),s):n},s.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),s):a},s.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),s):r},s}().defined((t=>null!==t.value)).x((e=>t.xScale(e.date))).y((t=>i(t.value))),a=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",n.lineWidth[r.getId()]);n.fillGap[r.getId()]?a.datum(Array.from(r).filter((t=>null!==t.value))).attr("d",e):a.datum(r).attr("d",e),n.lineColor[r.getId()]&&a.style("stroke",n.lineColor[r.getId()])}},Xl=(t,e,r,a,i)=>{if(!e||!r)return;let o=null;if("left"===i?o=t.leftYScale:"right"===i&&(o=t.rightYScale),r.showPoint[a.getId()]){const i=t.dataArea.selectAll("dot").data(Array.from(a).filter((t=>null!==t.value))).enter().append("circle").attr("r",r.pointSize[a.getId()]).attr("cx",(e=>t.xScale(e.date))).attr("cy",(t=>o(t.value))).attr("date",(t=>Mi("%y-%m-%d")(t.date))).attr("value",(t=>{if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("valueType",n[a.valueType]).attr("class","tracker-dot");r.pointColor[a.getId()]&&(i.style("fill",r.pointColor[a.getId()]),r.pointBorderColor[a.getId()]&&r.pointBorderWidth[a.getId()]>0&&(i.style("stroke",r.pointBorderColor[a.getId()]),i.style("stroke-width",r.pointBorderWidth[a.getId()]))),r.allowInspectData&&function(t,e,n){const r=e.dataArea.append("svg").style("opacity",0),a=r.append("rect").attr("x",0).attr("y",0),i=r.append("text"),o=i.append("tspan").attr("class","tracker-tooltip-label"),s=i.append("tspan").attr("class","tracker-tooltip-label"),l=3,u=3;t.on("mouseenter",(t=>{const[e,c]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);let h=0,f=0;const d="date: "+Ce(this).attr("date"),g=Ps(d,"tracker-tooltip-label");o.text(d),g.width>h&&(h=g.width),f+=g.height,o.attr("x",l).attr("y",f);let p="value: ";const y=Ce(this).attr("valueType"),m=Ce(this).attr("value");if("Time"===y){p+=window.moment("00:00","HH:mm",!0).add(parseFloat(m),"seconds").format("HH:mm"),s.text(p)}else p+=m,s.text(p);const v=Ps(p,"tracker-tooltip-label");v.width>h&&(h=v.width),f+=u+v.height,s.attr("x",l).attr("y",f),h+=2*l,f+=2*u,i.attr("width",h).attr("height",f),a.attr("width",h).attr("height",f).attr("class","tracker-tooltip");let x=e,A=c;const w=12,b=12;x=e+w+h>n.dataAreaSize.width?e-h-w:e+w,A=c-b-f<0?c+b:c-b-f,r.attr("x",x).attr("y",A),r.transition().duration(200).style("opacity",1)})).on("mouseleave",(()=>{r.transition().duration(500).style("opacity",0)}))}(i,t,e)}};const Wl=(t,e,n,r,a,i,o)=>{if(!e||!n)return;const s=e.dataAreaSize.width/r.getLength();let l=s;s-1>0&&(l=s-1),l/=o;let u=null;"left"===a?u=t.leftYScale:"right"===a&&(u=t.rightYScale);const c=t.dataArea.selectAll("bar").data(Array.from(r).filter((t=>null!==t.value))).enter().append("rect").attr("x",((e,n)=>{if(0===n){const n=i+1-o/2;if(n<1)return t.xScale(e.date)-s/2+i*l+n*l}return t.xScale(e.date)-s/2+i*l})).attr("y",(t=>u(Math.max(t.value,0)))).attr("width",((t,e)=>{if(0===e){const t=i+1-o/2;return t<0?0:t<1?l*t:l}if(e===r.getLength()-1){const t=1-(i+1-o/2);return t<0?0:t<1?l*t:l}return l})).attr("height",(t=>{if(null!==t.value)return Math.abs(u(t.value)-u(0))})).attr("class","tracker-bar");n.barColor[r.getId()]&&c.style("fill",n.barColor[r.getId()])},jl=(t,n,r)=>{const a=t.svg;t.graphArea;const i=t.dataArea,o=t.title,s=t.xAxis,l=t.leftYAxis,u=t.rightYAxis;let c=0;o&&(c=parseFloat(o.attr("height")));const h=parseFloat(s.attr("height"));let f=0;l&&(f=parseFloat(l.attr("width")));let d=0;u&&(d=parseFloat(u.attr("width")));const g=n.datasets,p=g.getXDatasetIds(),y=g.getNames(),m=y.map((t=>Ps(t,"tracker-legend-label")));let v=0,x=0;for(let t=0;t<y.length;t++)p.includes(t)||m[t].width>x&&(x=m[t].width,v=t);const A=x/y[v].length,w=m[v].height,b=y.length-p.length,D=2*A,k=w,C=2*A;let M=0,T=0;"vertical"===r.legendOrientation?(M=3*D+C+x,T=(b+1)*k):"horizontal"===r.legendOrientation&&(M=(2*D+C)*b+D+j(m,((t,e)=>p.includes(e)?0:t.width)),T=k+w);let _=0,E=0;if("top"===r.legendPosition)_=f+n.dataAreaSize.width/2-M/2,E=c,$s(a,0,T+k),Ys(i,0,T+k);else if("bottom"===r.legendPosition)_=f+n.dataAreaSize.width/2-M/2,E=c+n.dataAreaSize.height+h+k,$s(a,0,T+k);else if("left"===r.legendPosition)_=0,E=c+n.dataAreaSize.height/2-T/2,$s(a,M+D,0),Ys(i,M+D,0);else{if("right"!==r.legendPosition)return;_=n.dataAreaSize.width+f+d+D,E=c+n.dataAreaSize.height/2-T/2,$s(a,M+D,0)}const F=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+_+","+E+")"),S=F.append("rect").attr("class","tracker-legend").attr("width",M).attr("height",T);r.legendBgColor&&S.style("fill",r.legendBgColor),r.legendBorderColor&&S.style("stroke",r.legendBorderColor);const B=D,N=w,I=B+D+C,L=N;if("vertical"===r.legendOrientation){r.GetGraphType()===e.Line?(F.selectAll("markers").data(y).enter().append("line").attr("x1",B).attr("x2",B+C).attr("y1",((t,e)=>{const n=p.filter((t=>t<e)).length;return N+(e-=n)*k})).attr("y2",((t,e)=>{const n=p.filter((t=>t<e)).length;return N+(e-=n)*k})).style("stroke",((t,e)=>{if(!p.includes(e))return r.lineColor[e]})),F.selectAll("markers").data(y).enter().append("circle").attr("cx",B+C/2).attr("cy",((t,e)=>{const n=p.filter((t=>t<e)).length;return N+(e-=n)*k})).attr("r",((t,e)=>{if(!p.includes(e))return r.showPoint[e]?r.pointSize[e]:0})).style("fill",((t,e)=>{if(!p.includes(e))return r.pointColor[e]}))):r.GetGraphType()===e.Bar&&F.selectAll("markers").data(y).enter().append("rect").attr("x",B).attr("y",((t,e)=>{const n=p.filter((t=>t<e)).length;return N+(e-=n)*k-w/2})).attr("width",C).attr("height",w).style("fill",((t,e)=>{if(!p.includes(e))return r.barColor[e]}));const t=F.selectAll("labels").data(y).enter().append("text").attr("x",I).attr("y",((t,e)=>{const n=p.filter((t=>t<e)).length;return L+(e-=n)*k})).text(((t,e)=>p.includes(e)?"":t)).style("alignment-baseline","middle").attr("class","tracker-legend-label");r.GetGraphType()===e.Line?t.style("fill",((t,e)=>{if(!p.includes(e))return r.lineColor[e]})):r.GetGraphType()===e.Bar&&t.style("fill",((t,e)=>{if(!p.includes(e))return r.barColor[e]}))}else if("horizontal"===r.legendOrientation){r.GetGraphType()===e.Line?(F.selectAll("markers").data(y).enter().append("line").attr("x1",((t,e)=>{let n=D;for(const[t,r]of m.entries())if(!p.includes(t)){if(!(t<e))break;n+=C+D+r.width+D}return n})).attr("x2",((t,e)=>{let n=D+C;for(const[t,r]of m.entries())if(!p.includes(t)){if(!(t<e))break;n+=D+r.width+D+C}return n})).attr("y1",N).attr("y2",N).style("stroke",((t,e)=>{if(!p.includes(e))return r.lineColor[e]})),F.selectAll("markers").data(y).enter().append("circle").attr("cx",((t,e)=>{let n=D+C/2;for(const[t,r]of m.entries())if(!p.includes(t)){if(!(t<e))break;n+=C/2+D+r.width+D+C/2}return n})).attr("cy",N).attr("r",((t,e)=>{if(!p.includes(e))return r.showPoint[e]?r.pointSize[e]:0})).style("fill",((t,e)=>{if(!p.includes(e))return r.pointColor[e]}))):r.GetGraphType()===e.Bar&&F.selectAll("markers").data(y.filter(((t,e)=>!p.includes(e)))).enter().append("rect").attr("x",((t,e)=>{let n=D;for(const[t,r]of m.entries())if(!p.includes(t)){if(!(t<e))break;n+=C+D+r.width+D}return n})).attr("y",N-w/2).attr("width",C).attr("height",w).style("fill",((t,e)=>{if(!p.includes(e))return r.barColor[e]}));const t=F.selectAll("labels").data(y).enter().append("text").attr("x",((t,e)=>{let n=D+C+D;for(const[t,r]of m.entries())if(!p.includes(t)){if(!(t<e))break;n+=r.width+D+C+D}return n})).attr("y",L).text(((t,e)=>p.includes(e)?"":t)).style("alignment-baseline","middle").attr("class","tracker-legend-label");r.GetGraphType()===e.Line?t.style("fill",((t,e)=>{if(!p.includes(e))return r.lineColor[e]})):r.GetGraphType()===e.Bar&&t.style("fill",((t,e)=>{if(!p.includes(e))return r.barColor[e]}))}},ql=(t,e,n)=>{if(!e||!n)return;if(!n.title)return;const r=Ps(n.title,"tracker-title"),a=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=a,$s(t.svg,0,r.height),$s(t.graphArea,0,r.height),Ys(t.dataArea,0,r.height)},Gl=(t,e,n)=>{const r=Ce(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))},Ql=(t,e)=>{const n={},r=Ce(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;const a=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=a;const i=a.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=i,n},Zl=(t,e,n)=>{if(!e||!n)return;const r=Ql(t,e);ql(r,e,n),Rl(r,e,n);const a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;const e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}const s=Ul(r,e,n,"left",a);if("string"==typeof s)return s;if(r.leftYAxis&&r.leftYScale)for(const t of a){const a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Hl(r,e,n,a,"left"),Xl(r,e,n,a,"left"))}const l=Ul(r,e,n,"right",i);if("string"==typeof l)return l;if(r.rightYAxis&&r.rightYScale)for(const t of i){const a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Hl(r,e,n,a,"right"),Xl(r,e,n,a,"right"))}n.showLegend&&jl(r,e,n),Gl(t,r,e)},Kl=(t,e,n)=>{if(!e||!n)return;const r=Ql(t,e);ql(r,e,n),Rl(r,e,n);const a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;const e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}const s=Ul(r,e,n,"left",a);if("string"==typeof s)return s;const l=a.length+i.length;let u=0;if(r.leftYAxis&&r.leftYScale)for(const t of a){const a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Wl(r,e,n,a,"left",u,l),u++)}const c=Ul(r,e,n,"right",i);if("string"==typeof c)return c;if(r.rightYAxis&&r.rightYScale)for(const t of i){const a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Wl(r,e,n,a,"right",u,l),u++)}n.showLegend&&jl(r,e,n),Gl(t,r,e)},Jl={folder:"/",dateFormat:"YYYY-MM-DD"};class tu extends r.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){const{containerEl:t}=this;t.empty(),new r.Setting(t).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("Folder path").setValue(this.plugin.settings.folder).onChange((t=>a(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new r.Setting(t).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'dateFormat' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>a(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}class eu extends r.Plugin{onload(){return a(this,void 0,void 0,(function*(){console.log("loading Tracker+ plugin"),yield this.loadSettings(),this.addSettingTab(new tu(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postProcessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(e.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(e.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(e.Summary)})}))}loadSettings(){return a(this,void 0,void 0,(function*(){this.settings=Object.assign({},Jl,yield this.loadData())}))}saveSettings(){return a(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}renderErrorMessage(t,e,n){((t,e)=>{Ce(t).select("#svg").remove(),Ce(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")})(e,t),n.appendChild(e)}onunload(){console.log("unloading Tracker+ plugin")}getFilesInFolder(t,e=!0){let n=[];for(const a of t.children)a instanceof r.TFile?"md"===a.extension&&n.push(a):a instanceof r.TFolder&&e&&(n=n.concat(this.getFilesInFolder(a)));return n}getFiles(t,e,n=!0){return a(this,void 0,void 0,(function*(){if(!t)return;const n=e.folder,a=e.specifiedFilesOnly,i=e.file,o=e.fileContainsLinkedFiles,s=e.fileMultiplierAfterLink;if(!a){const e=this.app.vault.getAbstractFileByPath(r.normalizePath(n));if(e&&e instanceof r.TFolder){const n=this.getFilesInFolder(e);for(const e of n)t.push(e)}}for(const e of i){let n=e;n.endsWith(".md")||(n+=".md"),n=r.normalizePath(n);const a=this.app.vault.getAbstractFileByPath(n);a&&a instanceof r.TFile&&t.push(a)}let l=1,u=!0;""===s?u=!1:/^[0-9]+$/.test(s)?(l=parseFloat(s),u=!1):/\?<value>/.test(s)||(u=!1);for(let n of o){n.endsWith(".md")||(n+=".md");const a=this.app.vault.getAbstractFileByPath(r.normalizePath(n));if(a&&a instanceof r.TFile){const i=this.app.metadataCache.getFileCache(a),o=(yield this.app.vault.adapter.read(a.path)).split(/\r\n|[\n\v\f\r\x85\u2028\u2029]/);if(!(null==i?void 0:i.links))continue;for(const a of i.links){if(!a)continue;const i=this.app.metadataCache.getFirstLinkpathDest(a.link,n);if(i&&i instanceof r.TFile){if(u){const t=a.position.end.line;if(t>=0&&t<o.length){const n=o[t].split(a.original);if(2===n.length){const t=n[1].trim(),r=new RegExp(s,"gm");let a;for(;a=r.exec(t);)if(void 0!==a.groups&&void 0!==a.groups.value){const t=Os(a.groups.value.trim(),e.textValueMap);if(null!==t.value){l=t.value;break}}}}}for(let e=0;e<l;e++)t.push(i)}}}}}))}postProcessor(e,i,s){return a(this,void 0,void 0,(function*(){const s=document.createElement("div");let h=e.trim();const x=this.app.vault.getConfig("tabSize"),b=Array(x).fill(" ").join("");h=h.replace(/\t/gm,b);const D=((e,n)=>{let a;try{a=r.parseYaml(e)}catch(t){const e="Error parsing YAML";return console.log(t),e}if(!a)return"Error parsing YAML";const i=dl(a);let s="";if(!i.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";const l=[];if("object"==typeof a.searchTarget&&null!==a.searchTarget){if(Array.isArray(a.searchTarget))for(const t of a.searchTarget)if("string"==typeof t){if(""===t){s="Empty search target is not allowed.";break}l.push(t)}}else if("string"==typeof a.searchTarget){const t=il(a.searchTarget);if(t.length>1)for(let e of t){if(e=e.trim(),""===e){s="Empty search target is not allowed.";break}l.push(e)}else""===a.searchTarget?s="Empty search target is not allowed.":l.push(a.searchTarget)}else s="Invalid search target (searchTarget)";for(let t=0;t<l.length;t++)l[t]=Vs(l[t]);if(""!==s)return s;const h=l.length;if(!i.includes("searchType"))return"Parameter 'searchType' not found in YAML";const x=[],b=ul("searchType",a.searchType,h,"",nl,!1);if("string"==typeof b)return b;for(const e of b)switch(e.toLowerCase()){case"tag":x.push(t.Tag);break;case"frontmatter":x.push(t.Frontmatter);break;case"wiki":x.push(t.Wiki);break;case"wiki.link":x.push(t.WikiLink);break;case"wiki.display":x.push(t.WikiDisplay);break;case"text":x.push(t.Text);break;case"dvfield":x.push(t.dvField);break;case"table":x.push(t.Table);break;case"filemeta":x.push(t.FileMeta);break;case"task":case"task.all":x.push(t.Task);break;case"task.done":x.push(t.TaskDone);break;case"task.notdone":x.push(t.TaskNotDone)}if(x.includes(t.Table)&&x.filter((e=>e!==t.Table)).length>0)return"searchType 'table' doesn't work with other types for now";let D=[];const k=ul("separator",a.separator,h,"",null,!0);if("string"==typeof k)return k;D=k.map((t=>"comma"===t||"\\,"===t?",":t));const C=sl("xDataset",a.xDataset,h,-1,!0);if("string"==typeof C)return C;const M=C.map((t=>t<0||t>=h?-1:t)),T=[];for(let t=0;t<l.length;t++){const e=new o(T.length,x[t],l[t]);e.setSeparator(D[t]),M.includes(t)&&(e.usedAsXDataset=!0),T.push(e)}const _=new u(T),E=dl(_),F=["searchType","searchTarget","separator"],S=[],B=[],N=[],I=[],L=[],V=[],O=[];for(const t of i)/^line[0-9]*$/.test(t)&&(S.push(t),F.push(t)),/^bar[0-9]*$/.test(t)&&(B.push(t),F.push(t)),/^pie[0-9]*$/.test(t)&&(N.push(t),F.push(t)),/^summary[0-9]*$/.test(t)&&(I.push(t),F.push(t)),/^bullet[0-9]*$/.test(t)&&(O.push(t),F.push(t)),/^month[0-9]*$/.test(t)&&(L.push(t),F.push(t)),/^heatmap[0-9]*$/.test(t)&&(V.push(t),F.push(t));const P=[];for(const t of i)if(/^dataset[0-9]*$/.test(t)){let e=-1;const n=t.replace("dataset","");if(e=""===n?0:parseFloat(n),T.some((t=>t.getId()===e)))return s="Duplicated dataset id for key '"+t+"'",s;P.push(t),F.push(t)}for(const t of i)if(!E.includes(t)&&!F.includes(t))return s="'"+t+"' is not an available key",s;if(0===S.length+B.length+N.length+I.length+O.length+L.length+V.length)return"No output parameter provided, please place line, bar, pie, month, bullet, or summary.";_.folder=ll(null==a?void 0:a.folder,n.settings.folder),""===_.folder.trim()&&(_.folder=n.settings.folder);const $=n.app.vault.getAbstractFileByPath(r.normalizePath(_.folder));if(!($&&$ instanceof r.TFolder))return"Folder '"+_.folder+"' doesn't exist";if("string"==typeof a.file){const t=hl("file",a.file);if("string"==typeof t)return t;_.file=t}if("boolean"==typeof a.specifiedFilesOnly&&(_.specifiedFilesOnly=a.specifiedFilesOnly),"string"==typeof a.fileContainsLinkedFiles){const t=hl("fileContainsLinkedFiles",a.fileContainsLinkedFiles);if("string"==typeof t)return t;_.fileContainsLinkedFiles=t}_.fileMultiplierAfterLink=ll(null==a?void 0:a.fileMultiplierAfterLink,_.fileMultiplierAfterLink);const Y=a.dateFormat;if("string"==typeof a.dateFormat?""===a.dateFormat?_.dateFormat=n.settings.dateFormat:_.dateFormat=Y:_.dateFormat=n.settings.dateFormat,_.dateFormatPrefix=ll(null==a?void 0:a.dateFormatPrefix,_.dateFormatPrefix),_.dateFormatSuffix=ll(null==a?void 0:a.dateFormatSuffix,_.dateFormatSuffix),"string"==typeof a.startDate){if(/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)m$/.test(a.startDate))return"'m' for 'minute' is too small for parameter startDate, please use 'd' for 'day' or 'M' for month";const t=Ms(a.startDate,_.dateFormatPrefix,_.dateFormatSuffix);let e=null,n=!1;if(e=Fs(t,_.dateFormat),e?n=!0:(e=Ts(t,_.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid startDate, the format of startDate may not match your dateFormat "+_.dateFormat;_.startDate=e}if("string"==typeof a.endDate){if(/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)m$/.test(a.endDate))return"'m' for 'minute' is too small for parameter endDate, please use 'd' for 'day' or 'M' for month";const t=Ms(a.endDate,_.dateFormatPrefix,_.dateFormatSuffix);let e=null,n=!1;if(e=Fs(t,_.dateFormat),e?n=!0:(e=Ts(t,_.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid endDate, the format of endDate may not match your dateFormat "+_.dateFormat;_.endDate=e}if(null!==_.startDate&&_.startDate.isValid()&&null!==_.endDate&&_.endDate.isValid()&&_.endDate<_.startDate)return"Invalid date range (startDate larger than endDate)";_.xDataset=M;const z=ul("datasetName",a.datasetName,h,"untitled",null,!0);if("string"==typeof z)return z;let R=0;for(let t=0;t<z.length;t++)_.xDataset.includes(t)||"untitled"===z[t]&&(z[t]="untitled"+R.toString(),R++);if(new Set(z).size!==z.length)return"Not enough dataset names or duplicated names";_.datasetName=z;const U=sl("constValue",a.constValue,h,1,!0);if("string"==typeof U)return U;_.constValue=U;const H=ol("ignoreAttachedValue",a.ignoreAttachedValue,h,!1,!0);if("string"==typeof H)return H;_.ignoreAttachedValue=H;const X=ol("ignoreZeroValue",a.ignoreZeroValue,h,!1,!0);if("string"==typeof X)return X;_.ignoreZeroValue=X;const W=ol("accum",a.accum,h,!1,!0);if("string"==typeof W)return W;_.accum=W;const j=sl("penalty",a.penalty,h,null,!0);if("string"==typeof j)return j;_.penalty=j;const q=sl("valueShift",a.valueShift,h,0,!0);if("string"==typeof q)return q;_.valueShift=q;const G=sl("shiftOnlyValueLargerThan",a.shiftOnlyValueLargerThan,h,null,!0);if("string"==typeof G)return G;if(_.shiftOnlyValueLargerThan=G,void 0!==a.textValueMap){const t=dl(a.textValueMap);for(const e of t){const t=e.trim();_.textValueMap[t]=a.textValueMap[t]}}if("number"==typeof a.fixedScale&&(_.fixedScale=a.fixedScale),"boolean"==typeof a.fitPanelWidth&&(_.fitPanelWidth=a.fitPanelWidth),"string"==typeof a.aspectRatio){const t=/([0-9]*):([0-9]*)/;let e=a.aspectRatio.match(t);e.shift(),e=e.map((t=>parseInt(t,10))),2==e.length&&(_.aspectRatio=new w(e[0],e[1]),_.dataAreaSize=_.aspectRatio.recalculateSize(_.dataAreaSize))}const Q=sl("margin",a.margin,4,10,!0);if("string"==typeof Q)return Q;if(Q.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";_.margin=new A(Q[0],Q[1],Q[2],Q[3]);for(const t of P){const e=new c,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;let o=-1;const l=t.replace("dataset","");o=""===l?0:parseFloat(l),e.id=o,e.name=ll(null==n?void 0:n.name,e.name);const u=hl("xData",null==n?void 0:n.xData);if("string"==typeof u)return u;e.xData=u;const h=e.xData.length,f=hl("yData",null==n?void 0:n.yData);if("string"==typeof f)return f;if(e.yData=f,e.yData.length!==h)return"Number of elements in xData and yData not matched";_.customDataset.push(e)}for(const t of S){const e=new f,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;const o=fl(n,e);if("string"==typeof o)return o;const l=ul("lineColor",null==n?void 0:n.lineColor,h,"",al,!0);if("string"==typeof l)return l;e.lineColor=l;const u=sl("lineWidth",null==n?void 0:n.lineWidth,h,1.5,!0);if("string"==typeof u)return u;e.lineWidth=u;const c=ol("showLine",null==n?void 0:n.showLine,h,!0,!0);if("string"==typeof c)return c;e.showLine=c;const d=ol("showPoint",null==n?void 0:n.showPoint,h,!0,!0);if("string"==typeof d)return d;e.showPoint=d;const g=ul("pointColor",null==n?void 0:n.pointColor,h,"#69b3a2",al,!0);if("string"==typeof g)return g;e.pointColor=g;const p=ul("pointBorderColor",null==n?void 0:n.pointBorderColor,h,"#69b3a2",al,!0);if("string"==typeof p)return p;e.pointBorderColor=p;const y=sl("pointBorderWidth",null==n?void 0:n.pointBorderWidth,h,0,!0);if("string"==typeof y)return y;e.pointBorderWidth=y;const m=sl("pointSize",null==n?void 0:n.pointSize,h,3,!0);if("string"==typeof m)return m;e.pointSize=m;const v=ol("fillGap",null==n?void 0:n.fillGap,h,!1,!0);if("string"==typeof v)return v;e.fillGap=v;const x=ul("yAxisLocation",null==n?void 0:n.yAxisLocation,h,"left",rl,!0);if("string"==typeof x)return x;e.yAxisLocation=x,_.line.push(e)}for(const t of B){const e=new d,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;const o=fl(n,e);if("string"==typeof o)return o;const l=ul("barColor",null==n?void 0:n.barColor,h,"",al,!0);if("string"==typeof l)return l;e.barColor=l;const u=ul("yAxisLocation",null==n?void 0:n.yAxisLocation,h,"left",rl,!0);if("string"==typeof u)return u;e.yAxisLocation=u,_.bar.push(e)}for(const t of N){const e=new g,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;e.title=ll(null==n?void 0:n.title,e.title);const o=hl("data",null==n?void 0:n.data);if("string"==typeof o)return o;e.data=o;const l=e.data.length,u=ul("dataColor",null==n?void 0:n.dataColor,l,null,al,!0);if("string"==typeof u)return u;e.dataColor=u;const c=ul("dataName",null==n?void 0:n.dataName,l,"",null,!0);if("string"==typeof c)return c;e.dataName=c;const h=ul("label",null==n?void 0:n.label,l,"",null,!0);if("string"==typeof h)return h;e.label=h,"number"==typeof(null==n?void 0:n.hideLabelLessThan)&&(e.hideLabelLessThan=n.hideLabelLessThan);const f=ul("extLabel",null==n?void 0:n.extLabel,l,"",null,!0);if("string"==typeof f)return f;e.extLabel=f,"boolean"==typeof(null==n?void 0:n.showExtLabelOnlyIfNoLabel)&&(e.showExtLabelOnlyIfNoLabel=n.showExtLabelOnlyIfNoLabel),"number"==typeof(null==n?void 0:n.ratioInnerRadius)&&(e.ratioInnerRadius=n.ratioInnerRadius),"boolean"==typeof(null==n?void 0:n.showLegend)&&(e.showLegend=n.showLegend),e.legendPosition=ll(null==n?void 0:n.legendPosition,"right");let d="horizontal";d="top"===e.legendPosition||"bottom"===e.legendPosition?"horizontal":"left"===e.legendPosition||"right"===e.legendPosition?"vertical":"horizontal",e.legendOrientation=ll(null==n?void 0:n.legendOrientation,d),e.legendBgColor=ll(null==n?void 0:n.legendBgColor,e.legendBgColor),e.legendBorderColor=ll(null==n?void 0:n.legendBorderColor,e.legendBorderColor),_.pie.push(e)}for(const t of I){const e=new p,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;e.template=ll(null==n?void 0:n.template,e.template),e.style=ll(null==n?void 0:n.style,e.style),_.summary.push(e)}for(const t of L){const e=new y,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;e.mode=ll(null==n?void 0:n.mode,e.mode);const o=cl("dataset",null==n?void 0:n.dataset);if("string"==typeof o)return o;if(0===o.length)for(const t of T)o.push(t.getId());e.dataset=o;const l=e.dataset.length;e.startWeekOn=ll(null==n?void 0:n.startWeekOn,e.startWeekOn),"boolean"==typeof(null==n?void 0:n.showCircle)&&(e.showCircle=n.showCircle);const u=cl("threshold",null==n?void 0:n.threshold);if("string"==typeof u)return u;if(e.threshold=u,0===e.threshold.length)for(let t=0;t<l;t++)e.threshold.push(0);if(e.threshold.length!==e.dataset.length)return"The number of inputs of threshold and dataset not matched";const c=cl("yMin",null==n?void 0:n.yMin);if("string"==typeof c)return c;if(e.yMin=c,0===e.yMin.length)for(let t=0;t<l;t++)e.yMin.push(null);if(e.yMin.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";const h=cl("yMax",null==n?void 0:n.yMax);if("string"==typeof h)return h;if(e.yMax=h,0===e.yMax.length)for(let t=0;t<l;t++)e.yMax.push(null);if(e.yMax.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";e.color=ll(null==n?void 0:n.color,e.color),"boolean"==typeof(null==n?void 0:n.dimNotInMonth)&&(e.dimNotInMonth=n.dimNotInMonth),"boolean"==typeof(null==n?void 0:n.showStreak)&&(e.showStreak=n.showStreak),"boolean"==typeof(null==n?void 0:n.showTodayRing)&&(e.showTodayRing=n.showTodayRing),"boolean"==typeof(null==n?void 0:n.showSelectedValue)&&(e.showSelectedValue=n.showSelectedValue),"boolean"==typeof(null==n?void 0:n.showSelectedRing)&&(e.showSelectedRing=n.showSelectedRing),e.circleColor=ll(null==n?void 0:n.circleColor,e.circleColor),"boolean"==typeof(null==n?void 0:n.circleColorByValue)&&(e.circleColorByValue=n.circleColorByValue),e.headerYearColor=ll(null==n?void 0:n.headerYearColor,e.headerYearColor),e.headerMonthColor=ll(null==n?void 0:n.headerMonthColor,e.headerMonthColor),e.dividingLineColor=ll(null==n?void 0:n.dividingLineColor,e.dividingLineColor),e.todayRingColor=ll(null==n?void 0:n.todayRingColor,e.todayRingColor),e.selectedRingColor=ll(null==n?void 0:n.selectedRingColor,e.selectedRingColor),e.initMonth=ll(null==n?void 0:n.initMonth,e.initMonth),"boolean"==typeof(null==n?void 0:n.showAnnotation)&&(e.showAnnotation=n.showAnnotation);const f=hl("annotation",null==n?void 0:n.annotation);if("string"==typeof f)return f;if(e.annotation=f,0===e.annotation.length)for(let t=0;t<l;t++)e.annotation.push(null);if(e.annotation.length!==e.dataset.length)return"The number of inputs of annotation and dataset not matched";"boolean"==typeof(null==n?void 0:n.showAnnotationOfAllTargets)&&(e.showAnnotationOfAllTargets=n.showAnnotationOfAllTargets),_.month.push(e)}for(const t of V){const e=new m,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;_.heatmap.push(e)}for(const t of O){const e=new v,n=a[t],r=dl(e),i=dl(n);for(const t of i)if(!r.includes(t))return s="'"+t+"' is not an available key",s;e.title=ll(null==n?void 0:n.title,e.title),e.dataset=ll(null==n?void 0:n.dataset,e.dataset),e.orientation=ll(null==n?void 0:n.orientation,e.orientation);const o=cl("range",null==n?void 0:n.range);if("string"==typeof o)return o;const l=o;if(1===l.length){if(l[0]<0)return s="Negative range value is not allowed",s}else{if(!(l.length>1))return s="Empty range is not allowed",s;{const t=l[0];if(t<0)return s="Negative range value is not allowed",s;for(let e=1;e<l.length;e++)if(l[e]<=t)return s="Values in parameter 'range' should be monotonically increasing",s}}e.range=l;const u=l.length,c=ul("rangeColor",null==n?void 0:n.rangeColor,u,"",al,!0);if("string"==typeof c)return c;e.rangeColor=c,e.value=ll(null==n?void 0:n.value,e.value),e.valueUnit=ll(null==n?void 0:n.valueUnit,e.valueUnit),e.valueColor=ll(null==n?void 0:n.valueColor,e.valueColor),"boolean"==typeof(null==n?void 0:n.showMarker)&&(e.showMarker=n.showMarker),"number"==typeof(null==n?void 0:n.markerValue)&&(e.markerValue=n.markerValue),e.markerColor=ll(null==n?void 0:n.markerColor,e.markerColor),_.bullet.push(e)}return _})(h,this);if("string"==typeof D)return this.renderErrorMessage(D,s,i);const C=D,M=[];try{yield this.getFiles(M,C)}catch(t){return this.renderErrorMessage(t.message,s,i)}if(0===M.length)return this.renderErrorMessage("No markdown files found in folder",s,i);const T=new Map,_=new k;_.fileTotal=M.length;const E=M.map((e=>a(this,void 0,void 0,(function*(){let r=null;C.queries.some((e=>{const n=e.getType();return e.getTarget(),n===t.Frontmatter||n===t.Tag||n===t.Wiki||n===t.WikiLink||n===t.WikiDisplay}))&&(r=this.app.metadataCache.getFileCache(e));let i=null;C.queries.some((e=>{const n=e.getType(),r=e.getTarget();return n===t.Tag||n===t.Text||n===t.dvField||n===t.Task||n===t.TaskDone||n===t.TaskNotDone||n===t.FileMeta&&("numWords"===r||"numChars"===r||"numSentences"===r)}))&&(i=yield this.app.vault.adapter.read(e.path));const o=new Map;let s=!1;for(const n of C.xDataset)if(!o.has(n)){let a=window.moment("");if(-1===n)a=Us(e,C);else{const o=C.queries[n];switch(o.getType()){case t.Frontmatter:a=Hs(r,o,C);break;case t.Tag:a=Ws(i,o,C);break;case t.Text:a=js(i,o,C);break;case t.dvField:a=qs(i,o,C);break;case t.FileMeta:a=Gs(e,o,C);break;case t.Task:case t.TaskDone:case t.TaskNotDone:a=Qs(i,o,C)}}a.isValid()?(null!==C.startDate&&a<C.startDate&&(s=!0,_.fileOutOfDateRange++),null!==C.endDate&&a>C.endDate&&(s=!0,_.fileOutOfDateRange++)):(s=!0,_.fileNotInFormat++),s||(_.gotAnyValidXValue||(_.gotAnyValidXValue=!0),o.set(n,Ss(a,C.dateFormat)),_.fileAvailable++,1==_.fileAvailable?(_.minDate=a.clone(),_.maxDate=a.clone()):(a<_.minDate&&(_.minDate=a.clone()),a>_.maxDate&&(_.maxDate=a.clone())))}if(s)return;const l=C.queries.filter((e=>e.getType()!==t.Table&&!e.usedAsXDataset)).map((s=>a(this,void 0,void 0,(function*(){if(r&&s.getType()===t.Tag){const t=((t,e,n,r,a)=>{const i=t.frontmatter;let o=[];if(i&&i.tags){let t=0,s=!1;if(Array.isArray(i.tags))o=o.concat(i.tags);else if("string"==typeof i.tags){const t=i.tags.split(e.getSeparator(!0));for(const e of t){const t=e.trim();""!==t&&o.push(t)}}for(const i of o){if(i===e.getTarget())t+=n.constValue[e.getId()],s=!0,e.addNumTargets();else{if(!i.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],s=!0,e.addNumTargets()}let o=null;s&&(o=t);const l=a.get(n.xDataset[e.getId()]);return Zs(r,l,e,o),!0}}return!1})(r,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=t)}if(r&&s.getType()===t.Frontmatter&&"tags"!==s.getTarget()){const t=((t,e,r,a,i)=>{const o=t.frontmatter;if(o){const t=Is(o,e.getTarget());if(t){const o=Os(t,r.textValueMap);if(null===o.value&&("true"!==t&&"false"!==t||(o.type=n.Number,o.value="true"===t?1:0)),null!==o.value){o.type===n.Time&&(e.valueType=n.Time),e.addNumTargets();const t=i.get(r.xDataset[e.getId()]);return Zs(a,t,e,o.value),!0}}else if(e.getParentTarget()&&Is(o,e.getParentTarget())){const t=Is(o,e.getParentTarget());let s=null;if(Array.isArray(t)?s=t.map((t=>t.toString())):"string"==typeof t&&(s=t.split(e.getSeparator())),s&&s.length>e.getAccessor()&&e.getAccessor()>=0){const t=s[e.getAccessor()].trim(),o=Os(t,r.textValueMap);if(null!==o.value){o.type===n.Time&&(e.valueType=n.Time),e.addNumTargets();const t=i.get(r.xDataset[e.getId()]);return Zs(a,t,e,o.value),!0}}}}return!1})(r,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=t)}if(r&&(s.getType()===t.Wiki||s.getType()===t.WikiLink||s.getType()===t.WikiDisplay)){const e=((e,n,r,a,i)=>{const o=e.links;if(!o)return!1;const s=n.getTarget(),l=n.getType();let u="";const c=s;for(const e of o){if(!e)continue;let n="";l===t.Wiki?n=e.displayText?e.displayText:e.link:l===t.WikiLink?n=e.link:l===t.WikiDisplay?e.displayText&&(n=e.displayText):n=e.displayText?e.displayText:e.link,n=n.trim(),u+=n+"\n"}return Ks(u,c,n,a,i,r)})(r,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=e)}if(i&&s.getType()===t.Tag){const t=((t,e,n,r,a)=>{let i=e.getTarget();return e.getParentTarget()&&(i=e.getParentTarget()),i.length>1&&i.startsWith("#")&&(i=i.substring(1)),Ks(t,"(^|\\s)#"+i+"(\\/[\\w-]+)*(:(?<value>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)",e,r,a,n)})(i,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=t)}if(i&&s.getType()===t.Text){const t=((t,e,n,r,a)=>{const i=e.getTarget();return Ks(t,i,e,r,a,n)})(i,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=t)}if(s.getType()===t.FileMeta){const t=Js(e,i,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=t)}if(i&&s.getType()===t.dvField){const t=((t,e,n,r,a)=>{let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i=i.replace("-","[\\s\\-]");const o=Ks(t,"(^| |\\t)\\*{0,2}"+i+"\\*{0,2}(::[ |\\t]*(?<value>[\\d\\.\\/\\-,@; \\t:"+Rs+"]*))(\\r\\?\\n|\\r|$)",e,r,a,n),s=tl(t,e,n,r,a);return o||s})(i,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=t)}if(i&&(s.getType()===t.Task||s.getType()===t.TaskDone||s.getType()===t.TaskNotDone)){const e=((e,n,r,a,i)=>{const o=n.getType();let s=n.getTarget();return s=o===t.Task?"\\[[\\sx]\\]\\s"+s:o===t.TaskDone?"\\[x\\]\\s"+s:o===t.TaskNotDone?"\\[\\s\\]\\s"+s:"\\[[\\sx]\\]\\s"+s,Ks(e,s,n,a,i,r)})(i,s,C,T,o);_.gotAnyValidYValue||(_.gotAnyValidYValue=e)}}))));yield Promise.all(l)}))));if(yield Promise.all(E),yield this.collectDataFromTable(T,C,_),_.errorMessage)return this.renderErrorMessage(_.errorMessage,s,i);let F="";if(_.minDate.isValid()&&_.maxDate.isValid()&&0!==_.fileAvailable&&_.gotAnyValidXValue||(F="No valid date as X value found in notes",_.fileOutOfDateRange>0&&(F+=`\n${_.fileOutOfDateRange} files are out of the date range.`),_.fileNotInFormat&&(F+=`\n${_.fileNotInFormat} files are not in the right format.`)),null===C.startDate&&null===C.endDate?(C.startDate=_.minDate.clone(),C.endDate=_.maxDate.clone()):null!==C.startDate&&null===C.endDate?C.startDate<_.maxDate?C.endDate=_.maxDate.clone():F="Invalid date range":null!==C.endDate&&null===C.startDate?C.endDate>_.minDate?C.startDate=_.minDate.clone():F="Invalid date range":(C.startDate<_.minDate&&C.endDate<_.minDate||C.startDate>_.maxDate&&C.endDate>_.maxDate)&&(F="Invalid date range"),F)return this.renderErrorMessage(F,s,i);if(!_.gotAnyValidYValue)return this.renderErrorMessage("No valid Y value found in notes",s,i);const S=new l(C.startDate,C.endDate);for(const t of C.queries){const e=S.createDataset(t,C);e.addNumTargets(t.getNumTargets());for(let n=C.startDate.clone();n<=C.endDate;n.add(1,"days"))if(T.has(Ss(n,C.dateFormat))){const r=T.get(Ss(n,C.dateFormat)).filter((e=>e.query.equalTo(t)));if(r.length>0){let t=null;for(let e=0;e<r.length;e++){const n=r[e].value;Number.isNumber(n)&&!Number.isNaN(n)&&(null===t?t=n:t+=n)}null!==t&&e.setValue(n,t)}}}C.datasets=S;const B=((t,e)=>{for(const t of e.datasets){if(t.getQuery().usedAsXDataset)continue;const n=e.valueShift[t.getId()];null!==n&&0!==n&&t.shift(n,e.shiftOnlyValueLargerThan[t.getId()]),null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues()}for(const n of e.line){const r=Zl(t,e,n);if("string"==typeof r)return r}for(const n of e.bar){const r=Kl(t,e,n);if("string"==typeof r)return r}for(const n of e.pie){const r=Yl(t,e,n);if("string"==typeof r)return r}for(const n of e.summary){const r=zl(t,e,n);if("string"==typeof r)return r}for(const n of e.bullet){const r=El(t,e,n);if("string"==typeof r)return r}for(const n of e.month){const r=Pl(t,e,n);if("string"==typeof r)return r}for(const n of e.heatmap){const n=Fl(t,e);if("string"==typeof n)return n}})(s,C);if("string"==typeof B)return this.renderErrorMessage(B,s,i);i.appendChild(s)}))}collectDataFromTable(e,i,o){return a(this,void 0,void 0,(function*(){const a=i.queries.filter((e=>e.getType()===t.Table)),s=[];let l=!1;for(const t of a){const e=t.getParentTarget(),n=this.app.vault.getAbstractFileByPath(r.normalizePath(e+".md"));if(!(n&&n instanceof r.TFile)){l=!0;break}const a=t.getAccessor(),i=t.usedAsXDataset,o=s.find((t=>t.filePath===e&&t.tableIndex===a));if(o)i?o.xDataset=t:o.yDatasets.push(t);else{const n=new D(e,a);i?n.xDataset=t:n.yDatasets.push(t),s.push(n)}}if(l)o.errorMessage="File containing tables not found";else for(const t of s){const a=t.xDataset;if(!a)continue;const s=t.yDatasets;let l=a.getParentTarget();const u=a.getAccessor();let c="";l+=".md";const h=this.app.vault.getAbstractFileByPath(r.normalizePath(l));if(!(h&&h instanceof r.TFile))continue;{o.fileAvailable++;const t=yield this.app.vault.adapter.read(h.path),e=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm");let n,r=0;for(;n=e.exec(t);){if(r===u){c=n[0];break}r++}}let f=c.split(/\r?\n/);f=f.filter((t=>""!==t));let d=0,g=0;if(f.length>=2){let t=f.shift().trim();t=Ls(t,"|");d=t.split("|").length;let e=f.shift().trim();e=Ls(e,"|");const n=e.split("|");for(const t of n)if(!t.includes("-"))break;g=f.length}if(0==g)continue;const p=a.getAccessor(1);if(p>=d)continue;const y=[];for(const t of f){const e=Ls(t.trim(),"|").split("|");if(p<e.length){const t=e[p].trim(),n=Ts(t,i.dateFormat);n.isValid()?(y.push(n),o.minDate.isValid()||o.maxDate.isValid()?(n<o.minDate&&(o.minDate=n.clone()),n>o.maxDate&&(o.maxDate=n.clone())):(o.minDate=n.clone(),o.maxDate=n.clone())):y.push(null)}else y.push(null)}if(y.every((t=>null===t)))return void(o.errorMessage="No valid date as X value found in table");o.gotAnyValidXValue||(o.gotAnyValidXValue=!0);for(const t of s){const r=t.getAccessor(1);if(r>=d)continue;let a=0;for(const s of f){const l=Ls(s.trim(),"|").split("|");if(r<l.length){const s=l[r].trim().split(t.getSeparator());if(!s)continue;if(1===s.length){const r=Os(s[0],i.textValueMap);if(null!==r.value){r.type===n.Time&&(t.valueType=n.Time);const s=r.value;a<y.length&&y[a]&&(o.gotAnyValidYValue||(o.gotAnyValidYValue=!0),Zs(e,Ss(y[a],i.dateFormat),t,s))}}else if(s.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let r=null;const l=s[t.getAccessor(2)].trim(),u=Os(l,i.textValueMap);null!==u.value&&(u.type===n.Time&&(t.valueType=n.Time),r=u.value,a<y.length&&y[a]&&(o.gotAnyValidYValue||(o.gotAnyValidYValue=!0),Zs(e,Ss(y[a],i.dateFormat),t,r)))}}a++}}}}))}getEditor(){return this.app.workspace.getActiveViewOfType(r.MarkdownView).editor}addCodeBlock(t){if(!(this.app.workspace.activeLeaf.view instanceof r.MarkdownView))return;let n="";switch(t){case e.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case e.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case e.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){const e=this.getEditor();if(e){const n=e.getCursor(),r=n.line,a=e.getLine(r);return n.ch=a.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=eu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
