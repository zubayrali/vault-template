/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DATE_FORMATS = {
  "YYYY-MM-DD": /\b\d{4}-\d{2}-\d{2}\b/,
  "DD-MM-YYYY": /\b\d{2}-\d{2}-\d{4}\b/
  // Add other formats as needed
};
var DEFAULT_SETTINGS = {
  selectedDateFormat: "YYYY-MM-DD"
  // Default format
};
var MyPlugin = class extends import_obsidian.Plugin {
  handleSelection() {
    const selection = window.getSelection();
    if (!selection || selection.rangeCount === 0)
      return;
    const selectedText = this.stripMarkdown(selection.toString().trim());
    const selectedRegex = DATE_FORMATS[this.settings.selectedDateFormat];
    const matches = selectedText.match(selectedRegex);
    if (matches && matches.length === 1 && this.isExactDateSelection(selectedText, matches[0])) {
      this.showTooltip(
        matches[0],
        selection.getRangeAt(0).getBoundingClientRect()
      );
    } else {
      this.tooltip.style.display = "none";
    }
  }
  handleHover(event) {
    var _a;
    const hoveredElement = event.target;
    if (!hoveredElement.closest(".file-viewer-class")) {
      this.tooltip.style.display = "none";
      return;
    }
    const fileName = (_a = hoveredElement.textContent) == null ? void 0 : _a.trim();
    if (!fileName)
      return;
    const selectedRegex = DATE_FORMATS[this.settings.selectedDateFormat];
    const matches = fileName.match(selectedRegex);
    if (matches && matches.length === 1) {
      this.showTooltip(matches[0], hoveredElement.getBoundingClientRect());
    } else {
      this.tooltip.style.display = "none";
    }
  }
  showTooltip(dateString, rect) {
    try {
      const hoveredDate = new Date(dateString);
      const today = new Date();
      const timeDifference = today.getTime() - hoveredDate.getTime();
      const daysSince = Math.floor(timeDifference / (1e3 * 3600 * 24));
      this.tooltip.textContent = `${daysSince} days since`;
      this.tooltip.style.left = `${Math.min(
        rect.left,
        window.innerWidth - this.tooltip.offsetWidth - 10
      )}px`;
      this.tooltip.style.top = `${Math.min(
        rect.bottom + 20,
        window.innerHeight - this.tooltip.offsetHeight - 10
      )}px`;
      this.tooltip.style.display = "block";
    } catch (error) {
      console.error("Error parsing date:", error);
      this.tooltip.style.display = "none";
    }
  }
  stripMarkdown(text) {
    return text.replace(/(\*\*|__|\*|_)/g, "");
  }
  isExactDateSelection(selectedText, matchedDate) {
    return selectedText === matchedDate || selectedText === ` ${matchedDate} ` || selectedText === ` ${matchedDate}` || selectedText === `${matchedDate} `;
  }
  async onload() {
    await this.loadSettings();
    console.log("Selected date format:", this.settings.selectedDateFormat);
    this.injectStyles();
    this.tooltip = document.createElement("div");
    this.tooltip.classList.add("plugin-tooltip");
    this.tooltip.style.display = "none";
    document.body.appendChild(this.tooltip);
    document.addEventListener("selectionchange", () => {
      this.handleSelection();
    });
    document.addEventListener("mouseover", (event) => {
      this.handleHover(event);
    });
    document.addEventListener("mouseout", () => {
      this.tooltip.style.display = "none";
    });
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
  }
  injectStyles() {
    const style = document.createElement("style");
    style.textContent = `
      .plugin-tooltip {
        position: absolute;
        background-color: var(--background-primary);
        color: var(--text-normal);
        padding: 5px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        border: 1px solid var(--background-modifier-border);
        font-family: var(--font-family);
        z-index: 1000;
      }
    `;
    document.head.appendChild(style);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    this.tooltip.remove();
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Choose your preferred date format").addDropdown(
      (dropdown) => dropdown.addOptions({
        "YYYY-MM-DD": "YYYY-MM-DD",
        "DD-MM-YYYY": "DD-MM-YYYY"
        // Add other formats as options
      }).setValue(this.plugin.settings.selectedDateFormat).onChange(async (value) => {
        this.plugin.settings.selectedDateFormat = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
