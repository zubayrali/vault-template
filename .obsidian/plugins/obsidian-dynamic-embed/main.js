/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => DynamicEmbed
});
var import_obsidian = __toModule(require("obsidian"));
var _DynamicEmbed = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerMarkdownCodeBlockProcessor(_DynamicEmbed.codeBlockKeyword, (source, el, ctx) => __async(this, null, function* () {
        const pattern = /\[\[([^\[\]]+?)\]\]/u;
        const fileNameMatch = pattern.exec(source);
        if (!fileNameMatch) {
          _DynamicEmbed.displayError(el, "Bad file link");
          return;
        }
        const fileName = fileNameMatch[1];
        const matchingFile = this.app.metadataCache.getFirstLinkpathDest(fileName, "");
        if (!matchingFile) {
          _DynamicEmbed.displayError(el, "File link not found");
          return;
        }
        if (matchingFile.extension !== "md") {
          _DynamicEmbed.displayError(el, "Bad file extension found, expected markdown");
          return;
        }
        const fileContents = yield this.app.vault.cachedRead(matchingFile);
        const container = el.createDiv({ cls: [_DynamicEmbed.containerClass] });
        import_obsidian.MarkdownRenderer.renderMarkdown(fileContents, container, ctx.sourcePath, this);
      }));
    });
  }
};
var DynamicEmbed = _DynamicEmbed;
DynamicEmbed.codeBlockKeyword = "dynamic-embed";
DynamicEmbed.containerClass = "dynamic-embed";
DynamicEmbed.errorClass = "dynamic-embed-error";
DynamicEmbed.displayError = (parent, text) => {
  parent.createEl("pre", { text: "Dynamic Embed: Error: " + text, cls: [_DynamicEmbed.containerClass, _DynamicEmbed.errorClass] });
};
