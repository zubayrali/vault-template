/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// image-search-settings-tab.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiKey: "",
  searchEngineId: ""
};
var ImageSearchSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API key").setDesc("Google Programmable Search Engine API key").addText((text) => text.setPlaceholder("").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Search engine ID").setDesc("Google Programmable Search Engine ID").addText((text) => text.setPlaceholder("").setValue(this.plugin.settings.searchEngineId).onChange(async (value) => {
      this.plugin.settings.searchEngineId = value;
      await this.plugin.saveSettings();
    }));
  }
};

// query-modal.ts
var import_obsidian2 = require("obsidian");
var import_obsidian3 = require("obsidian");
var QueryModal = class extends import_obsidian2.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.settings = settings;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const form = this.contentEl.createEl("form");
    form.addEventListener("submit", (event) => {
      event.preventDefault();
      this.search();
    });
    const input = this.contentEl.createEl("input", {
      attr: {
        type: "text",
        placeholder: "What are you looking for?"
      },
      cls: "setting-input input-style"
    });
    input.addEventListener("input", (event) => {
      this.result = event.target.value;
    });
    form.appendChild(input);
    const buttonContainer = this.contentEl.createEl("div", {
      cls: "button-container-style"
    });
    const button = this.contentEl.createEl("button", {
      attr: {
        type: "submit"
      },
      cls: "mod-cta setting-btn button-style"
    });
    button.textContent = "Search Google Images";
    buttonContainer.appendChild(button);
    form.appendChild(buttonContainer);
    this.imageList = this.contentEl.createEl("ul", { cls: "responsive-gallery" });
  }
  async callApi(query) {
    const url = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(query)}&cx=${this.settings.searchEngineId}&searchType=image&num=10&key=${this.settings.apiKey}`;
    const response = await (0, import_obsidian3.requestUrl)(url);
    if (response.status < 200 || response.status >= 300) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json;
    return data.items.map((item) => item.link);
  }
  async search() {
    this.imageList.empty();
    try {
      const results = await this.callApi(this.result);
      results.forEach((elem) => {
        const li = this.imageList.createEl("li");
        li.createEl("img", { attr: { src: elem } }).onClickEvent(() => {
          this.onSubmit(elem);
          this.close();
        });
      });
    } catch (error) {
      console.error(`Error occured in "Image Search" plugin:
${error}`);
      this.imageList.createDiv({ cls: "responsive-gallery-error" }).setText("Search was unsuccessful. Please check your connection, the API Key and Search engine ID in settings.");
    }
  }
  onClose() {
    this.contentEl.empty();
  }
};

// main.ts
var ImageSearchPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.onSubmit = (editor) => (image) => {
      editor.replaceSelection(`![](${image})`);
    };
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "insert-image",
      name: "Insert image",
      editorCallback: (editor) => {
        new QueryModal(this.app, this.settings, this.onSubmit(editor)).open();
      }
    });
    this.addSettingTab(new ImageSearchSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
