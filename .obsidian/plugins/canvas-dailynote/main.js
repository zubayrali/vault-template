/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CanvasDailyNotePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian"), AUTO_UPDATE_DAILY_NOTE = "autoUpdateDailyNote", DAYS = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday"
], DEFAULT_SETTINGS = {
  createIfNotExists: !1,
  skipMonday: !1,
  skipTuesday: !1,
  skipWednesday: !1,
  skipThursday: !1,
  skipFriday: !1,
  skipSaturday: !1,
  skipSunday: !1
}, CanvasDailyNotePlugin = class extends import_obsidian.Plugin {
  async onload() {
    var _a;
    await this.loadSettings(), this.dailyNotePlugin = (_a = this.app.internalPlugins.getPluginById(
      "daily-notes"
    )) == null ? void 0 : _a.instance, this.addSettingTab(new CanvasDailyNotePluginSettingTab(this.app, this)), this.registerEvent(
      this.app.workspace.on("file-open", this.handleFileOpen.bind(this))
    );
  }
  /**
   * When a file is opened, we check if the file is a canvas. If it is, we'll hook into it.
   */
  async handleFileOpen() {
    let canvasView = this.app.workspace.getActiveViewOfType(
      import_obsidian.ItemView
    );
    if ((canvasView == null ? void 0 : canvasView.getViewType()) !== "canvas")
      return;
    let canvas = canvasView == null ? void 0 : canvasView.canvas;
    this.createButton(canvas), this.processCanvasNodes(canvas);
  }
  /**
   * Add a new button to the card UI at the bottom. Clicking the button will attempt to add a daily note to the canvas.
   * @param canvas
   */
  createButton(canvas) {
    let cardMenuEl = canvas.cardMenuEl;
    if (!cardMenuEl.querySelector(".canvas-button-adddailynote")) {
      let button = cardMenuEl.createEl("div", {
        attr: {
          class: "canvas-card-menu-button canvas-button-adddailynote"
        }
      }), icon = (0, import_obsidian.getIcon)("calendar");
      button.appendChild(icon).addEventListener("click", async () => {
        let dailyFile = this.getExistingDailyFile();
        if (!dailyFile && !this.settings.createIfNotExists) {
          new import_obsidian.Notice(
            "Daily note currently does not exist and plugin settings are set to not create it."
          );
          return;
        }
        let dayOfTheWeek = DAYS[(/* @__PURE__ */ new Date()).getDay()];
        if (!dailyFile && this.settings[`skip${dayOfTheWeek}`]) {
          new import_obsidian.Notice(
            `Daily note currently does not exist and plugin settings are set to not create it on ${dayOfTheWeek}.`
          );
          return;
        }
        dailyFile = await this.dailyNotePlugin.getDailyNote(), dailyFile instanceof import_obsidian.TFile && this.addDailyNote(canvas, dailyFile);
      });
    }
  }
  /**
   * This services two purposes
   * 1. Adding a styling class to the daily note nodes
   * 2. Updating any out of date daily note nodes with today's note
   * @param canvas
   */
  processCanvasNodes(canvas) {
    let dailyFile = this.getExistingDailyFile();
    canvas.nodes.forEach(async (node) => {
      var _a;
      if (node.unknownData.nodeType === AUTO_UPDATE_DAILY_NOTE && (node.nodeEl.addClass("canvas-node-dailynote"), ((_a = node == null ? void 0 : node.file) == null ? void 0 : _a.path) !== (dailyFile == null ? void 0 : dailyFile.path) || !node.file)) {
        if (!dailyFile && !this.settings.createIfNotExists)
          return;
        let dayOfTheWeek = DAYS[(/* @__PURE__ */ new Date()).getDay()];
        if (!dailyFile && this.settings[`skip${dayOfTheWeek}`])
          return;
        canvas.removeNode(node), canvas.requestSave(), dailyFile = await this.dailyNotePlugin.getDailyNote(), dailyFile instanceof import_obsidian.TFile && this.addDailyNote(canvas, dailyFile, {
          x: node.x,
          y: node.y,
          width: node.width,
          height: node.height
        });
      }
    });
  }
  /**
   * Gets the existing daily note based on the daily notes plugin settings or returns null if it does not exist.
   */
  getExistingDailyFile() {
    let expectedNotePath = `${this.dailyNotePlugin.options.folder.replace(
      /^\/|\\/,
      ""
    )}/${(/* @__PURE__ */ new Date()).getFullYear()}-${String(
      (/* @__PURE__ */ new Date()).getMonth() + 1
    ).padStart(2, "0")}-${String((/* @__PURE__ */ new Date()).getDate()).padStart(
      2,
      "0"
    )}.md`;
    return this.app.vault.getAbstractFileByPath(expectedNotePath);
  }
  /**
   * Adds the Daily Note node to the canvas. Stores a special "nodeType" property so we can identify it later.
   * @param canvas
   * @param dailyFile
   * @param options
   */
  addDailyNote(canvas, dailyFile, options = {}) {
    let dailyFileNode = canvas.createFileNode({
      pos: {
        x: options.x || 0,
        y: options.y || 0,
        height: options.height || 500,
        width: options.width || 500
      },
      size: {
        x: options.x || 0,
        y: options.y || 0,
        height: options.height || 500,
        width: options.width || 500
      },
      file: dailyFile,
      path: this.dailyNotePlugin.options.folder,
      focus: !1,
      save: !0
    });
    dailyFileNode.unknownData.nodeType = AUTO_UPDATE_DAILY_NOTE, canvas.deselectAll(), canvas.addNode(dailyFileNode), canvas.requestSave();
  }
  onunload() {
  }
  /**
   * Load data from disk, stored in data.json in plugin folder
   */
  async loadSettings() {
    let data = await this.loadData() || {};
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  /**
   * Save data to disk, stored in data.json in plugin folder
   */
  async saveSettings() {
    await this.saveData(this.settings);
  }
}, CanvasDailyNotePluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty(), new import_obsidian.Setting(containerEl).setName("Automatically create daily note").setDesc(
      "Should the plugin attempt to create the daily note if it does not exist?"
    ).addToggle((component) => {
      component.setValue(this.plugin.settings.createIfNotExists), component.onChange((value) => {
        this.plugin.settings.createIfNotExists = value, this.plugin.saveSettings();
      });
    }), containerEl.createEl("hr"), containerEl.createEl("h1", { text: "Skip days" }), containerEl.createEl("p", {
      attr: {
        style: "display: block; margin-bottom: 10px"
      },
      text: "If there are certain days of the week you wish to skip creating a new note for, you can configure that here. The plugin will not attempt to automatically create new notes on those days."
    }), DAYS.forEach((day) => {
      new import_obsidian.Setting(containerEl).setName(day).setDesc(`Skip automatically creating notes on ${day}?`).addToggle((component) => {
        component.setValue(this.plugin.settings[`skip${day}`]), component.onChange((value) => {
          this.plugin.settings[`skip${day}`] = value, this.plugin.saveSettings();
        });
      });
    });
  }
};
