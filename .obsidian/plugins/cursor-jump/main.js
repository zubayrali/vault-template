/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JumpPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/libs.ts
function jumpToWithSameLevel({
  editor,
  settings,
  app,
  prevInfo,
  direction
}) {
  const currentPosition = editor.getCursor();
  if (prevInfo.prevDirection !== direction || prevInfo.prevLine !== currentPosition.line) {
    prevInfo.tryCount = 0;
    prevInfo.prevDirection = direction;
    prevInfo.prevLine = currentPosition.line;
  }
  prevInfo.tryCount++;
  const jumpItems = getJumpItems(app);
  if (!(jumpItems == null ? void 0 : jumpItems.length)) {
    if (direction === -1) {
      JumpToTarget(editor, 0, false);
    } else if (direction === 1) {
      JumpToTarget(editor, editor.lastLine(), false);
    }
    return;
  }
  const currentItem = jumpItems.find(
    (item) => item.position.start.line === currentPosition.line
  );
  if (!currentItem) {
    const nearestItemIndex = jumpItems.findLastIndex(
      (item) => item.position.start.line <= currentPosition.line
    );
    if (direction === -1) {
      JumpToTarget(
        editor,
        nearestItemIndex === direction ? 0 : jumpItems[nearestItemIndex].position.start.line
      );
    } else if (direction == 1) {
      const nextItem = jumpItems[nearestItemIndex + direction];
      JumpToTarget(
        editor,
        nextItem ? nextItem.position.start.line : editor.lastLine()
      );
    }
    return;
  } else {
    const filteredJumpItems = jumpItems.filter(
      (item) => item.level === currentItem.level
    );
    const nearestItemIndex = filteredJumpItems.findLastIndex(
      (item) => item.position.start.line <= currentPosition.line
    );
    const slidingItemIndex = PeerSlidingInList({
      list: filteredJumpItems,
      currentIndex: nearestItemIndex,
      direction,
      isPeerJump: settings.peerJump,
      isStart: true
    });
    const foundItem = filteredJumpItems[slidingItemIndex];
    const shouldStop = !settings.includeDocumentBoundaries || settings.includeDocumentBoundaries && settings.threshHold !== 0 && prevInfo.tryCount <= settings.threshHold;
    JumpToTarget(
      editor,
      foundItem ? foundItem.position.start.line : shouldStop ? currentItem.position.start.line : direction === -1 ? 0 : editor.lastLine()
    );
    return;
  }
}
function jumpToWithLevelChange({
  editor,
  settings,
  app,
  direction
}) {
  const jumpItems = getJumpItems(app);
  if (!(jumpItems == null ? void 0 : jumpItems.length))
    return;
  const currentPosition = editor.getCursor();
  const currentItem = jumpItems.find(
    (item) => item.position.start.line === currentPosition.line
  );
  if (!currentItem)
    return;
  const isHeading = currentItem.level < 11;
  if (direction === -1) {
    const nearestItemIndex = jumpItems.findLastIndex(
      (item) => (isHeading ? item.level < 11 : item.level >= 11) && item.level < currentItem.level && item.position.start.line <= currentPosition.line
    );
    if (nearestItemIndex !== -1) {
      JumpToTarget(
        editor,
        jumpItems[nearestItemIndex].position.start.line
      );
    }
  } else if (direction === 1) {
    const currentItemIndex = jumpItems.findIndex(
      (item) => item.position.start.line === currentPosition.line
    );
    const nearestItemIndex = jumpItems.findIndex(
      (item, index) => (isHeading ? item.level < 11 : item.level >= 11) && index > currentItemIndex && item.level > currentItem.level && item.position.start.line > currentPosition.line
    );
    if (nearestItemIndex !== -1) {
      JumpToTarget(
        editor,
        jumpItems[nearestItemIndex].position.start.line
      );
    }
  }
  return;
}
function getJumpItems(app) {
  var _a, _b;
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile)
    return void 0;
  const fileCache = app.metadataCache.getFileCache(activeFile);
  if (!fileCache)
    return void 0;
  const leveledListItems = (_a = fileCache.listItems) == null ? void 0 : _a.map((item) => {
    return { ...item, level: item.position.start.col + 11 };
  });
  const jumpItems = [
    ...(_b = fileCache.headings) != null ? _b : [],
    ...leveledListItems != null ? leveledListItems : []
  ];
  const sortedJumpItems = jumpItems.sort(
    (first, second) => first.position.start.line - second.position.start.line
  );
  return sortedJumpItems;
}
function JumpToTarget(editor, target, shouldSelection = true) {
  var _a;
  editor.setCursor(target);
  const newPosition = editor.getCursor();
  if (shouldSelection) {
    editor.setSelection({ ...newPosition, ch: 0 }, newPosition);
  }
  const range = (_a = editor.wordAt(newPosition)) != null ? _a : {
    from: newPosition,
    to: newPosition
  };
  editor.scrollIntoView(range, true);
}
function PeerSlidingInList({
  list,
  currentIndex,
  direction,
  isPeerJump,
  isStart
}) {
  const currentItem = list[currentIndex];
  const targetItem = list[currentIndex + direction];
  if (!isPeerJump) {
    if (targetItem) {
      return currentIndex + direction;
    } else {
      return -1;
    }
  }
  if (targetItem && targetItem.position.start.line - currentItem.position.start.line === direction) {
    return PeerSlidingInList({
      list,
      currentIndex: currentIndex + direction,
      direction,
      isPeerJump,
      isStart: false
    });
  } else {
    if (isStart) {
      return currentIndex + direction;
    } else {
      return currentIndex;
    }
  }
}

// src/settings_tab.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  peerJump: true,
  includeDocumentBoundaries: true,
  threshHold: 0
};
var JumpSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Include first/last line").setHeading().setDesc(
      "Go to the last line after the last item, and to the first line before the first item."
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.includeDocumentBoundaries).onChange(async (value) => {
        this.plugin.settings.includeDocumentBoundaries = toggle.getValue();
        await this.plugin.saveSettings();
        this.display();
      });
    });
    if (this.plugin.settings.includeDocumentBoundaries) {
      new import_obsidian.Setting(containerEl).setName("Threshold").setHeading().setDesc(
        "You can jump if attempts exceed the threshold at the first or last item."
      ).addText((text) => {
        var _a;
        text.setValue(
          ((_a = this.plugin.settings.threshHold) == null ? void 0 : _a.toString()) || "0"
        ).onChange(async (value) => {
          const parsedInt = parseInt(value);
          this.plugin.settings.threshHold = parsedInt >= 0 ? parsedInt : 0;
          await this.plugin.saveSettings();
        });
        text.inputEl.style.width = "50px";
      });
    }
    new import_obsidian.Setting(containerEl).setName("Peer jump").setHeading().setDesc("Jumps to the last stuck item of the same level.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.peerJump).onChange(async (value) => {
        this.plugin.settings.peerJump = toggle.getValue();
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var JumpPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.prevInfo = {
      tryCount: 0,
      prevDirection: null,
      prevLine: null
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new JumpSettingTab(this.app, this));
    this.addCommand({
      id: "jump-to-previous",
      name: "Jump to previous",
      editorCallback: (editor, view) => {
        jumpToWithSameLevel({
          editor,
          settings: this.settings,
          app: this.app,
          prevInfo: this.prevInfo,
          direction: -1
        });
      }
    });
    this.addCommand({
      id: "jump-to-next",
      name: "Jump to next",
      editorCallback: (editor, view) => {
        jumpToWithSameLevel({
          editor,
          settings: this.settings,
          app: this.app,
          prevInfo: this.prevInfo,
          direction: 1
        });
      }
    });
    this.addCommand({
      id: "jump-to-upper-level",
      name: "Jump to upper level",
      editorCallback: (editor, view) => {
        jumpToWithLevelChange({
          editor,
          settings: this.settings,
          app: this.app,
          direction: -1
        });
      }
    });
    this.addCommand({
      id: "jump-to-lower-level",
      name: "Jump to lower level",
      editorCallback: (editor, view) => {
        jumpToWithLevelChange({
          editor,
          settings: this.settings,
          app: this.app,
          direction: 1
        });
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
