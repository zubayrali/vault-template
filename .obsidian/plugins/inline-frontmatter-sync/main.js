/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InlineFMSync
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  syncedInlinePrefix: "\\_",
  undoKey: "z",
  ignoredFields: []
};
var InlineFMSync = class extends import_obsidian.Plugin {
  findFrontmatterEndLine(editor) {
    const firstLine = editor.getLine(0);
    if (firstLine !== "---") {
      return 0;
    }
    const secondLine = editor.getLine(1);
    if (secondLine === "---") {
      return 1;
    }
    for (let i = 2; i <= editor.lastLine(); i++) {
      if (editor.getLine(i) === "---") {
        return i;
      }
    }
    return 0;
  }
  isValidFieldName(fieldName) {
    return !fieldName.includes(" ") && !this.settings.ignoredFields.includes(fieldName);
  }
  wrapInQuotationsIfString(value) {
    const parsedDate = (0, import_obsidian.moment)(value);
    if (value === "true" || value === "false" || !isNaN(Number(value)) || parsedDate.isValid()) {
      return value;
    }
    if (value.startsWith('"') && value.endsWith('"')) {
      return value;
    }
    return `'${value}'`;
  }
  updateFrontmatterValue(editor, fieldName, newValue) {
    const frontMatterEndLine = this.findFrontmatterEndLine(editor);
    if (frontMatterEndLine === 0) {
      const initialFirstLineContent = editor.getLine(0);
      editor.setLine(0, `---
${fieldName}: ${newValue}
---
${initialFirstLineContent}`);
      return;
    } else {
      for (let i = 1; i <= frontMatterEndLine; i++) {
        const [currentYamlField] = editor.getLine(i).split(":", 1);
        if (currentYamlField === fieldName) {
          editor.setLine(i, `${fieldName}: ${newValue}`);
          return;
        }
      }
    }
    editor.setLine(0, `---
${fieldName}: ${newValue}`);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new InlineFMSyncSettingTab(this.app, this));
    this.registerDomEvent(document, "keydown", (evt) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView) {
        return;
      }
      if (evt.key.includes("Shift") || evt.key.includes("Control") || evt.ctrlKey && evt.key === this.settings.undoKey) {
        return;
      }
      setTimeout(() => {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const lineText = editor.getLine(cursor.line);
        const frontmatterEndLine = this.findFrontmatterEndLine(editor);
        if (cursor.line >= frontmatterEndLine) {
          if (lineText == null ? void 0 : lineText.includes("::")) {
            const declarationIndex = lineText.indexOf("::");
            if (cursor.ch >= declarationIndex) {
              const [before, after] = lineText.split("::");
              if (this.isValidFieldName(before)) {
                if (!before.startsWith(this.settings.syncedInlinePrefix)) {
                  editor.setLine(cursor.line, `${this.settings.syncedInlinePrefix}${before}:: ${after}`);
                }
                this.updateFrontmatterValue(
                  editor,
                  before.startsWith(this.settings.syncedInlinePrefix) ? before.substring(2) : before,
                  this.wrapInQuotationsIfString(after.trim())
                );
              }
            }
          }
        }
      }, 50);
    });
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var InlineFMSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Prefix for synced inline fields").setDesc("When your inline field is synced to frontmatter, this prefix will be added to prevent duplicates in dataview queries").addText((text) => text.setPlaceholder("ex. \\_").setValue(this.plugin.settings.syncedInlinePrefix).onChange(async (value) => {
      this.plugin.settings.syncedInlinePrefix = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Change undo key").setDesc("Will prevent sync on undo action (ctrl + your key) since otherwise it will freeze").addText((text) => text.setPlaceholder("ex. z").setValue(this.plugin.settings.undoKey).onChange(async (value) => {
      this.plugin.settings.undoKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Ignored fields").setDesc("Separate each field name with a comma (no spaces)").addTextArea((text) => text.setPlaceholder("ex. Status,Tags").setValue(this.plugin.settings.ignoredFields.join(",")).onChange(async (value) => {
      this.plugin.settings.ignoredFields = value.trim().split(",");
      await this.plugin.saveSettings();
    }));
  }
};
